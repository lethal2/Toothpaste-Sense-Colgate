--[[Colgatesense V3.7
    integrated kill all 👍
]]
if not KRNL_LOADED and not syn then
	return
end
if getgenv().prevent_inject == true then
	return
end
statustable = {
	["Blacklisted"] = false,
	["Valid Key"] = false,
	["Whitelisted"] = false,
	["Loader Finished"] = false,
	["Colgatesense Loading"] = false,
	["Colgatesense Loaded"] = false,
	["DISABLED"] = false,
}
library = {}
UserInputService = game:GetService("UserInputService") 
ReplicatedStorage = game:GetService("ReplicatedStorage") 
RunService = game:GetService("RunService") 
Lighting = game:GetService("Lighting") 
Players = game:GetService("Players") 
TweenService = game:GetService("TweenService") 
I = Instance.new 
C = Color3.fromRGB
U = UDim2.new
TableInverter = function(TABLE)
	if typeof(TABLE) == "table" then
		local TableInverterTable = {}
		for i, v in ipairs (TABLE) do
			TableInverterTable[i] = TABLE[#TABLE - i]
		end
		return TableInverterTable
	end
end
function library:Tween(...)
	if ({...})[3]["Text"] then
		local TBLA = ({...})[3]
		local NUMB = #(({...})[1].Text:split(""))
		local TBL = TBLA["Text"]:split("")
		local TBLB = {}
		local STRINGA = ""
		local STRINGB = ""
		local STRINGC = ""
		TBLA["Text"] = nil
		local NUMA = 0
		for i, v in pairs (TBLA) do
			NUMA+=1
		end
		if NUMA > 0 then
			TweenService:Create(...):Play()
		end
		TBLA = nil
		NUMA = nil
		if ({...})[1].Text ~= "" then
			STRINGB = ({...})[1].Text
			for i,v in ipairs(STRINGB:split("")) do
				for i1,v1 in ipairs(STRINGB:split("")) do
					if i1 <= i then
						STRINGC = STRINGC..v1
					end
				end
				TBLB[#TBLB + 1] = STRINGC
				STRINGC = nil
			end
			TBLB = TableInverter(TBLB)
			for i,v in ipairs(TBLB) do
				({...})[1].Text = v
				task.wait(({...})[2].Time/(#TBL+NUMB))
			end
		end
		for i,v in ipairs(TBL) do
			STRINGA = STRINGA..v;
			({...})[1].Text = STRINGA
			task.wait(({...})[2].Time/(#TBL+NUMB))
		end
		STRINGA = nil
		STRINGB = nil
		NUMB = nil
		TBLB = nil
	else
		TweenService:Create(...):Play()
	end
end
drag_gui_1 = function(var1)
	var1.Draggable = false 
	do 
		local UserInputService = game:GetService("UserInputService") 
		local a = var1 
		local dragInput 
		local dragStart 
		local startPos 
		local function update(input) 
			local delta = input.Position - dragStart 
			a.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y) 
		end 
		a.InputBegan:Connect(function(input) 
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then 
				var1.Draggable = true 
				dragStart = input.Position 
				startPos = a.Position 

				input.Changed:Connect(function() 
					if input.UserInputState == Enum.UserInputState.End then 
						var1.Draggable = false 
					end 
				end) 
			end 
		end) 
		a.InputChanged:Connect(function(input) 
			if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then 
				dragInput = input 
			end 
		end) 
		UserInputService.InputChanged:Connect(function(input) 
			if input == dragInput and var1.Draggable then 
				update(input) 
			end 
		end) 
	end 
end 
applyshad = function(p, forcecolor)
	RunService.RenderStepped:Wait()
	local shad = I("Frame", p)
	shad.BackgroundColor3 = forcecolor and forcecolor or C(255,255,255)
	shad.Position = U(0, 0, 0, 0)
	shad.Size = U(0, 3, 1, 0)
	shad.Name = "shad"
	shad.BorderSizePixel = 0
end
createkeygui = function()
	local gui = I("ScreenGui", game.CoreGui)
	gui.ResetOnSpawn = false
	gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
	gui.Name = "Loader"
	local status = I("TextLabel", gui)
	status.Name = "Status"
	status.Size = U(0,200,0,25)
	status.TextXAlignment = Enum.TextXAlignment.Left
	status.Font = "Code"
	status.TextSize = 20
	status.Text = "loading gui"
	status.TextStrokeTransparency = 0
	status.TextStrokeColor3 = C(0,0,0)
	status.TextColor3 = C(255,255,255)
	status.BackgroundTransparency = 1
	local maingui = I("Frame", gui)
	maingui.Name = "maingui"
	maingui.BackgroundColor3 = C(25, 25, 25)
	maingui.BorderSizePixel = 0
	maingui.Position = U(0.5, -200,0.5, -50)
	maingui.Size = U(0, 400, 0, 100)
	maingui.BackgroundTransparency = 0
	applyshad(maingui)
	drag_gui_1(maingui)
	local removeshitbutton = I("ImageButton", maingui)
	removeshitbutton.Name = "X"
	removeshitbutton.BackgroundTransparency = 1
	removeshitbutton.Position = U(1, -17,0, 2)
	removeshitbutton.Size = U(0, 15, 0, 15)
	removeshitbutton.Image = "http://www.roblox.com/asset/?id=6972617223"
	local KEY = I("TextBox", maingui)
	KEY.Name = "KEY"
	KEY.BackgroundColor3 = C(45,45,45)
	KEY.BorderSizePixel = 0
	KEY.Position = U(0, 45, 0, 50)
	KEY.Size = U(0, 217, 0, 25)
	KEY.ZIndex = 3
	KEY.Font = Enum.Font.Code
	KEY.PlaceholderColor3 = C(178,178,178)
	KEY.PlaceholderText = "KEY"
	KEY.Text = ""
	KEY.TextColor3 = C(255,255,255)
	KEY.TextSize = 14
	KEY.TextStrokeTransparency = 1
	local ENTER = Instance.new("TextButton", maingui)
	ENTER.Name = "ENTER"
	ENTER.BackgroundColor3 = C(35,35,35)
	ENTER.BorderSizePixel = 0
	ENTER.Position = U(0, 262, 0, 50)
	ENTER.Size = U(0, 93, 0, 25)
	ENTER.ZIndex = 3
	ENTER.Font = Enum.Font.Code
	ENTER.Text = "ENTER"
	ENTER.TextColor3 = C(255,255,255)
	ENTER.TextSize = 14
	ENTER.TextStrokeTransparency = 1
	applyshad(ENTER)
	local title = I("TextLabel", maingui)
	title.Name = "title"
	title.BackgroundTransparency = 1
	title.BorderSizePixel = 0
	title.Position = U(0.5,-100, 0, 0)
	title.Size = U(0, 200, 0, 50)
	title.ZIndex = 3
	title.Font = Enum.Font.Code
	title.Text = "colgatesense key"
	title.TextColor3 = C(255,255,255)
	title.TextSize = 20
	title.TextStrokeTransparency = 1
	local minimizetext = function(a)
		RunService.RenderStepped:Wait()
		library:Tween(title, TweenInfo.new(a), {TextSize = 0})
		library:Tween(KEY, TweenInfo.new(a), {TextSize = 0}) 
		library:Tween(ENTER, TweenInfo.new(a), {TextSize = 0}) 
		library:Tween(title, TweenInfo.new(a), {TextTransparency = 1}) 
		library:Tween(KEY, TweenInfo.new(a), {TextTransparency = 1}) 
	end
	local maximizetext = function(a)
		RunService.RenderStepped:Wait()
		library:Tween(title, TweenInfo.new(a), {TextSize = 20}) 
		library:Tween(KEY, TweenInfo.new(a), {TextSize = 14}) 
		library:Tween(ENTER, TweenInfo.new(a), {TextSize = 14}) 
		library:Tween(title, TweenInfo.new(a), {TextTransparency = 0}) 
		library:Tween(KEY, TweenInfo.new(a), {TextTransparency = 0}) 
	end
	local closegui = function(a)
		pcall(function()
			minimizetext(a)
			library:Tween(maingui, TweenInfo.new(a), {Size = U(0, 400, 0, 0)}) 
			library:Tween(title.shad, TweenInfo.new(a), {Transparency = 1}) 
			library:Tween(KEY.shad, TweenInfo.new(a), {Transparency = 1}) 
			library:Tween(title.shad, TweenInfo.new(a), {Transparency = 1}) 
			library:Tween(KEY.shad, TweenInfo.new(a), {Transparency = 1}) 
		end)	
	end
	local opengui = function(a)
		RunService.RenderStepped:Wait()
		pcall(function()
			maximizetext(a)
			library:Tween(maingui, TweenInfo.new(a), {Size = U(0, 400, 0, 100)}) 
			library:Tween(title.shad, TweenInfo.new(a), {Transparency = 0}) 
			library:Tween(KEY.shad, TweenInfo.new(a), {Transparency = 0}) 
			library:Tween(title.shad, TweenInfo.new(a), {Transparency = 0}) 
			library:Tween(KEY.shad, TweenInfo.new(a), {Transparency = 0}) 
		end)	
	end
	ENTER.MouseButton1Click:Connect(function()
		local tbl = {
			['keys'] = http_request and http_request({Url = "https://pastebin.com/raw/M5TWg6Se", Method = "GET"}).Body:split(";;") or syn and syn.request({Url = "https://pastebin.com/raw/M5TWg6Se", Method = "GET"}).Body:split(";;"),
		}
		if table.find(tbl['keys'], KEY.Text) then
			statustable["Valid Key"] = true
			statustable["Loader Finished"] = true
		end
	end)
	closegui(0.001)
	removeshitbutton.MouseButton1Click:Connect(function()
		status.Text = "closing gui..."
		statustable.DISABLED = true
		closegui(1)
		task.wait(1)
		gui:Destroy()
		closegui = nil
		minimizetext = nil
		maximizetext = nil
		opengui = nil
	end)
	coroutine.wrap(function()
		while task.wait() do
			if statustable["Loader Finished"] == true then
				if statustable.DISABLED == false then
					status.Text = "valid"
					task.wait(1)
					status.Text = "closing gui..."
					closegui(1)
					task.wait(1)
					maingui.Visible = false
					status.Text = "waiting for colgatesense..."
					repeat wait() until statustable["Colgatesense Loading"] == true
					status.Text = "loading colgatesense..."
					repeat wait() until statustable["Colgatesense Loaded"] == true
					status.Text = "loaded!"
					task.wait(5)
					gui:Destroy()
					closegui = nil
					minimizetext = nil
					maximizetext = nil
					opengui = nil
					break
				end
			else
				status.Text = "waiting for key"
				if statustable.DISABLED == true then
					break
				end
			end
		end
	end)()
	coroutine.wrap(function()
		repeat wait() until game:IsLoaded()
		opengui(1)
	end)()
end
createkeygui()
createkeygui = nil
repeat task.wait() until statustable["Loader Finished"] == true
statustable["Colgatesense Loading"] = true
timetakentick = tick()
getgenv().prevent_inject=true
getgenv().values = {}
Signal = loadstring(game:HttpGet("https://raw.githubusercontent.com/Quenty/NevermoreEngine/version2/Modules/Shared/Events/Signal.lua"))()
ConfigSave = Signal.new("ConfigSave") 
ConfigLoad = Signal.new("ConfigLoad") 

txt = game:GetService("TextService") 
cfglocation = "colgatecfg/" 
makefolder("colgatecfg") 

Vec2 = Vector2.new 
Vec3 = Vector3.new 
CF = CFrame.new 
INST = Instance.new 
COL3 = Color3.new 
COL3RGB = Color3.fromRGB 
COL3HSV = Color3.fromHSV 
CLAMP = math.clamp 
DEG = math.deg 
FLOOR = math.floor 
ACOS = math.acos 
RANDOM = math.random 
ATAN2 = math.atan2 
HUGE = math.huge 
RAD = math.rad 
MIN = math.min 
POW = math.pow 
UDIM2 = UDim2.new 
CFAngles = CFrame.Angles 

FIND = string.find 
LEN = string.len 
SUB = string.sub 
GSUB = string.gsub 
RAY = Ray.new 

INSERT = table.insert 
TBLFIND = table.find 
TBLREMOVE = table.remove 
TBLSORT = table.sort 
itezzzzzz = 1
waittable = {
	[1] = RunService.RenderStepped,
	[2] = RunService.Stepped,
	[3] = RunService.Heartbeat,
}
waitabit = function()
	itezzzzzz = itezzzzzz == 3 and 1 or itezzzzzz + 1
	waittable[itezzzzzz]:Wait()
end
function tbltorgb(tbl) 
	return COL3(tbl.R, tbl.G, tbl.B) 
end 
function deepCopy(original) 
	local copy = {} 
	for k, v in pairs(original) do 
		if type(v) == "table" then 
			v = deepCopy(v) 
		end 
		copy[k] = v 
	end 
	return copy 
end 
function library:ConfigFix(cfg) 
	local copy = game:GetService("HttpService"):JSONDecode(readfile(cfglocation..cfg..".txt")) 
	for i,Tabs in pairs(copy) do 
		for i,Sectors in pairs(Tabs) do 
			for i,Elements in pairs(Sectors) do 
				if Elements.Color ~= nil then 
					local a = Elements.Color 
					Elements.Color = tbltorgb(a) 
				end 
			end 
		end 
	end 
	return copy 
end 
function library:SaveConfig(cfg) 
	local copy = deepCopy(values) 
	for i,Tabs in pairs(copy) do 
		for i,Sectors in pairs(Tabs) do 
			for i,Elements in pairs(Sectors) do 
				if Elements.Color ~= nil then 	
					Elements.Color = {R=Elements.Color.R, G=Elements.Color.G, B=Elements.Color.B} 
				end 
			end 
		end 
	end 
	writefile(cfglocation..cfg..".txt", game:GetService("HttpService"):JSONEncode(copy)) 
end 
function returna_an(str)
	local stringsplit = string.split(str, " ")
	local tostringfirst = string.split(tostring(stringsplit[1]), "")[1]
	local tableae = {"a", "e", "i", "o"}
	local detect = table.find(tableae, string.lower(tostringfirst))
	local final = detect ~= nil and "an "..str or "a "..str
	local antable = {"SG", "R8", "MP5", "MP7", "HE Grenade", "M249", "MG42"}
	if table.find(antable, str) then final = "an "..str 
	elseif str == "DualBerettas" then final = "DualBerettas"
	end
	return final
end
function IsAlive(plr)
	if plr and plr.Character and plr.Character.FindFirstChild(plr.Character, "Humanoid") and plr.Character.Humanoid.Health > 0 then
		return true
	end

	return false
end
function GetSite()
	if (LocalPlayer.Character.HumanoidRootPart.Position - workspace.Map.SpawnPoints.C4Plant.Position).magnitude > (LocalPlayer.Character.HumanoidRootPart.Position - workspace.Map.SpawnPoints.C4Plant2.Position).magnitude then
		return "A"
	else
		return "B"
	end
end
createcustommessage = function(name, message)
	getsenv(game.Players.LocalPlayer.PlayerGui.GUI.Main.Chats.DisplayChat).createNewMessage(
	name,
	message,
	Color3.fromRGB(30, 175, 255), 
	Color3.new(1,1,1),
	0.01
	)
end
function library:New(name) 
	local menu = {} 

	local colgate = INST("ScreenGui") 
	local MenuBG = INST("ImageLabel") 
	local Menu = INST("ScrollingFrame") 
	local TextLabel = INST("TextLabel") 
	local TabButtons = INST("Frame") 
	local UIListLayout = INST("UIListLayout") 
	local Tabs = INST("Frame") 

	colgate.Name = "Discord: larabear#2200, Twitter: @wqwot" 
	colgate.ResetOnSpawn = false 
	colgate.ZIndexBehavior = "Global" 
	colgate.DisplayOrder = 420133769 

	local UIScale = INST("UIScale") 
	UIScale.Parent = colgate 

	--[[function menu:SetScale(scale)  ??
		UIScale.Scale = scale 
	end ]]

	local ass = INST("TextButton") 
	ass.Modal = true 
	ass.Text = "" 
	ass.BackgroundTransparency = 1 
	ass.Parent = colgate 

	local cursor = INST("ImageLabel") 
	cursor.Name = "cursor" 
	cursor.Parent = colgate 
	cursor.BackgroundTransparency = 1 
	cursor.Size = UDIM2(0,64,0,64) 
	cursor.Image = "rbxassetid://7543116323" 
	cursor.ZIndex = 1000 
	cursor.ImageColor3 = COL3RGB(255,255,255) 

	local Players = game:GetService("Players") 
	local LocalPlayer = Players.LocalPlayer 
	local Mouse = LocalPlayer:GetMouse() 

	game:GetService("RunService").RenderStepped:connect(function() 
		cursor.Visible = colgate.Enabled 
		cursor.Position = UDIM2(0,Mouse.X-32,0,Mouse.Y-28) 
	end) 

	Menu.Name = "Menu" 
	Menu.Parent = colgate 
	Menu.BackgroundTransparency = 1
	Menu.Position = UDIM2(0.5, -300, 0.5, -300) 
	Menu.Size = UDIM2(0, 600, 0, 625) 
	Menu.BorderSizePixel = 0 
	Menu.CanvasSize = UDIM2(1,0,2,0) 
	Menu.ScrollBarThickness = 0
	Menu.AutomaticCanvasSize = "Y" 
	Menu.ZIndex = 0
	Menu.TopImage = "http://www.roblox.com/asset/?id=6724808282" 
	Menu.MidImage = "http://www.roblox.com/asset/?id=6724808282" 
	Menu.BottomImage = "http://www.roblox.com/asset/?id=6724808282" 
	Menu.ScrollBarImageColor3 = COL3RGB(30, 115, 255) 

	MenuBG.Name = "MenuBG" 
	MenuBG.Parent = Menu
	MenuBG.BackgroundColor3 = COL3RGB(255, 255, 255) 
	MenuBG.ImageColor3 = COL3RGB(125,125,125)
	MenuBG.Position = UDIM2(0,0,0,0) 
	MenuBG.Size =  UDIM2(1,0,25,0)
	MenuBG.ZIndex = 0
	MenuBG.ScaleType = Enum.ScaleType.Tile 
	MenuBG.TileSize = UDIM2(0, 600, 0, 625)
	MenuBG.BorderSizePixel = 0
	MenuBG.Image = "http://www.roblox.com/asset/?id=8808385788" 

	drag_gui_1(Menu)

	library.uiopen = true 

	game:GetService("UserInputService").InputBegan:Connect(function(key) 
		if key.KeyCode == Enum.KeyCode.Insert then 
			colgate.Enabled = not colgate.Enabled 
			library.uiopen = colgate.Enabled 
		end 
	end) 

	local KeybindList = INST("ScreenGui") 
	do 
		local TextLabel = INST("TextLabel") 
		local Frame = INST("Frame") 
		local UIListLayout = INST("UIListLayout") 

		KeybindList.Name = "KeybindList" 
		KeybindList.ZIndexBehavior = Enum.ZIndexBehavior.Global 
		KeybindList.Enabled = false 

		TextLabel.Parent = KeybindList 
		TextLabel.BackgroundColor3 = COL3RGB(0, 0, 0) 
		TextLabel.BorderColor3 = COL3RGB(30, 115, 255) 
		TextLabel.Position = UDIM2(0, 1, 0.300000012, 0) 
		TextLabel.Size = UDIM2(0, 155, 0, 25) 
		TextLabel.ZIndex = 2 
		TextLabel.Font = Enum.Font.SourceSansSemibold 
		TextLabel.Text = "keybinds" 
		TextLabel.TextColor3 = COL3RGB(255, 255, 255) 
		TextLabel.TextSize = 14.000 
		drag_gui_1(TextLabel)

		Frame.Parent = TextLabel 
		Frame.BackgroundColor3 = COL3RGB(255, 255, 255) 
		Frame.BackgroundTransparency = 1.000 
		Frame.Position = UDIM2(0, 0, 1, 1) 
		Frame.Size = UDIM2(1, 0, 1, 0) 

		UIListLayout.Parent = Frame 
		UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center 
		UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder 

		KeybindList.Parent = game.CoreGui 
	end 

	function keybindadd(text) 
		if not KeybindList.TextLabel.Frame:FindFirstChild(text) then 
			local TextLabel = INST("TextLabel") 
			TextLabel.BackgroundColor3 = COL3RGB(1, 1, 1) 
			TextLabel.BorderColor3 = COL3RGB(30, 115, 255) 
			TextLabel.BorderSizePixel = 0 
			TextLabel.Size = UDIM2(0, 155, 0, 24) 
			TextLabel.ZIndex = 2 
			TextLabel.Font = Enum.Font.SourceSansSemibold 
			TextLabel.Text = text 
			TextLabel.TextColor3 = COL3RGB(255, 255, 255) 
			TextLabel.TextSize = 14.000 
			TextLabel.Name = text 
			TextLabel.Parent = KeybindList.TextLabel.Frame 
		end 
	end 

	function keybindremove(text) 
		if KeybindList.TextLabel.Frame:FindFirstChild(text) then 
			KeybindList.TextLabel.Frame:FindFirstChild(text):Destroy() 
		end 
	end 

	function library:SetKeybindVisible(Joe) 
		KeybindList.Enabled = Joe 
	end 

	TextLabel.Parent = Menu 
	TextLabel.BackgroundColor3 = COL3RGB(0,0,0) 
	TextLabel.BackgroundTransparency = 1
	TextLabel.Position = UDIM2(0, 7, 0, 0) 
	TextLabel.Size = UDIM2(0, 0, 0, 29) 
	TextLabel.Size = UDIM2(0, txt:GetTextSize(name, 15, Enum.Font.SourceSansSemibold, Vec2(700, TextLabel.AbsoluteSize.Y)).X, 0, 29) 
	TextLabel.Font = Enum.Font.SourceSansSemibold 
	TextLabel.Text = name 
	TextLabel.TextColor3 = COL3RGB(255, 255, 255) 
	TextLabel.TextSize = 15.000 
	TextLabel.TextXAlignment = Enum.TextXAlignment.Left 
	TextLabel.BorderSizePixel = 0
	TextLabel.ZIndex = 2

	local TabBar = INST("Frame") 
	TabBar.Parent = Menu 
	TabBar.BackgroundColor3 = COL3RGB(0,0,0) 
	TabBar.BackgroundTransparency = 0
	TabBar.BorderSizePixel = 0
	TabBar.Position = UDIM2(0, 0, 0, 0) 
	TabBar.Size = UDIM2(0, 90, 0, 29) 
	TabBar.ZIndex = 1

	TabButtons.Name = "TabButtons" 
	TabButtons.Parent = Menu 
	TabButtons.BackgroundColor3 = COL3RGB(0,0,0) 
	TabButtons.BackgroundTransparency = 0
	TabButtons.BorderSizePixel = 0
	TabButtons.Position = UDIM2(TextLabel.Size.X.Scale, TextLabel.Size.X.Offset+10, 0, 0) 
	TabButtons.Size = UDIM2(TextLabel.Size.X.Scale, 590-TextLabel.Size.X.Offset, 0, 29) 

	UIListLayout.Parent = TabButtons 
	UIListLayout.FillDirection = Enum.FillDirection.Horizontal 
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder 
	UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center 

	Tabs.Name = "Tabs" 
	Tabs.Parent = Menu 
	Tabs.BackgroundColor3 = COL3RGB(1, 1, 1) 
	Tabs.BackgroundTransparency = 1
	Tabs.BorderSizePixel = 0
	Tabs.Position = UDIM2(0, 0, 0, 32) 
	Tabs.Size = UDIM2(0, 600, 0, 568) 

	local first = true 
	local currenttab 

	function menu:Tab(text) 
		local tabname 
		tabname = text 
		local Tab = {} 
		values[tabname] = {} 

		local TextButton = INST("TextButton") 
		TextButton.BackgroundColor3 = COL3RGB(255, 255, 255) 
		TextButton.BackgroundTransparency = 1 
		TextButton.Size = UDIM2(0, txt:GetTextSize(text, 15, Enum.Font.SourceSansSemibold, Vec2(700,700)).X+12, 1, 0) 
		TextButton.Font = Enum.Font.SourceSansSemibold 
		TextButton.Text = text 
		TextButton.TextColor3 = COL3RGB(255, 255, 255) 
		TextButton.TextSize = 15.000 
		TextButton.Parent = TabButtons 

		local TabGui = INST("Frame") 
		local Left = INST("Frame") 
		local UIListLayout = INST("UIListLayout") 
		local Right = INST("Frame") 
		local UIListLayout_2 = INST("UIListLayout") 

		TabGui.Name = "TabGui" 
		TabGui.Parent = Tabs 
		TabGui.BackgroundColor3 = COL3RGB(255, 255, 255) 
		TabGui.BackgroundTransparency = 1.000 
		TabGui.Size = UDIM2(1, 0, 1, 0) 
		TabGui.Visible = false 

		Left.Name = "Left" 
		Left.Parent = TabGui 
		Left.BackgroundColor3 = COL3RGB(255, 255, 255) 
		Left.BackgroundTransparency = 1.000 
		Left.Position = UDIM2(0, 15, 0, 11) 
		Left.Size = UDIM2(0, 279, 0, 543) 

		UIListLayout.Parent = Left 
		UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center 
		UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder 
		UIListLayout.Padding = UDim.new(0, 10) 

		Right.Name = "Right" 
		Right.Parent = TabGui 
		Right.BackgroundColor3 = COL3RGB(255, 255, 255) 
		Right.BackgroundTransparency = 1.000 
		Right.Position = UDIM2(0, 303, 0, 11) 
		Right.Size = UDIM2(0, 279, 0, 543) 

		UIListLayout_2.Parent = Right 
		UIListLayout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center 
		UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder 
		UIListLayout_2.Padding = UDim.new(0, 10) 

		if first then 
			TextButton.TextColor3 = COL3RGB(255, 255, 255) 
			currenttab = text 
			TabGui.Visible = true 
			first = false 
		end 

		TextButton.MouseButton1Down:Connect(function() 
			if currenttab ~= text then 
				for i,v in pairs(TabButtons:GetChildren()) do 
					if v:IsA("TextButton") then 
						library:Tween(v, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)}) 
					end 
				end 
				for i,v in pairs(Tabs:GetChildren()) do 
					v.Visible = false 
				end 
				library:Tween(TextButton, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)}) 
				currenttab = text 
				TabGui.Visible = true 
			end 
		end) 

		function Tab:MSector(text, side) 
			local sectorname = text 
			local MSector = {} 
			values[tabname][text] = {} 


			local Section = INST("Frame") 
			local SectionText = INST("TextLabel") 
			local Inner = INST("Frame") 
			local sectiontabs = INST("Frame") 
			local UIListLayout_2 = INST("UIListLayout") 

			Section.Name = "Section" 
			Section.Parent = TabGui[side] 
			Section.BackgroundColor3 = COL3RGB(1, 1, 1) 
			Section.BorderColor3 = COL3RGB(30, 30, 30) 
			Section.BorderSizePixel = 0.500
			Section.Size = UDIM2(1, 0, 0, 33) 

			SectionText.Name = "SectionText" 
			SectionText.Parent = Section 
			SectionText.BackgroundColor3 = COL3RGB(255, 255, 255) 
			SectionText.BackgroundTransparency = 1.000 
			SectionText.Position = UDIM2(0, 7, 0, -12) 
			SectionText.Size = UDIM2(0, 270, 0, 19) 
			SectionText.ZIndex = 2 
			SectionText.Font = Enum.Font.SourceSansSemibold 
			SectionText.Text = text 
			SectionText.TextColor3 = COL3RGB(255, 255, 255) 
			SectionText.TextSize = 15.000 
			SectionText.TextXAlignment = Enum.TextXAlignment.Left 

			Inner.Name = "Inner" 
			Inner.Parent = Section 
			Inner.BackgroundColor3 = COL3RGB(1, 1, 1) 
			Inner.BorderColor3 = COL3RGB(30, 30, 30) 
			Inner.BorderSizePixel = 0 
			Inner.Position = UDIM2(0, 1, 0, 1) 
			Inner.Size = UDIM2(1, -2, 1, -9) 

			sectiontabs.Name = "sectiontabs" 
			sectiontabs.Parent = Section 
			sectiontabs.BackgroundColor3 = COL3RGB(255, 255, 255) 
			sectiontabs.BackgroundTransparency = 1.000 
			sectiontabs.Position = UDIM2(0, 0, 0, 6) 
			sectiontabs.Size = UDIM2(1, 0, 0, 22) 

			UIListLayout_2.Parent = sectiontabs 
			UIListLayout_2.FillDirection = Enum.FillDirection.Horizontal 
			UIListLayout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center 
			UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder 
			UIListLayout_2.Padding = UDim.new(0,4) 

			local firs = true 
			local selected 
			function MSector:Tab(text) 
				local tab = {} 
				values[tabname][sectorname][text] = {} 
				local tabtext = text 

				local tabsize = UDIM2(1, 0, 0, 44) 

				local tab1 = INST("Frame") 
				local UIPadding = INST("UIPadding") 
				local UIListLayout = INST("UIListLayout") 
				local TextButton = INST("TextButton") 

				tab1.Name = text 
				tab1.Parent = Inner 
				tab1.BackgroundColor3 = COL3RGB(1, 1, 1) 
				tab1.BorderColor3 = COL3RGB(30, 30, 30) 
				tab1.BorderSizePixel = 0 
				tab1.Position = UDIM2(0, 0, 0, 30) 
				tab1.Size = UDIM2(1, 0, 1, -21) 
				tab1.Name = text 
				tab1.Visible = false 

				UIPadding.Parent = tab1 
				UIPadding.PaddingTop = UDim.new(0, 0) 

				UIListLayout.Parent = tab1 
				UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center 
				UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder 
				UIListLayout.Padding = UDim.new(0, 1) 

				TextButton.Parent = sectiontabs 
				TextButton.BackgroundColor3 = COL3RGB(255, 255, 255) 
				TextButton.BackgroundTransparency = 1.000 
				TextButton.Size = UDIM2(0, txt:GetTextSize(text, 14, Enum.Font.SourceSansSemibold, Vec2(700,700)).X + 2, 1, 0) 
				TextButton.Font = Enum.Font.SourceSansSemibold 
				TextButton.Text = text 
				TextButton.TextColor3 = COL3RGB(200, 200, 200) 
				TextButton.TextSize = 14.000 
				TextButton.Name = text 

				TextButton.MouseButton1Down:Connect(function() 
					for i,v in pairs(Inner:GetChildren()) do 
						v.Visible = false 
					end 
					for i,v in pairs(sectiontabs:GetChildren()) do 
						if v:IsA("TextButton") then 
							library:Tween(v, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)}) 
						end 
					end 
					Section.Size = tabsize 
					tab1.Visible = true 
					library:Tween(TextButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)}) 
				end) 

				function tab:Element(type, text, data, callback) 
					local Element = {} 
					data = data or {} 
					callback = callback or function() end 
					values[tabname][sectorname][tabtext][text] = {} 

					if type == "Jumbobox" then 
						tabsize = tabsize + UDIM2(0,0,0, 39) 
						Element.value = {Jumbobox = {}} 
						data.options = data.options or {} 

						local Dropdown = INST("Frame") 
						local Button = INST("TextButton") 
						local TextLabel = INST("TextLabel") 
						local Drop = INST("ScrollingFrame") 
						local Button_2 = INST("TextButton") 
						local TextLabel_2 = INST("TextLabel") 
						local UIListLayout = INST("UIListLayout") 
						local ImageLabel = INST("ImageLabel") 
						local TextLabel_3 = INST("TextLabel") 

						Dropdown.Name = "Dropdown" 
						Dropdown.Parent = tab1 
						Dropdown.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Dropdown.BackgroundTransparency = 1.000 
						Dropdown.Position = UDIM2(0, 0, 0.255102038, 0) 
						Dropdown.Size = UDIM2(1, 0, 0, 39) 

						Button.Name = "Button" 
						Button.Parent = Dropdown 
						Button.BackgroundColor3 = COL3RGB(1, 1, 1) 
						Button.BorderColor3 = COL3RGB(30, 30, 30) 
						Button.Position = UDIM2(0, 30, 0, 16) 
						Button.Size = UDIM2(0, 175, 0, 17) 
						Button.AutoButtonColor = false 
						Button.Font = Enum.Font.SourceSans 
						Button.Text = "" 
						Button.TextColor3 = COL3RGB(0, 0, 0) 
						Button.TextSize = 14.000 

						TextLabel.Parent = Button 
						TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
						TextLabel.BackgroundTransparency = 1.000 
						TextLabel.BorderColor3 = COL3RGB(30, 30, 30) 
						TextLabel.Position = UDIM2(0, 5, 0, 0) 
						TextLabel.Size = UDIM2(-0.21714285, 208, 1, 0) 
						TextLabel.Font = Enum.Font.SourceSansSemibold 
						TextLabel.Text = "..." 
						TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
						TextLabel.TextSize = 14.000 
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left 

						local abcd = TextLabel 

						Drop.Name = "Drop" 
						Drop.Parent = Button 
						Drop.Active = true 
						Drop.BackgroundColor3 = COL3RGB(1, 1, 1) 
						Drop.BorderColor3 = COL3RGB(30, 30, 30) 
						Drop.Position = UDIM2(0, 0, 1, 1) 
						Drop.Size = UDIM2(1, 0, 0, 20) 
						Drop.Visible = false 
						Drop.BottomImage = "http://www.roblox.com/asset/?id=6724808282" 
						Drop.CanvasSize = UDIM2(1, 1, 1, 1) 
						Drop.ScrollBarThickness = 0
						Drop.TopImage = "http://www.roblox.com/asset/?id=6724808282" 
						Drop.MidImage = "http://www.roblox.com/asset/?id=6724808282" 
						Drop.AutomaticCanvasSize = "Y" 
						Drop.ZIndex = 5 
						Drop.ScrollBarImageColor3 = COL3RGB(30, 115, 255) 

						UIListLayout.Parent = Drop 
						UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center 
						UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder 

						values[tabname][sectorname][tabtext][text] = Element.value 
						local num = #data.options 
						if num > 5 then 
							Drop.Size = UDIM2(1, 0, 0, 85) 
						else 
							Drop.Size = UDIM2(1, 0, 0, 17*num) 
						end 
						local first = true 

						local function updatetext() 
							local old = {} 
							for i,v in ipairs(data.options) do 
								if TBLFIND(Element.value.Jumbobox, v) then 
									old[#old+1] = (v) 
								else 
								end 
							end 
							local str = "" 


							if #old == 0 then 
								str = "..." 
							else 
								if #old == 1 then 
									str = old[1] 
								else 
									for i,v in ipairs(old) do 
										if i == 1 then 
											str = v 
										else 
											if i > 2 then 
												if i < 4 then 
													str = str..",  ..." 
												end 
											else 
												str = str..",  "..v 
											end 
										end 
									end 
								end 
							end 

							abcd.Text = str 
						end 
						for i,v in ipairs(data.options) do 
							do 
								local Button = INST("TextButton") 
								local TextLabel = INST("TextLabel") 

								Button.Name = v 
								Button.Parent = Drop 
								Button.BackgroundColor3 = COL3RGB(1, 1, 1) 
								Button.BorderColor3 = COL3RGB(30, 30, 30) 
								Button.Position = UDIM2(0, 30, 0, 16) 
								Button.Size = UDIM2(0, 175, 0, 17) 
								Button.AutoButtonColor = false 
								Button.Font = Enum.Font.SourceSans 
								Button.Text = "" 
								Button.TextColor3 = COL3RGB(0, 0, 0) 
								Button.TextSize = 14.000 
								Button.BorderSizePixel = 0 
								Button.ZIndex = 6 

								TextLabel.Parent = Button 
								TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
								TextLabel.BackgroundTransparency = 1.000 
								TextLabel.BorderColor3 = COL3RGB(25, 25, 25) 
								TextLabel.Position = UDIM2(0, 5, 0, -1) 
								TextLabel.Size = UDIM2(-0.21714285, 208, 1, 0) 
								TextLabel.Font = Enum.Font.SourceSansSemibold 
								TextLabel.Text = v 
								TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
								TextLabel.TextSize = 14.000 
								TextLabel.TextXAlignment = Enum.TextXAlignment.Left 
								TextLabel.ZIndex = 6 

								Button.MouseButton1Down:Connect(function() 
									if TBLFIND(Element.value.Jumbobox, v) then 
										for i,a in pairs(Element.value.Jumbobox) do 
											if a == v then 
												TBLREMOVE(Element.value.Jumbobox, i) 
											end 
										end 
										library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(255, 255, 255)}) 
									else 
										Element.value.Jumbobox[#Element.value.Jumbobox+1] = (v) 
										library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)}) 
									end 
									updatetext() 

									values[tabname][sectorname][tabtext][text] = Element.value 
									callback(Element.value) 
								end) 
								Button.MouseEnter:Connect(function() 
									if not TBLFIND(Element.value.Jumbobox, v) then 
										library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)}) 
									end 
								end) 
								Button.MouseLeave:Connect(function() 
									if not TBLFIND(Element.value.Jumbobox, v) then 
										library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)}) 
									end 
								end) 

								first = false 
							end 
						end 
						function Element:SetValue(val) 
							Element.value = val 
							for i,v in pairs(Drop:GetChildren()) do 
								if v.Name ~= "UIListLayout" then 
									if TBLFIND(val.Jumbobox, v.Name) then 
										v.TextLabel.TextColor3 = COL3RGB(30, 115, 255)
									else 
										v.TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
									end 
								end 
							end 
							updatetext() 
							values[tabname][sectorname][tabtext][text] = Element.value 
							callback(val) 
						end 
						if data.default then 
							Element:SetValue(data.default) 
						end 

						ImageLabel.Parent = Button 
						ImageLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
						ImageLabel.BackgroundTransparency = 1.000 
						ImageLabel.Position = UDIM2(0, 165, 0, 6) 
						ImageLabel.Size = UDIM2(0, 6, 0, 4) 
						ImageLabel.Image = "http://www.roblox.com/asset/?id=6724771531" 

						TextLabel_3.Parent = Dropdown 
						TextLabel_3.BackgroundColor3 = COL3RGB(200, 200, 200) 
						TextLabel_3.BackgroundTransparency = 1.000 
						TextLabel_3.Position = UDIM2(0, 32, 0, -1) 
						TextLabel_3.Size = UDIM2(0.111913361, 208, 0.382215232, 0) 
						TextLabel_3.Font = Enum.Font.SourceSansSemibold 
						TextLabel_3.Text = text 
						TextLabel_3.TextColor3 = COL3RGB(200, 200, 200) 
						TextLabel_3.TextSize = 14.000 
						TextLabel_3.TextXAlignment = Enum.TextXAlignment.Left 

						Button.MouseButton1Down:Connect(function() 
							Drop.Visible = not Drop.Visible 
							if not Drop.Visible then 
								Drop.CanvasPosition = Vec2(0,0) 
							end 
						end) 
						local indrop = false 
						local ind = false 
						Drop.MouseEnter:Connect(function() 
							indrop = true 
						end) 
						Drop.MouseLeave:Connect(function() 
							indrop = false 
						end) 
						Button.MouseEnter:Connect(function() 
							ind = true 
						end) 
						Button.MouseLeave:Connect(function() 
							ind = false 
						end) 
						game:GetService("UserInputService").InputBegan:Connect(function(input) 
							if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then 
								if Drop.Visible == true and not indrop and not ind then 
									Drop.Visible = false 
									Drop.CanvasPosition = Vec2(0,0) 
								end 
							end 
						end) 
					elseif type == "TextBox" then 

					elseif type == "ToggleKeybind" then 
						tabsize = tabsize + UDIM2(0,0,0,16) 
						Element.value = {Toggle = data.default and data.default.Toggle or false, Key, Type = "Always", Active = true} 

						local Toggle = INST("Frame") 
						local Button = INST("TextButton") 
						local Color = INST("Frame") 
						local TextLabel = INST("TextLabel") 

						Toggle.Name = "Toggle" 
						Toggle.Parent = tab1 
						Toggle.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Toggle.BackgroundTransparency = 1.000 
						Toggle.Size = UDIM2(1, 0, 0, 15) 

						Button.Name = "Button" 
						Button.Parent = Toggle 
						Button.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Button.BackgroundTransparency = 1.000 
						Button.Size = UDIM2(1, 0, 1, 0) 
						Button.Font = Enum.Font.SourceSans 
						Button.Text = "" 
						Button.TextColor3 = COL3RGB(0, 0, 0) 
						Button.TextSize = 14.000 

						Color.Name = "Color" 
						Color.Parent = Button 
						Color.BackgroundColor3 = COL3RGB(30, 115, 255)
						Color.BorderColor3 = COL3RGB(30, 30, 30) 
						Color.Position = UDIM2(0, 15, 0.5, -5) 
						Color.Size = UDIM2(0, 8, 0, 8) 
						local binding = false 
						TextLabel.Parent = Button 
						TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
						TextLabel.BackgroundTransparency = 1.000 
						TextLabel.Position = UDIM2(0, 32, 0, -1) 
						TextLabel.Size = UDIM2(0.111913361, 208, 1, 0) 
						TextLabel.Font = Enum.Font.SourceSansSemibold 
						TextLabel.Text = text 
						TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
						TextLabel.TextSize = 14.000 
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left 

						local function update() 
							if Element.value.Toggle then 
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(30, 115, 255)}) 
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(255, 255, 255)}) 
							else 
								keybindremove(text) 
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(1, 1, 1)}) 
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)}) 
							end 
							values[tabname][sectorname][tabtext][text] = Element.value 
							callback(Element.value) 
						end 

						Button.MouseButton1Down:Connect(function() 
							if not binding then 
								Element.value.Toggle = not Element.value.Toggle 
								update() 
								values[tabname][sectorname][tabtext][text] = Element.value 
								callback(Element.value) 
							end 
						end) 
						if data.default then 
							update() 
						end 
						values[tabname][sectorname][tabtext][text] = Element.value 
						do 
							local Keybind = INST("TextButton") 
							local Frame = INST("Frame") 
							local Always = INST("TextButton") 
							local UIListLayout = INST("UIListLayout") 
							local Hold = INST("TextButton") 
							local Toggle = INST("TextButton") 

							Keybind.Name = "Keybind" 
							Keybind.Parent = Button 
							Keybind.BackgroundColor3 = COL3RGB(1, 1, 1) 
							Keybind.BorderColor3 = COL3RGB(30, 30, 30) 
							Keybind.Position = UDIM2(0, 270, 0.5, -6) 
							Keybind.Text = "NONE" 
							Keybind.Size = UDIM2(0, 43, 0, 12) 
							Keybind.Size = UDIM2(0,txt:GetTextSize("NONE", 14, Enum.Font.SourceSansSemibold, Vec2(700, 12)).X + 5,0, 12) 
							Keybind.AutoButtonColor = false 
							Keybind.Font = Enum.Font.SourceSansSemibold 
							Keybind.TextColor3 = COL3RGB(200, 200, 200) 
							Keybind.TextSize = 14.000 
							Keybind.AnchorPoint = Vec2(1,0) 
							Keybind.ZIndex = 3 

							Frame.Parent = Keybind 
							Frame.BackgroundColor3 = COL3RGB(1, 1, 1) 
							Frame.BorderColor3 = COL3RGB(30, 30, 30) 
							Frame.Position = UDIM2(1, -49, 0, 1) 
							Frame.Size = UDIM2(0, 49, 0, 49) 
							Frame.Visible = false 
							Frame.ZIndex = 3 

							Always.Name = "Always" 
							Always.Parent = Frame 
							Always.BackgroundColor3 = COL3RGB(1, 1, 1) 
							Always.BackgroundTransparency = 1.000 
							Always.BorderColor3 = COL3RGB(30, 30, 30) 
							Always.Position = UDIM2(-3.03289485, 231, 0.115384616, -6) 
							Always.Size = UDIM2(1, 0, 0, 16) 
							Always.AutoButtonColor = false 
							Always.Font = Enum.Font.SourceSansBold 
							Always.Text = "Always" 
							Always.TextColor3 = COL3RGB(30, 115, 255)
							Always.TextSize = 14.000 
							Always.ZIndex = 3 

							UIListLayout.Parent = Frame 
							UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center 
							UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder 

							Hold.Name = "Hold" 
							Hold.Parent = Frame 
							Hold.BackgroundColor3 = COL3RGB(1, 1, 1) 
							Hold.BackgroundTransparency = 1.000 
							Hold.BorderColor3 = COL3RGB(30, 30, 30) 
							Hold.Position = UDIM2(-3.03289485, 231, 0.115384616, -6) 
							Hold.Size = UDIM2(1, 0, 0, 16) 
							Hold.AutoButtonColor = false 
							Hold.Font = Enum.Font.SourceSansSemibold 
							Hold.Text = "Hold" 
							Hold.TextColor3 = COL3RGB(200, 200, 200) 
							Hold.TextSize = 14.000 
							Hold.ZIndex = 3 

							Toggle.Name = "Toggle" 
							Toggle.Parent = Frame 
							Toggle.BackgroundColor3 = COL3RGB(1, 1, 1) 
							Toggle.BackgroundTransparency = 1.000 
							Toggle.BorderColor3 = COL3RGB(30, 30, 30) 
							Toggle.Position = UDIM2(-3.03289485, 231, 0.115384616, -6) 
							Toggle.Size = UDIM2(1, 0, 0, 16) 
							Toggle.AutoButtonColor = false 
							Toggle.Font = Enum.Font.SourceSansSemibold 
							Toggle.Text = "Toggle" 
							Toggle.TextColor3 = COL3RGB(200, 200, 200) 
							Toggle.TextSize = 14.000 
							Toggle.ZIndex = 3 

							for _,button in pairs(Frame:GetChildren()) do 
								if button:IsA("TextButton") then 
									button.MouseButton1Down:Connect(function() 
										Element.value.Type = button.Text 
										Frame.Visible = false 
										Element.value.Active = Element.value.Type == "Always" and true or false 
										if Element.value.Type == "Always" then 
											keybindremove(text) 
										end 
										for _,button in pairs(Frame:GetChildren()) do 
											if button:IsA("TextButton") and button.Text ~= Element.value.Type then 
												button.Font = Enum.Font.SourceSansSemibold 
												library:Tween(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200,200,200)}) 
											end 
										end 
										button.Font = Enum.Font.SourceSansBold 
										button.TextColor3 = COL3RGB(30, 115, 255) 
										values[tabname][sectorname][tabtext][text] = Element.value 
										callback(Element.value) 
									end) 
									button.MouseEnter:Connect(function() 
										if Element.value.Type ~= button.Text then 
											library:Tween(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)}) 
										end 
									end) 
									button.MouseLeave:Connect(function() 
										if Element.value.Type ~= button.Text then 
											library:Tween(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200,200,200)}) 
										end 
									end) 
								end 
							end 
							Keybind.MouseButton1Down:Connect(function() 
								if not binding then 
									wait() 
									binding = true 
									Keybind.Text = "..." 
									Keybind.Size = UDIM2(0,txt:GetTextSize("...", 14, Enum.Font.SourceSansSemibold, Vec2(700, 12)).X + 4,0, 12) 
								end 
							end) 
							Keybind.MouseButton2Down:Connect(function() 
								if not binding then 
									Frame.Visible = not Frame.Visible 
								end 
							end) 
							local Player = game.Players.LocalPlayer 
							local Mouse = Player:GetMouse() 
							local InFrame = false 
							Frame.MouseEnter:Connect(function() 
								InFrame = true 
							end) 
							Frame.MouseLeave:Connect(function() 
								InFrame = false 
							end) 
							local InFrame2 = false 
							Keybind.MouseEnter:Connect(function() 
								InFrame2 = true 
							end) 
							Keybind.MouseLeave:Connect(function() 
								InFrame2 = false 
							end) 
							game:GetService("UserInputService").InputBegan:Connect(function(input) 
								if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 and not binding then 
									if Frame.Visible == true and not InFrame and not InFrame2 then 
										Frame.Visible = false 
									end 
								end 
								if binding then 
									binding = false 
									Keybind.Text = input.KeyCode.Name ~= "Unknown" and input.KeyCode.Name:upper() or input.UserInputType.Name:upper() 
									Keybind.Size = UDIM2(0,txt:GetTextSize(Keybind.Text, 14, Enum.Font.SourceSansSemibold, Vec2(700, 12)).X + 5,0, 12) 
									Element.value.Key = input.KeyCode.Name ~= "Unknown" and input.KeyCode.Name or input.UserInputType.Name 
									if input.KeyCode.Name == "Backspace" then 
										Keybind.Text = "NONE" 
										Keybind.Size = UDIM2(0,txt:GetTextSize(Keybind.Text, 14, Enum.Font.SourceSansSemibold, Vec2(700, 12)).X + 4,0, 12) 
										Element.value.Key = nil 
									end 
								else 
									if Element.value.Key ~= nil then 
										if FIND(Element.value.Key, "Mouse") then 
											if input.UserInputType == Enum.UserInputType[Element.value.Key] then 
												if Element.value.Type == "Hold" then 
													Element.value.Active = true 
													if Element.value.Active and Element.value.Toggle then 
														keybindadd(text) 
													else 
														keybindremove(text) 
													end 
												elseif Element.value.Type == "Toggle" then 
													Element.value.Active = not Element.value.Active 
													if Element.value.Active and Element.value.Toggle then 
														keybindadd(text) 
													else 
														keybindremove(text) 
													end 
												end 
											end 
										else 
											if input.KeyCode == Enum.KeyCode[Element.value.Key] then 
												if Element.value.Type == "Hold" then 
													Element.value.Active = true 
													if Element.value.Active and Element.value.Toggle then 
														keybindadd(text) 
													else 
														keybindremove(text) 
													end 
												elseif Element.value.Type == "Toggle" then 
													Element.value.Active = not Element.value.Active 
													if Element.value.Active and Element.value.Toggle then 
														keybindadd(text) 
													else 
														keybindremove(text) 
													end 
												end 
											end 
										end 
									else 
										Element.value.Active = true 
									end 
								end 
								values[tabname][sectorname][tabtext][text] = Element.value 
								callback(Element.value) 
							end) 
							game:GetService("UserInputService").InputEnded:Connect(function(input) 
								if Element.value.Key ~= nil then 
									if FIND(Element.value.Key, "Mouse") then 
										if input.UserInputType == Enum.UserInputType[Element.value.Key] then 
											if Element.value.Type == "Hold" then 
												Element.value.Active = false 
												if Element.value.Active and Element.value.Toggle then 
													keybindadd(text) 
												else 
													keybindremove(text) 
												end 
											end 
										end 
									else 
										if input.KeyCode == Enum.KeyCode[Element.value.Key] then 
											if Element.value.Type == "Hold" then 
												Element.value.Active = false 
												if Element.value.Active and Element.value.Toggle then 
													keybindadd(text) 
												else 
													keybindremove(text) 
												end 
											end 
										end 
									end 
								end 
								values[tabname][sectorname][tabtext][text] = Element.value 
								callback(Element.value) 
							end) 
						end 
						function Element:SetValue(value) 
							Element.value = value 
							update() 
						end 
					elseif type == "Toggle" then 
						tabsize = tabsize + UDIM2(0,0,0,16) 
						Element.value = {Toggle = data.default and data.default.Toggle or false} 

						local Toggle = INST("Frame") 
						local Button = INST("TextButton") 
						local Color = INST("Frame") 
						local TextLabel = INST("TextLabel") 

						Toggle.Name = "Toggle" 
						Toggle.Parent = tab1 
						Toggle.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Toggle.BackgroundTransparency = 1.000 
						Toggle.Size = UDIM2(1, 0, 0, 15) 

						Button.Name = "Button" 
						Button.Parent = Toggle 
						Button.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Button.BackgroundTransparency = 1.000 
						Button.Size = UDIM2(1, 0, 1, 0) 
						Button.Font = Enum.Font.SourceSans 
						Button.Text = "" 
						Button.TextColor3 = COL3RGB(0, 0, 0) 
						Button.TextSize = 14.000 

						Color.Name = "Color" 
						Color.Parent = Button 
						Color.BackgroundColor3 = COL3RGB(1, 1, 1) 
						Color.BorderColor3 = COL3RGB(30, 30, 30) 
						Color.Position = UDIM2(0, 15, 0.5, -5) 
						Color.Size = UDIM2(0, 8, 0, 8) 

						TextLabel.Parent = Button 
						TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
						TextLabel.BackgroundTransparency = 1.000 
						TextLabel.Position = UDIM2(0, 32, 0, -1) 
						TextLabel.Size = UDIM2(0.111913361, 208, 1, 0) 
						TextLabel.Font = Enum.Font.SourceSansSemibold 
						TextLabel.Text = text 
						TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
						TextLabel.TextSize = 14.000 
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left 

						local function update() 
							if Element.value.Toggle then 
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(30, 115, 255)}) 
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(255, 255, 255)}) 
							else 
								keybindremove(text) 
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(1, 1, 1)}) 
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)}) 
							end 
							values[tabname][sectorname][tabtext][text] = Element.value 
						end 

						Button.MouseButton1Down:Connect(function() 
							Element.value.Toggle = not Element.value.Toggle 
							update() 
							values[tabname][sectorname][tabtext][text] = Element.value 
							callback(Element.value) 
						end) 
						if data.default then 
							update() 
						end 
						values[tabname][sectorname][tabtext][text] = Element.value 
						function Element:SetValue(value) 
							Element.value = value 
							values[tabname][sectorname][tabtext][text] = Element.value 
							update() 
							callback(Element.value) 
						end 
					elseif type == "ToggleColor" then 
						tabsize = tabsize + UDIM2(0,0,0,16) 
						Element.value = {Toggle = data.default and data.default.Toggle or false, Color = data.default and data.default.Color or COL3RGB(255,255,255)} 

						local Toggle = INST("Frame") 
						local Button = INST("TextButton") 
						local Color = INST("Frame") 
						local TextLabel = INST("TextLabel") 

						Toggle.Name = "Toggle" 
						Toggle.Parent = tab1 
						Toggle.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Toggle.BackgroundTransparency = 1.000 
						Toggle.Size = UDIM2(1, 0, 0, 15) 

						Button.Name = "Button" 
						Button.Parent = Toggle 
						Button.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Button.BackgroundTransparency = 1.000 
						Button.Size = UDIM2(1, 0, 1, 0) 
						Button.Font = Enum.Font.SourceSans 
						Button.Text = "" 
						Button.TextColor3 = COL3RGB(0, 0, 0) 
						Button.TextSize = 14.000 

						Color.Name = "Color" 
						Color.Parent = Button 
						Color.BackgroundColor3 = COL3RGB(1, 1, 1) 
						Color.BorderColor3 = COL3RGB(30, 30, 30) 
						Color.Position = UDIM2(0, 15, 0.5, -5) 
						Color.Size = UDIM2(0, 8, 0, 8) 

						TextLabel.Parent = Button 
						TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
						TextLabel.BackgroundTransparency = 1.000 
						TextLabel.Position = UDIM2(0, 32, 0, -1) 
						TextLabel.Size = UDIM2(0.111913361, 208, 1, 0) 
						TextLabel.Font = Enum.Font.SourceSansSemibold 
						TextLabel.Text = text 
						TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
						TextLabel.TextSize = 14.000 
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left 

						local function update() 
							if Element.value.Toggle then 
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(30, 115, 255)}) 
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)}) 
							else 
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(1, 1, 1)}) 
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)}) 
							end 
							values[tabname][sectorname][tabtext][text] = Element.value 
							callback(Element.value) 
						end 

						local ColorH,ColorS,ColorV 

						local ColorP = INST("TextButton") 
						local Frame = INST("Frame") 
						local Colorpick = INST("ImageButton") 
						local ColorDrag = INST("Frame") 
						local Huepick = INST("ImageButton") 
						local Huedrag = INST("Frame") 

						ColorP.Name = "ColorP" 
						ColorP.Parent = Button 
						ColorP.AnchorPoint = Vec2(1, 0) 
						ColorP.BackgroundColor3 = COL3RGB(255, 0, 0) 
						ColorP.BorderColor3 = COL3RGB(30, 30, 30) 
						ColorP.Position = UDIM2(0, 270, 0.5, -4) 
						ColorP.Size = UDIM2(0, 18, 0, 8) 
						ColorP.AutoButtonColor = false 
						ColorP.Font = Enum.Font.SourceSansSemibold 
						ColorP.Text = "" 
						ColorP.TextColor3 = COL3RGB(200, 200, 200) 
						ColorP.TextSize = 14.000 

						Frame.Parent = ColorP 
						Frame.BackgroundColor3 = COL3RGB(1, 1, 1) 
						Frame.BorderColor3 = COL3RGB(30, 30, 30) 
						Frame.Position = UDIM2(-0.666666687, -170, 1.375, 0) 
						Frame.Size = UDIM2(0, 200, 0, 170) 
						Frame.Visible = false 
						Frame.ZIndex = 3 

						Colorpick.Name = "Colorpick" 
						Colorpick.Parent = Frame 
						Colorpick.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Colorpick.BorderColor3 = COL3RGB(30, 30, 30) 
						Colorpick.ClipsDescendants = false 
						Colorpick.Position = UDIM2(0, 40, 0, 10) 
						Colorpick.Size = UDIM2(0, 150, 0, 150) 
						Colorpick.AutoButtonColor = false 
						Colorpick.Image = "rbxassetid://4155801252" 
						Colorpick.ImageColor3 = COL3RGB(255, 0, 0) 
						Colorpick.ZIndex = 3 

						ColorDrag.Name = "ColorDrag" 
						ColorDrag.Parent = Colorpick 
						ColorDrag.AnchorPoint = Vec2(0.5, 0.5) 
						ColorDrag.BackgroundColor3 = COL3RGB(255, 255, 255) 
						ColorDrag.BorderColor3 = COL3RGB(30, 30, 30) 
						ColorDrag.Size = UDIM2(0, 4, 0, 4) 
						ColorDrag.ZIndex = 3 

						Huepick.Name = "Huepick" 
						Huepick.Parent = Frame 
						Huepick.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Huepick.BorderColor3 = COL3RGB(30, 30, 30) 
						Huepick.ClipsDescendants = false 
						Huepick.Position = UDIM2(0, 10, 0, 10) 
						Huepick.Size = UDIM2(0, 20, 0, 150) 
						Huepick.AutoButtonColor = false 
						Huepick.Image = "rbxassetid://3641079629" 
						Huepick.ImageColor3 = COL3RGB(255, 0, 0) 
						Huepick.ImageTransparency = 1 
						Huepick.BackgroundTransparency = 0 
						Huepick.ZIndex = 3 

						local HueFrameGradient = INST("UIGradient") 
						HueFrameGradient.Rotation = 90 
						HueFrameGradient.Name = "HueFrameGradient" 
						HueFrameGradient.Parent = Huepick 
						HueFrameGradient.Color = ColorSequence.new { 
							ColorSequenceKeypoint.new(0.00, COL3RGB(255, 0, 0)), 
							ColorSequenceKeypoint.new(0.17, COL3RGB(255, 0, 255)), 
							ColorSequenceKeypoint.new(0.33, COL3RGB(0, 0, 255)), 
							ColorSequenceKeypoint.new(0.50, COL3RGB(0, 255, 255)), 
							ColorSequenceKeypoint.new(0.67, COL3RGB(0, 255, 0)), 
							ColorSequenceKeypoint.new(0.83, COL3RGB(255, 255, 0)), 
							ColorSequenceKeypoint.new(1.00, COL3RGB(255, 0, 0)) 
						}	 

						Huedrag.Name = "Huedrag" 
						Huedrag.Parent = Huepick 
						Huedrag.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Huedrag.BorderColor3 = COL3RGB(30, 30, 30) 
						Huedrag.Size = UDIM2(1, 0, 0, 2) 
						Huedrag.ZIndex = 3 

						ColorP.MouseButton1Down:Connect(function() 
							Frame.Visible = not Frame.Visible 
						end) 
						local abc = false 
						local inCP = false 
						ColorP.MouseEnter:Connect(function() 
							abc = true 
						end) 
						ColorP.MouseLeave:Connect(function() 
							abc = false 
						end) 
						Frame.MouseEnter:Connect(function() 
							inCP = true 
						end) 
						Frame.MouseLeave:Connect(function() 
							inCP = false 
						end) 

						ColorH = (CLAMP(Huedrag.AbsolutePosition.Y-Huepick.AbsolutePosition.Y, 0, Huepick.AbsoluteSize.Y)/Huepick.AbsoluteSize.Y) 
						ColorS = 1-(CLAMP(ColorDrag.AbsolutePosition.X-Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X) 
						ColorV = 1-(CLAMP(ColorDrag.AbsolutePosition.Y-Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y) 

						if data.default.Color ~= nil then 
							ColorH, ColorS, ColorV = data.default.Color:ToHSV() 

							ColorH = CLAMP(ColorH,0,1) 
							ColorS = CLAMP(ColorS,0,1) 
							ColorV = CLAMP(ColorV,0,1) 
							ColorDrag.Position = UDIM2(1-ColorS,0,1-ColorV,0) 
							Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1) 

							ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV) 
							Huedrag.Position = UDIM2(0, 0, 1-ColorH, -1) 
						end 

						local mouse = LocalPlayer:GetMouse() 
						game:GetService("UserInputService").InputBegan:Connect(function(input) 
							if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then 
								if not dragging and not abc and not inCP then 
									Frame.Visible = false 
								end 
							end 
						end) 

						local function updateColor() 
							local ColorX = (CLAMP(mouse.X - Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X) 
							local ColorY = (CLAMP(mouse.Y - Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y) 
							ColorDrag.Position = UDIM2(ColorX, 0, ColorY, 0) 
							ColorS = 1-ColorX 
							ColorV = 1-ColorY 
							Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1) 
							ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV) 
							values[tabname][sectorname][tabtext][text] = Element.value 
							Element.value.Color = COL3HSV(ColorH, ColorS, ColorV) 
							callback(Element.value) 
						end 
						local function updateHue() 
							local y = CLAMP(mouse.Y - Huepick.AbsolutePosition.Y, 0, 148) 
							Huedrag.Position = UDIM2(0, 0, 0, y) 
							hue = y/148 
							ColorH = 1-hue 
							Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1) 
							ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV) 
							values[tabname][sectorname][tabtext][text] = Element.value 
							Element.value.Color = COL3HSV(ColorH, ColorS, ColorV) 
							callback(Element.value) 
						end 
						Colorpick.MouseButton1Down:Connect(function() 
							updateColor() 
							moveconnection = mouse.Move:Connect(function() 
								updateColor() 
							end) 
							releaseconnection = game:GetService("UserInputService").InputEnded:Connect(function(Mouse) 
								if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then 
									updateColor() 
									moveconnection:Disconnect() 
									releaseconnection:Disconnect() 
								end 
							end) 
						end) 
						Huepick.MouseButton1Down:Connect(function() 
							updateHue() 
							moveconnection = mouse.Move:Connect(function() 
								updateHue() 
							end) 
							releaseconnection = game:GetService("UserInputService").InputEnded:Connect(function(Mouse) 
								if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then 
									updateHue() 
									moveconnection:Disconnect() 
									releaseconnection:Disconnect() 
								end 
							end) 
						end) 

						Button.MouseButton1Down:Connect(function() 
							Element.value.Toggle = not Element.value.Toggle 
							update() 
							values[tabname][sectorname][tabtext][text] = Element.value 
							callback(Element.value) 
						end) 
						if data.default then 
							update() 
						end 
						values[tabname][sectorname][tabtext][text] = Element.value 
						function Element:SetValue(value) 
							Element.value = value 
							local duplicate = COL3(value.Color.R, value.Color.G, value.Color.B) 
							ColorH, ColorS, ColorV = duplicate:ToHSV() 
							ColorH = CLAMP(ColorH,0,1) 
							ColorS = CLAMP(ColorS,0,1) 
							ColorV = CLAMP(ColorV,0,1) 

							ColorDrag.Position = UDIM2(1-ColorS,0,1-ColorV,0) 
							Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1) 
							ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV) 
							update() 
							Huedrag.Position = UDIM2(0, 0, 1-ColorH, -1) 
						end 
					elseif type == "ToggleTrans" then 
						tabsize = tabsize + UDIM2(0,0,0,16) 
						Element.value = {Toggle = data.default and data.default.Toggle or false, Color = data.default and data.default.Color or COL3RGB(255,255,255), Transparency = data.default and data.default.Transparency or 0} 

						local Toggle = INST("Frame") 
						local Button = INST("TextButton") 
						local Color = INST("Frame") 
						local TextLabel = INST("TextLabel") 

						Toggle.Name = "Toggle" 
						Toggle.Parent = tab1 
						Toggle.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Toggle.BackgroundTransparency = 1.000 
						Toggle.Size = UDIM2(1, 0, 0, 15) 

						Button.Name = "Button" 
						Button.Parent = Toggle 
						Button.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Button.BackgroundTransparency = 1.000 
						Button.Size = UDIM2(1, 0, 1, 0) 
						Button.Font = Enum.Font.SourceSans 
						Button.Text = "" 
						Button.TextColor3 = COL3RGB(0, 0, 0) 
						Button.TextSize = 14.000 

						Color.Name = "Color" 
						Color.Parent = Button 
						Color.BackgroundColor3 = COL3RGB(1, 1, 1) 
						Color.BorderColor3 = COL3RGB(30, 30, 30) 
						Color.Position = UDIM2(0, 15, 0.5, -5) 
						Color.Size = UDIM2(0, 8, 0, 8) 

						TextLabel.Parent = Button 
						TextLabel.BackgroundColor3 = COL3RGB(30, 115, 255) 
						TextLabel.BackgroundTransparency = 1.000 
						TextLabel.Position = UDIM2(0, 32, 0, -1) 
						TextLabel.Size = UDIM2(0.111913361, 208, 1, 0) 
						TextLabel.Font = Enum.Font.SourceSansSemibold 
						TextLabel.Text = text 
						TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
						TextLabel.TextSize = 14.000 
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left 

						local function update() 
							if Element.value.Toggle then 
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(30, 115, 255)}) 
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)}) 
							else 
								tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(1, 1, 1)}) 
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)}) 
							end 
							values[tabname][sectorname][tabtext][text] = Element.value 
							callback(Element.value) 
						end 

						local ColorH,ColorS,ColorV 

						local ColorP = INST("TextButton") 
						local Frame = INST("Frame") 
						local Colorpick = INST("ImageButton") 
						local ColorDrag = INST("Frame") 
						local Huepick = INST("ImageButton") 
						local Huedrag = INST("Frame") 

						ColorP.Name = "ColorP" 
						ColorP.Parent = Button 
						ColorP.AnchorPoint = Vec2(1, 0) 
						ColorP.BackgroundColor3 = COL3RGB(255, 0, 0) 
						ColorP.BorderColor3 = COL3RGB(30, 30, 30) 
						ColorP.Position = UDIM2(0, 270, 0.5, -4) 
						ColorP.Size = UDIM2(0, 18, 0, 8) 
						ColorP.AutoButtonColor = false 
						ColorP.Font = Enum.Font.SourceSansSemibold 
						ColorP.Text = "" 
						ColorP.TextColor3 = COL3RGB(200, 200, 200) 
						ColorP.TextSize = 14.000 

						Frame.Parent = ColorP 
						Frame.BackgroundColor3 = COL3RGB(1, 1, 1) 
						Frame.BorderColor3 = COL3RGB(30, 30, 30) 
						Frame.Position = UDIM2(-0.666666687, -170, 1.375, 0) 
						Frame.Size = UDIM2(0, 200, 0, 190) 
						Frame.Visible = false 
						Frame.ZIndex = 3 

						Colorpick.Name = "Colorpick" 
						Colorpick.Parent = Frame 
						Colorpick.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Colorpick.BorderColor3 = COL3RGB(30, 30, 30) 
						Colorpick.ClipsDescendants = false 
						Colorpick.Position = UDIM2(0, 40, 0, 10) 
						Colorpick.Size = UDIM2(0, 150, 0, 150) 
						Colorpick.AutoButtonColor = false 
						Colorpick.Image = "rbxassetid://4155801252" 
						Colorpick.ImageColor3 = COL3RGB(255, 0, 0) 
						Colorpick.ZIndex = 3 

						ColorDrag.Name = "ColorDrag" 
						ColorDrag.Parent = Colorpick 
						ColorDrag.AnchorPoint = Vec2(0.5, 0.5) 
						ColorDrag.BackgroundColor3 = COL3RGB(255, 255, 255) 
						ColorDrag.BorderColor3 = COL3RGB(25, 25, 25) 
						ColorDrag.Size = UDIM2(0, 4, 0, 4) 
						ColorDrag.ZIndex = 3 

						Huepick.Name = "Huepick" 
						Huepick.Parent = Frame 
						Huepick.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Huepick.BorderColor3 = COL3RGB(30, 30, 30) 
						Huepick.ClipsDescendants = true 
						Huepick.Position = UDIM2(0, 10, 0, 10) 
						Huepick.Size = UDIM2(0, 20, 0, 150) 
						Huepick.AutoButtonColor = false 
						Huepick.Image = "rbxassetid://3641079629" 
						Huepick.ImageColor3 = COL3RGB(255, 0, 0) 
						Huepick.ImageTransparency = 1 
						Huepick.BackgroundTransparency = 0 
						Huepick.ZIndex = 3 

						local HueFrameGradient = INST("UIGradient") 
						HueFrameGradient.Rotation = 90 
						HueFrameGradient.Name = "HueFrameGradient" 
						HueFrameGradient.Parent = Huepick 
						HueFrameGradient.Color = ColorSequence.new { 
							ColorSequenceKeypoint.new(0.00, COL3RGB(255, 0, 0)), 
							ColorSequenceKeypoint.new(0.17, COL3RGB(255, 0, 255)), 
							ColorSequenceKeypoint.new(0.33, COL3RGB(0, 0, 255)), 
							ColorSequenceKeypoint.new(0.50, COL3RGB(0, 255, 255)), 
							ColorSequenceKeypoint.new(0.67, COL3RGB(0, 255, 0)), 
							ColorSequenceKeypoint.new(0.83, COL3RGB(255, 255, 0)), 
							ColorSequenceKeypoint.new(1.00, COL3RGB(255, 0, 0)) 
						}	 

						Huedrag.Name = "Huedrag" 
						Huedrag.Parent = Huepick 
						Huedrag.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Huedrag.BorderColor3 = COL3RGB(30, 30, 30) 
						Huedrag.Size = UDIM2(1, 0, 0, 2) 
						Huedrag.ZIndex = 3 

						local Transpick = INST("ImageButton") 
						local Transcolor = INST("ImageLabel") 
						local Transdrag = INST("Frame") 

						Transpick.Name = "Transpick" 
						Transpick.Parent = Frame 
						Transpick.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Transpick.BorderColor3 = COL3RGB(30, 30, 30) 
						Transpick.Position = UDIM2(0, 10, 0, 167) 
						Transpick.Size = UDIM2(0, 180, 0, 15) 
						Transpick.AutoButtonColor = false 
						Transpick.Image = "rbxassetid://3887014957" 
						Transpick.ScaleType = Enum.ScaleType.Tile 
						Transpick.TileSize = UDIM2(0, 10, 0, 10) 
						Transpick.ZIndex = 3 

						Transcolor.Name = "Transcolor" 
						Transcolor.Parent = Transpick 
						Transcolor.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Transcolor.BackgroundTransparency = 1.000 
						Transcolor.Size = UDIM2(1, 0, 1, 0) 
						Transcolor.Image = "rbxassetid://3887017050" 
						Transcolor.ImageColor3 = COL3RGB(255, 0, 4) 
						Transcolor.ZIndex = 3 

						Transdrag.Name = "Transdrag" 
						Transdrag.Parent = Transcolor 
						Transdrag.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Transdrag.BorderColor3 = COL3RGB(30, 30, 30) 
						Transdrag.Position = UDIM2(0, -1, 0, 0) 
						Transdrag.Size = UDIM2(0, 2, 1, 0) 
						Transdrag.ZIndex = 3 

						ColorP.MouseButton1Down:Connect(function() 
							Frame.Visible = not Frame.Visible 
						end) 
						local abc = false 
						local inCP = false 
						ColorP.MouseEnter:Connect(function() 
							abc = true 
						end) 
						ColorP.MouseLeave:Connect(function() 
							abc = false 
						end) 
						Frame.MouseEnter:Connect(function() 
							inCP = true 
						end) 
						Frame.MouseLeave:Connect(function() 
							inCP = false 
						end) 

						ColorH = (CLAMP(Huedrag.AbsolutePosition.Y-Huepick.AbsolutePosition.Y, 0, Huepick.AbsoluteSize.Y)/Huepick.AbsoluteSize.Y) 
						ColorS = 1-(CLAMP(ColorDrag.AbsolutePosition.X-Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X) 
						ColorV = 1-(CLAMP(ColorDrag.AbsolutePosition.Y-Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y) 

						if data.default.Color ~= nil then 
							ColorH, ColorS, ColorV = data.default.Color:ToHSV() 

							ColorH = CLAMP(ColorH,0,1) 
							ColorS = CLAMP(ColorS,0,1) 
							ColorV = CLAMP(ColorV,0,1) 
							ColorDrag.Position = UDIM2(1-ColorS,0,1-ColorV,0) 
							Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1) 

							Transcolor.ImageColor3 = COL3HSV(ColorH, 1, 1) 

							ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV) 
							Huedrag.Position = UDIM2(0, 0, 1-ColorH, -1) 
						end 
						if data.default.Transparency ~= nil then 
							Transdrag.Position = UDIM2(data.default.Transparency, -1, 0, 0) 
						end 
						local mouse = LocalPlayer:GetMouse() 
						game:GetService("UserInputService").InputBegan:Connect(function(input) 
							if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then 
								if not dragging and not abc and not inCP then 
									Frame.Visible = false 
								end 
							end 
						end) 

						local function updateColor() 
							local ColorX = (CLAMP(mouse.X - Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X) 
							local ColorY = (CLAMP(mouse.Y - Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y) 
							ColorDrag.Position = UDIM2(ColorX, 0, ColorY, 0) 
							ColorS = 1-ColorX 
							ColorV = 1-ColorY 
							Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1) 
							ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV) 
							Transcolor.ImageColor3 = COL3HSV(ColorH, 1, 1) 
							values[tabname][sectorname][tabtext][text] = Element.value 
							Element.value.Color = COL3HSV(ColorH, ColorS, ColorV) 
							callback(Element.value) 
						end 
						local function updateHue() 
							local y = CLAMP(mouse.Y - Huepick.AbsolutePosition.Y, 0, 148) 
							Huedrag.Position = UDIM2(0, 0, 0, y) 
							hue = y/148 
							ColorH = 1-hue 
							Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1) 
							Transcolor.ImageColor3 = COL3HSV(ColorH, 1, 1) 
							ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV) 
							values[tabname][sectorname][tabtext][text] = Element.value 
							Element.value.Color = COL3HSV(ColorH, ColorS, ColorV) 
							callback(Element.value) 
						end 
						local function updateTrans() 
							local x = CLAMP(mouse.X - Transpick.AbsolutePosition.X, 0, 178) 
							Transdrag.Position = UDIM2(0, x, 0, 0) 
							Element.value.Transparency = (x/178) 
							values[tabname][sectorname][tabtext][text] = Element.value 
							callback(Element.value) 
						end 
						Transpick.MouseButton1Down:Connect(function() 
							updateTrans() 
							moveconnection = mouse.Move:Connect(function() 
								updateTrans() 
							end) 
							releaseconnection = game:GetService("UserInputService").InputEnded:Connect(function(Mouse) 
								if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then 
									updateTrans() 
									moveconnection:Disconnect() 
									releaseconnection:Disconnect() 
								end 
							end) 
						end) 
						Colorpick.MouseButton1Down:Connect(function() 
							updateColor() 
							moveconnection = mouse.Move:Connect(function() 
								updateColor() 
							end) 
							releaseconnection = game:GetService("UserInputService").InputEnded:Connect(function(Mouse) 
								if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then 
									updateColor() 
									moveconnection:Disconnect() 
									releaseconnection:Disconnect() 
								end 
							end) 
						end) 
						Huepick.MouseButton1Down:Connect(function() 
							updateHue() 
							moveconnection = mouse.Move:Connect(function() 
								updateHue() 
							end) 
							releaseconnection = game:GetService("UserInputService").InputEnded:Connect(function(Mouse) 
								if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then 
									updateHue() 
									moveconnection:Disconnect() 
									releaseconnection:Disconnect() 
								end 
							end) 
						end) 

						Button.MouseButton1Down:Connect(function() 
							Element.value.Toggle = not Element.value.Toggle 
							update() 
							values[tabname][sectorname][tabtext][text] = Element.value 
							callback(Element.value) 
						end) 
						if data.default then 
							update() 
						end 
						values[tabname][sectorname][tabtext][text] = Element.value 
						function Element:SetValue(value) 
							Element.value = value 
							local duplicate = COL3(value.Color.R, value.Color.G, value.Color.B) 
							ColorH, ColorS, ColorV = duplicate:ToHSV() 
							ColorH = CLAMP(ColorH,0,1) 
							ColorS = CLAMP(ColorS,0,1) 
							ColorV = CLAMP(ColorV,0,1) 

							ColorDrag.Position = UDIM2(1-ColorS,0,1-ColorV,0) 
							Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1) 
							ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV) 
							update() 
							Huedrag.Position = UDIM2(0, 0, 1-ColorH, -1) 
						end 
					elseif type == "Dropdown" then 
						tabsize = tabsize + UDIM2(0,0,0,39) 
						Element.value = {Dropdown = data.options[1]} 

						local Dropdown = INST("Frame") 
						local Button = INST("TextButton") 
						local TextLabel = INST("TextLabel") 
						local Drop = INST("ScrollingFrame") 
						local Button_2 = INST("TextButton") 
						local TextLabel_2 = INST("TextLabel") 
						local UIListLayout = INST("UIListLayout") 
						local ImageLabel = INST("ImageLabel") 
						local TextLabel_3 = INST("TextLabel") 

						Dropdown.Name = "Dropdown" 
						Dropdown.Parent = tab1 
						Dropdown.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Dropdown.BackgroundTransparency = 1.000 
						Dropdown.Position = UDIM2(0, 0, 0.255102038, 0) 
						Dropdown.Size = UDIM2(1, 0, 0, 39) 

						Button.Name = "Button" 
						Button.Parent = Dropdown 
						Button.BackgroundColor3 = COL3RGB(1, 1, 1) 
						Button.BorderColor3 = COL3RGB(30, 30, 30) 
						Button.Position = UDIM2(0, 30, 0, 16) 
						Button.Size = UDIM2(0, 175, 0, 17) 
						Button.AutoButtonColor = false 
						Button.Font = Enum.Font.SourceSans 
						Button.Text = "" 
						Button.TextColor3 = COL3RGB(0, 0, 0) 
						Button.TextSize = 14.000 

						TextLabel.Parent = Button 
						TextLabel.BackgroundColor3 = COL3RGB(30, 115, 255)
						TextLabel.BackgroundTransparency = 1.000 
						TextLabel.BorderColor3 = COL3RGB(30, 30, 30) 
						TextLabel.Position = UDIM2(0, 5, 0, 0) 
						TextLabel.Size = UDIM2(-0.21714285, 208, 1, 0) 
						TextLabel.Font = Enum.Font.SourceSansSemibold 
						TextLabel.Text = Element.value.Dropdown 
						TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
						TextLabel.TextSize = 14.000 
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left 

						local abcd = TextLabel 

						Drop.Name = "Drop" 
						Drop.Parent = Button 
						Drop.Active = true 
						Drop.BackgroundColor3 = COL3RGB(1, 1, 1) 
						Drop.BorderColor3 = COL3RGB(30, 30, 30) 
						Drop.Position = UDIM2(0, 0, 1, 1) 
						Drop.Size = UDIM2(1, 0, 0, 20) 
						Drop.Visible = false 
						Drop.BottomImage = "http://www.roblox.com/asset/?id=6724808282" 
						Drop.CanvasSize = UDIM2(1, 1, 1, 1) 
						Drop.ScrollBarThickness = 0
						Drop.MidImage = "http://www.roblox.com/asset/?id=6724808282" 
						Drop.TopImage = "http://www.roblox.com/asset/?id=6724808282" 
						Drop.AutomaticCanvasSize = "Y" 
						Drop.ZIndex = 5 
						Drop.ScrollBarImageColor3 = COL3RGB(30, 115, 255)

						UIListLayout.Parent = Drop 
						UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center 
						UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder 

						local num = #data.options 
						if num > 5 then 
							Drop.Size = UDIM2(1, 0, 0, 85) 
						else 
							Drop.Size = UDIM2(1, 0, 0, 17*num) 
						end 
						Drop.CanvasSize = UDIM2(1, 0, 0, 17*num) 
						local first = true 
						for i,v in ipairs(data.options) do 
							do 
								local Button = INST("TextButton") 
								local TextLabel = INST("TextLabel") 

								Button.Name = v 
								Button.Parent = Drop 
								Button.BackgroundColor3 = COL3RGB(0, 0, 0) 
								Button.BorderColor3 = COL3RGB(30, 30, 30) 
								Button.Position = UDIM2(0, 30, 0, 16) 
								Button.Size = UDIM2(0, 175, 0, 17) 
								Button.AutoButtonColor = false 
								Button.Font = Enum.Font.SourceSans 
								Button.Text = "" 
								Button.TextColor3 = COL3RGB(0, 0, 0) 
								Button.TextSize = 14.000 
								Button.BorderSizePixel = 0 
								Button.ZIndex = 6 

								TextLabel.Parent = Button 
								TextLabel.BackgroundColor3 = COL3RGB(30, 115, 255) 
								TextLabel.BackgroundTransparency = 1.000 
								TextLabel.BorderColor3 = COL3RGB(30, 30, 30) 
								TextLabel.Position = UDIM2(0, 5, 0, -1) 
								TextLabel.Size = UDIM2(-0.21714285, 208, 1, 0) 
								TextLabel.Font = Enum.Font.SourceSansSemibold 
								TextLabel.Text = v 
								TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
								TextLabel.TextSize = 14.000 
								TextLabel.TextXAlignment = Enum.TextXAlignment.Left 
								TextLabel.ZIndex = 6 

								Button.MouseButton1Down:Connect(function() 
									Drop.Visible = false 
									Element.value.Dropdown = v 
									abcd.Text = v 
									values[tabname][sectorname][tabtext][text] = Element.value 
									callback(Element.value) 
									Drop.CanvasPosition = Vec2(0,0) 
								end) 
								Button.MouseEnter:Connect(function() 
									library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 =  COL3RGB(30, 115, 255)}) 
								end) 
								Button.MouseLeave:Connect(function() 
									library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 =  COL3RGB(200, 200, 200)}) 
								end) 

								first = false 
							end 
						end 

						function Element:SetValue(val) 
							Element.value = val 
							abcd.Text = val.Dropdown 
							values[tabname][sectorname][tabtext][text] = Element.value 
							callback(val) 
						end 

						ImageLabel.Parent = Button 
						ImageLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
						ImageLabel.BackgroundTransparency = 1.000 
						ImageLabel.Position = UDIM2(0, 165, 0, 6) 
						ImageLabel.Size = UDIM2(0, 6, 0, 4) 
						ImageLabel.Image = "http://www.roblox.com/asset/?id=6724771531" 

						TextLabel_3.Parent = Dropdown 
						TextLabel_3.BackgroundColor3 = COL3RGB(255, 255, 255) 
						TextLabel_3.BackgroundTransparency = 1.000 
						TextLabel_3.Position = UDIM2(0, 32, 0, -1) 
						TextLabel_3.Size = UDIM2(0.111913361, 208, 0.382215232, 0) 
						TextLabel_3.Font = Enum.Font.SourceSansSemibold 
						TextLabel_3.Text = text 
						TextLabel_3.TextColor3 = COL3RGB(200, 200, 200) 
						TextLabel_3.TextSize = 14.000 
						TextLabel_3.TextXAlignment = Enum.TextXAlignment.Left 

						Button.MouseButton1Down:Connect(function() 
							Drop.Visible = not Drop.Visible 
							if not Drop.Visible then 
								Drop.CanvasPosition = Vec2(0,0) 
							end 
						end) 
						local indrop = false 
						local ind = false 
						Drop.MouseEnter:Connect(function() 
							indrop = true 
						end) 
						Drop.MouseLeave:Connect(function() 
							indrop = false 
						end) 
						Button.MouseEnter:Connect(function() 
							ind = true 
						end) 
						Button.MouseLeave:Connect(function() 
							ind = false 
						end) 
						game:GetService("UserInputService").InputBegan:Connect(function(input) 
							if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then 
								if Drop.Visible == true and not indrop and not ind then 
									Drop.Visible = false 
									Drop.CanvasPosition = Vec2(0,0) 
								end 
							end 
						end) 
						values[tabname][sectorname][tabtext][text] = Element.value 
					elseif type == "Slider" then 

						tabsize = tabsize + UDIM2(0,0,0,25) 

						local Slider = INST("Frame") 
						local TextLabel = INST("TextLabel") 
						local Button = INST("TextButton") 
						local Frame = INST("Frame") 
						local UIGradient = INST("UIGradient") 
						local Value = INST("TextLabel") 

						Slider.Name = "Slider" 
						Slider.Parent = tab1 
						Slider.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Slider.BackgroundTransparency = 1.000 
						Slider.Position = UDIM2(0, 0, 0.653061211, 0) 
						Slider.Size = UDIM2(1, 0, 0, 25) 

						TextLabel.Parent = Slider 
						TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
						TextLabel.BackgroundTransparency = 1.000 
						TextLabel.Position = UDIM2(0, 32, 0, -2) 
						TextLabel.Size = UDIM2(0, 100, 0, 15) 
						TextLabel.Font = Enum.Font.SourceSansSemibold 
						TextLabel.Text = text 
						TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
						TextLabel.TextSize = 14.000 
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left 

						Button.Name = "Button" 
						Button.Parent = Slider 
						Button.BackgroundColor3 = COL3RGB(1, 1, 1) 
						Button.BorderColor3 = COL3RGB(30, 30, 30) 
						Button.Position = UDIM2(0, 30, 0, 15) 
						Button.Size = UDIM2(0, 175, 0, 5) 
						Button.AutoButtonColor = false 
						Button.Font = Enum.Font.SourceSans 
						Button.Text = "" 
						Button.TextColor3 = COL3RGB(0, 0, 0) 
						Button.TextSize = 14.000 

						Frame.Parent = Button 
						Frame.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Frame.BorderSizePixel = 0 
						Frame.Size = UDIM2(0.5, 0, 1, 0) 

						UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, COL3RGB(30, 115, 255)), ColorSequenceKeypoint.new(1, COL3RGB(30, 115, 255))} 
						UIGradient.Rotation = 90 
						UIGradient.Parent = Frame 

						Value.Name = "Value" 
						Value.Parent = Slider 
						Value.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Value.BackgroundTransparency = 1.000 
						Value.Position = UDIM2(0, 150, 0, -1) 
						Value.Size = UDIM2(0, 55, 0, 15) 
						Value.Font = Enum.Font.SourceSansSemibold 
						Value.Text = "50" 
						Value.TextColor3 = COL3RGB(200, 200, 200) 
						Value.TextSize = 14.000 
						Value.TextXAlignment = Enum.TextXAlignment.Right 
						local min, max, default = data.min or 0, data.max or 100, data.default or 0 
						Element.value = {Slider = default} 

						function Element:SetValue(value) 
							Element.value = value 
							local a 
							if min > 0 then 
								a = ((Element.value.Slider - min)) / (max-min) 
							else 
								a = (Element.value.Slider-min)/(max-min) 
							end 
							Value.Text = Element.value.Slider 
							Frame.Size = UDIM2(a,0,1,0) 
							values[tabname][sectorname][tabtext][text] = Element.value 
							callback(value) 
						end 
						local a 
						if min > 0 then 
							a = ((Element.value.Slider - min)) / (max-min) 
						else 
							a = (Element.value.Slider-min)/(max-min) 
						end 
						Value.Text = Element.value.Slider 
						Frame.Size = UDIM2(a,0,1,0) 
						values[tabname][sectorname][tabtext][text] = Element.value 
						local uis = game:GetService("UserInputService") 
						local mouse = game.Players.LocalPlayer:GetMouse() 
						local val 
						Button.MouseButton1Down:Connect(function() 
							Frame.Size = UDIM2(0, CLAMP(mouse.X - Frame.AbsolutePosition.X, 0, 175), 0, 5) 
							val = FLOOR((((tonumber(max) - tonumber(min)) / 175) * Frame.AbsoluteSize.X) + tonumber(min)) or 0 
							Value.Text = val 
							Element.value.Slider = val 
							values[tabname][sectorname][tabtext][text] = Element.value 
							callback(Element.value) 
							moveconnection = mouse.Move:Connect(function() 
								Frame.Size = UDIM2(0, CLAMP(mouse.X - Frame.AbsolutePosition.X, 0, 175), 0, 5) 
								val = FLOOR((((tonumber(max) - tonumber(min)) / 175) * Frame.AbsoluteSize.X) + tonumber(min)) 
								Value.Text = val 
								Element.value.Slider = val 
								values[tabname][sectorname][tabtext][text] = Element.value 
								callback(Element.value) 
							end) 
							releaseconnection = uis.InputEnded:Connect(function(Mouse) 
								if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then 
									Frame.Size = UDIM2(0, CLAMP(mouse.X - Frame.AbsolutePosition.X, 0, 175), 0, 5) 
									val = FLOOR((((tonumber(max) - tonumber(min)) / 175) * Frame.AbsoluteSize.X) + tonumber(min)) 
									values[tabname][sectorname][tabtext][text] = Element.value 
									callback(Element.value) 
									moveconnection:Disconnect() 
									releaseconnection:Disconnect() 
								end 
							end) 
						end) 
					elseif type == "Button" then 

						tabsize = tabsize + UDIM2(0,0,0,24) 
						local Button = INST("Frame") 
						local Button_2 = INST("TextButton") 
						local TextLabel = INST("TextLabel") 

						Button.Name = "Button" 
						Button.Parent = tab1 
						Button.BackgroundColor3 = COL3RGB(255, 255, 255) 
						Button.BackgroundTransparency = 1.000 
						Button.Position = UDIM2(0, 0, 0.236059487, 0) 
						Button.Size = UDIM2(1, 0, 0, 24) 

						Button_2.Name = "Button" 
						Button_2.Parent = Button 
						Button_2.BackgroundColor3 = COL3RGB(1, 1, 1) 
						Button_2.BorderColor3 = COL3RGB(30, 30, 30) 
						Button_2.Position = UDIM2(0, 30, 0.5, -9) 
						Button_2.Size = UDIM2(0, 175, 0, 18) 
						Button_2.AutoButtonColor = false 
						Button_2.Font = Enum.Font.SourceSans 
						Button_2.Text = "" 
						Button_2.TextColor3 = COL3RGB(0, 0, 0) 
						Button_2.TextSize = 14.000 

						TextLabel.Parent = Button_2 
						TextLabel.BackgroundColor3 = COL3RGB(30, 115, 255)
						TextLabel.BackgroundTransparency = 1.000 
						TextLabel.BorderColor3 = COL3RGB(30, 30, 30) 
						TextLabel.Size = UDIM2(1, 0, 1, 0) 
						TextLabel.Font = Enum.Font.SourceSansSemibold 
						TextLabel.Text = text 
						TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
						TextLabel.TextSize = 14.000 

						function Element:SetValue() 
						end 

						Button_2.MouseButton1Down:Connect(function() 
							TextLabel.TextColor3 = COL3RGB(30, 115, 255)
							library:Tween(TextLabel, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)}) 
							callback() 
						end) 
						Button_2.MouseEnter:Connect(function() 
							library:Tween(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)}) 
						end) 
						Button_2.MouseLeave:Connect(function() 
							library:Tween(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)}) 
						end) 
					end 
					ConfigLoad:Connect(function(cfg) 
						local fix = library:ConfigFix(cfg) 
						if fix[tabname][sectorname][tabtext][text] ~= nil then 
							Element:SetValue(fix[tabname][sectorname][tabtext][text]) 
						end 
					end) 
					
					return Element 
				end 


				if firs then 
					coroutine.wrap(function() 
						game:GetService("RunService").RenderStepped:Wait() 
						Section.Size = tabsize 
					end)() 
					selected = text 
					TextButton.TextColor3 = COL3RGB(255,255,255) 
					tab1.Visible = true 
					firs = false 
				end 

				return tab 
			end 

			return MSector 
		end 
		function Tab:Sector(text, side) 
			local sectorname = text 
			local Sector = {} 
			values[tabname][text] = {} 
			local Section = INST("Frame") 
			local SectionText = INST("TextLabel") 
			local Inner = INST("Frame") 
			local UIListLayout = INST("UIListLayout") 

			Section.Name = "Section" 
			Section.Parent = TabGui[side] 
			Section.BackgroundColor3 = COL3RGB(1, 1, 1) 
			Section.BorderColor3 = COL3RGB(30, 30, 30) 
			Section.BorderSizePixel = 0 
			Section.Position = UDIM2(0.00358422939, 0, 0, 0) 
			Section.Size = UDIM2(1, 0, 0, 22) 

			SectionText.Name = "SectionText" 
			SectionText.Parent = Section 
			SectionText.BackgroundColor3 = COL3RGB(255, 255, 255) 
			SectionText.BackgroundTransparency = 1.000 
			SectionText.Position = UDIM2(0, 7, 0, -12) 
			SectionText.Size = UDIM2(0, 270, 0, 19) 
			SectionText.ZIndex = 2 
			SectionText.Font = Enum.Font.SourceSansSemibold 
			SectionText.Text = text 
			SectionText.TextColor3 = COL3RGB(255, 255, 255) 
			SectionText.TextSize = 15.000 
			SectionText.TextXAlignment = Enum.TextXAlignment.Left 

			Inner.Name = "Inner" 
			Inner.Parent = Section 
			Inner.BackgroundColor3 = COL3RGB(1, 1, 1) 
			Inner.BorderColor3 = COL3RGB(30, 30, 30) 
			Inner.BorderSizePixel = 0 
			Inner.Position = UDIM2(0, 1, 0, 1) 
			Inner.Size = UDIM2(1, -2, 1, -2) 

			local UIPadding = INST("UIPadding") 

			UIPadding.Parent = Inner 
			UIPadding.PaddingTop = UDim.new(0, 10) 

			UIListLayout.Parent = Inner 
			UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center 
			UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder 
			UIListLayout.Padding = UDim.new(0,1) 

			function Sector:Element(type, text, data, callback) 
				waitabit()
				local Element = {} 
				data = data or {} 
				callback = callback or function() end 
				values[tabname][sectorname][text] = {} 
				if type == "ScrollDrop" then 
					Section.Size = Section.Size + UDIM2(0,0,0,39) 
					Element.value = {Scroll = {}, Dropdown = ""} 

					for i,v in pairs(data.options) do 
						Element.value.Scroll[i] = v[1] 
					end 

					local joe = {} 
					if data.alphabet then 
						local copy = {} 
						for i,v in pairs(data.options) do 
							copy[#copy+1] = (i) 
						end 
						TBLSORT(copy, function(a,b) 
							return a < b 
						end) 
						joe = copy 
					else 
						for i,v in pairs(data.options) do 
							joe[#joe+1] = (i) 
						end 
					end 

					local Dropdown = INST("Frame") 
					local Button = INST("TextButton") 
					local TextLabel = INST("TextLabel") 
					local Drop = INST("ScrollingFrame") 
					local Button_2 = INST("TextButton") 
					local TextLabel_2 = INST("TextLabel") 
					local UIListLayout = INST("UIListLayout") 
					local ImageLabel = INST("ImageLabel") 
					local TextLabel_3 = INST("TextLabel") 

					Dropdown.Name = "Dropdown" 
					Dropdown.Parent = Inner 
					Dropdown.BackgroundColor3 = COL3RGB(255, 255, 255) 
					Dropdown.BackgroundTransparency = 1.000 
					Dropdown.Position = UDIM2(0, 0, 0, 0) 
					Dropdown.Size = UDIM2(1, 0, 0, 39) 

					Button.Name = "Button" 
					Button.Parent = Dropdown 
					Button.BackgroundColor3 = COL3RGB(1, 1, 1) 
					Button.BorderColor3 = COL3RGB(30, 30, 30) 
					Button.Position = UDIM2(0, 30, 0, 16) 
					Button.Size = UDIM2(0, 175, 0, 17) 
					Button.AutoButtonColor = false 
					Button.Font = Enum.Font.SourceSans 
					Button.Text = "" 
					Button.TextColor3 = COL3RGB(0, 0, 0) 
					Button.TextSize = 14.000 

					local TextLabel = INST("TextLabel") 

					TextLabel.Parent = Button 
					TextLabel.BackgroundColor3 = COL3RGB(30, 115, 255)
					TextLabel.BackgroundTransparency = 1.000 
					TextLabel.BorderColor3 = COL3RGB(30, 30, 30) 
					TextLabel.Position = UDIM2(0, 5, 0, 0) 
					TextLabel.Size = UDIM2(-0.21714285, 208, 1, 0) 
					TextLabel.Font = Enum.Font.SourceSansSemibold 
					TextLabel.Text = "lol" 
					TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
					TextLabel.TextSize = 14.000 
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left 

					local abcd = TextLabel 

					Drop.Name = "Drop" 
					Drop.Parent = Button 
					Drop.Active = true 
					Drop.BackgroundColor3 = COL3RGB(1, 1, 1) 
					Drop.BorderColor3 = COL3RGB(30, 30, 30) 
					Drop.Position = UDIM2(0, 0, 1, 1) 
					Drop.Size = UDIM2(1, 0, 0, 20) 
					Drop.Visible = false 
					Drop.BottomImage = "http://www.roblox.com/asset/?id=6724808282" 
					Drop.CanvasSize = UDIM2(1, 1, 1, 1) 
					Drop.ScrollBarThickness = 0 
					Drop.TopImage = "http://www.roblox.com/asset/?id=6724808282" 
					Drop.MidImage = "http://www.roblox.com/asset/?id=6724808282" 
					Drop.AutomaticCanvasSize = "Y" 
					Drop.ZIndex = 5 
					Drop.ScrollBarImageColor3 = COL3RGB(30, 115, 255)

					UIListLayout.Parent = Drop 
					UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center 
					UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder 


					local amount = data.Amount or 6 
					Section.Size = Section.Size + UDIM2(0,0,0,amount * 16 + 8) 

					local num = #joe 
					if num > 5 then 
						Drop.Size = UDIM2(1, 0, 0, 85) 
					else 
						Drop.Size = UDIM2(1, 0, 0, 17*num) 
					end 
					local first = true 
					for i,v in ipairs(joe) do 
						do 
							local joell = v 
							local Scroll = INST("Frame") 
							local joe2 = data.options[v] 
							local Button = INST("TextButton") 
							local TextLabel = INST("TextLabel") 

							Button.Name = v 
							Button.Parent = Drop 
							Button.BackgroundColor3 = COL3RGB(1, 1, 1) 
							Button.BorderColor3 = COL3RGB(30, 30, 30) 
							Button.Position = UDIM2(0, 30, 0, 16) 
							Button.Size = UDIM2(0, 175, 0, 17) 
							Button.AutoButtonColor = false 
							Button.Font = Enum.Font.SourceSans 
							Button.Text = "" 
							Button.TextColor3 = COL3RGB(0, 0, 0) 
							Button.TextSize = 14.000 
							Button.BorderSizePixel = 0      
							Button.ZIndex = 6      

							TextLabel.Parent = Button      
							TextLabel.BackgroundColor3 = COL3RGB(30, 115, 255)     
							TextLabel.BackgroundTransparency = 1.000      
							TextLabel.BorderColor3 = COL3RGB(30, 30, 30)      
							TextLabel.Position = UDIM2(0, 5, 0, -1)      
							TextLabel.Size = UDIM2(-0.21714285, 208, 1, 0)      
							TextLabel.Font = Enum.Font.SourceSansSemibold      
							TextLabel.Text = v      
							TextLabel.TextColor3 = COL3RGB(200, 200, 200)      
							TextLabel.TextSize = 14.000      
							TextLabel.TextXAlignment = Enum.TextXAlignment.Left      
							TextLabel.ZIndex = 6      

							Button.MouseButton1Down:Connect(function()      
								Drop.Visible = false      
								Drop.CanvasPosition = Vec2(0,0)      
								abcd.Text = v      
								for i,v in pairs(Scroll.Parent:GetChildren()) do      
									if v:IsA("Frame") then      
										v.Visible = false      
									end      
								end      
								Element.value.Dropdown = v      
								Scroll.Visible = true      
								callback(Element.value)      
							end)      
							Button.MouseEnter:Connect(function()      
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 =  COL3RGB(30, 115, 255)})      
							end)      
							Button.MouseLeave:Connect(function()      
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 =  COL3RGB(200, 200, 200)})      
							end)      

							if first then      
								abcd.Text = v      
								Element.value.Dropdown = v      
							end      
							local Frame = INST("ScrollingFrame")      
							local UIListLayout = INST("UIListLayout")      

							Scroll.Name = "Scroll"      
							Scroll.Parent = Dropdown      
							Scroll.BackgroundColor3 = COL3RGB(255, 255, 255)      
							Scroll.BackgroundTransparency = 1.000      
							Scroll.Position = UDIM2(0, 0, 0, 0)      
							Scroll.Size = UDIM2(1, 0, 0, amount * 16 + 8)      
							Scroll.Visible = first      
							Scroll.Name = v      


							Frame.Name = "Frame"      
							Frame.Parent = Scroll      
							Frame.Active = true      
							Frame.BackgroundColor3 = COL3RGB(1, 1, 1)      
							Frame.BorderColor3 = COL3RGB(30, 30, 30)      
							Frame.Position = UDIM2(0, 30, 0, 40)      
							Frame.Size = UDIM2(0, 175, 0, 16 * amount)      
							Frame.BottomImage = "http://www.roblox.com/asset/?id=6724808282"      
							Frame.CanvasSize = UDIM2(0, 0, 0, 0)      
							Frame.MidImage = "http://www.roblox.com/asset/?id=6724808282"      
							Frame.ScrollBarThickness = 4      
							Frame.TopImage = "http://www.roblox.com/asset/?id=6724808282"      
							Frame.AutomaticCanvasSize = "Y"      
							Frame.ScrollBarImageColor3 = COL3RGB(30, 115, 255)      

							UIListLayout.Parent = Frame      
							UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center      
							UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder      
							local joll = true      
							for i,v in ipairs(joe2) do      
								local Button = INST("TextButton")      
								local TextLabel = INST("TextLabel")      

								Button.Name = v      
								Button.Parent = Frame      
								Button.BackgroundColor3 = COL3RGB(1, 1, 1)      
								Button.BorderColor3 = COL3RGB(30, 30, 30)      
								Button.BorderSizePixel = 0      
								Button.Position = UDIM2(0, 30, 0, 16)      
								Button.Size = UDIM2(1, 0, 0, 16)      
								Button.AutoButtonColor = false      
								Button.Font = Enum.Font.SourceSans      
								Button.Text = ""      
								Button.TextColor3 = COL3RGB(0, 0, 0)      
								Button.TextSize = 14.000      

								TextLabel.Parent = Button      
								TextLabel.BackgroundColor3 = COL3RGB(30, 115, 255)     
								TextLabel.BackgroundTransparency = 1.000      
								TextLabel.BorderColor3 = COL3RGB(30, 30, 30)      
								TextLabel.Position = UDIM2(0, 4, 0, -1)      
								TextLabel.Size = UDIM2(1, 1, 1, 1)      
								TextLabel.Font = Enum.Font.SourceSansSemibold      
								TextLabel.Text = v      
								TextLabel.TextColor3 = COL3RGB(200, 200, 200)      
								TextLabel.TextSize = 14.000      
								TextLabel.TextXAlignment = Enum.TextXAlignment.Left      
								if joll then      
									joll = false      
									TextLabel.TextColor3 = COL3RGB(135, 25, 255)      
								end      

								Button.MouseButton1Down:Connect(function()      

									for i,v in pairs(Frame:GetChildren()) do      
										if v:IsA("TextButton") then      
											library:Tween(v.TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)})      
										end      
									end      

									library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)})      

									Element.value.Scroll[joell] = v      

									values[tabname][sectorname][text] = Element.value      
									callback(Element.value)      
								end)      
								Button.MouseEnter:Connect(function()      
									if Element.value.Scroll[joell] ~= v then      
										library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)})      
									end      
								end)      
								Button.MouseLeave:Connect(function()      
									if Element.value.Scroll[joell] ~= v then      
										library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)})      
									end      
								end)      
							end      
							first = false      
						end      
					end      

					ImageLabel.Parent = Button      
					ImageLabel.BackgroundColor3 = COL3RGB(255, 255, 255)      
					ImageLabel.BackgroundTransparency = 1.000      
					ImageLabel.Position = UDIM2(0, 165, 0, 6)      
					ImageLabel.Size = UDIM2(0, 6, 0, 4)      
					ImageLabel.Image = "http://www.roblox.com/asset/?id=6724771531"      

					TextLabel_3.Parent = Dropdown      
					TextLabel_3.BackgroundColor3 = COL3RGB(255, 255, 255)      
					TextLabel_3.BackgroundTransparency = 1.000      
					TextLabel_3.Position = UDIM2(0, 32, 0, -1)      
					TextLabel_3.Size = UDIM2(0.111913361, 208, 0.382215232, 0)      
					TextLabel_3.Font = Enum.Font.SourceSansSemibold      
					TextLabel_3.Text = text      
					TextLabel_3.TextColor3 = COL3RGB(200, 200, 200)      
					TextLabel_3.TextSize = 14.000      
					TextLabel_3.TextXAlignment = Enum.TextXAlignment.Left      

					Button.MouseButton1Down:Connect(function()      
						Drop.Visible = not Drop.Visible      
						if not Drop.Visible then      
							Drop.CanvasPosition = Vec2(0,0)      
						end      
					end)      
					local indrop = false      
					local ind = false      
					Drop.MouseEnter:Connect(function()      
						indrop = true      
					end)      
					Drop.MouseLeave:Connect(function()      
						indrop = false      
					end)      
					Button.MouseEnter:Connect(function()      
						ind = true      
					end)      
					Button.MouseLeave:Connect(function()      
						ind = false      
					end)      
					game:GetService("UserInputService").InputBegan:Connect(function(input)      
						if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then      
							if Drop.Visible == true and not indrop and not ind then      
								Drop.Visible = false      
								Drop.CanvasPosition = Vec2(0,0)      
							end      
						end      
					end)      

					function Element:SetValue(tbl)      
						Element.value = tbl      
						abcd.Text = tbl.Dropdown      
						values[tabname][sectorname][text] = Element.value      
						for i,v in pairs(Dropdown:GetChildren()) do      
							if v:IsA("Frame") then      
								if v.Name == Element.value.Dropdown then      
									v.Visible = true      
								else      
									v.Visible = false      
								end      
								for _,bad in pairs(v.Frame:GetChildren()) do      
									if bad:IsA("TextButton") then      
										bad.TextLabel.TextColor3 = COL3RGB(200, 200, 200)      
										if bad.Name == Element.value.Scroll[v.Name] then      
											bad.TextLabel.TextColor3 = COL3RGB(30, 115, 255)     
										end      
									end      
								end      
							end      
						end      
					end      

					if data.default then      
						Element:SetValue(data.default)      
					end      

					values[tabname][sectorname][text] = Element.value      

				elseif type == "Scroll" then      
					local amount = data.Amount or 6      
					Section.Size = Section.Size + UDIM2(0,0,0,amount * 16 + 8)      
					if data.alphabet then      
						TBLSORT(data.options, function(a,b)      
							return a < b      
						end)      
					end      
					Element.value = {Scroll = data.default and data.default.Scroll or data.options[1]}      

					local Scroll = INST("Frame")      
					local Frame = INST("ScrollingFrame")      
					local UIListLayout = INST("UIListLayout")      

					Scroll.Name = "Scroll"      
					Scroll.Parent = Inner      
					Scroll.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Scroll.BackgroundTransparency = 1.000      
					Scroll.Position = UDIM2(0, 0, 00, 0)      
					Scroll.Size = UDIM2(1, 0, 0, amount * 16 + 8)      


					Frame.Name = "Frame"      
					Frame.Parent = Scroll      
					Frame.Active = true      
					Frame.BackgroundColor3 = COL3RGB(1, 1, 1)      
					Frame.BorderColor3 = COL3RGB(30, 30, 30)      
					Frame.Position = UDIM2(0, 30, 0, 0)      
					Frame.Size = UDIM2(0, 175, 0, 16 * amount)      
					Frame.BottomImage = "http://www.roblox.com/asset/?id=6724808282"      
					Frame.CanvasSize = UDIM2(0, 0, 0, 0)      
					Frame.MidImage = "http://www.roblox.com/asset/?id=6724808282"      
					Frame.ScrollBarThickness = 4      
					Frame.TopImage = "http://www.roblox.com/asset/?id=6724808282"      
					Frame.AutomaticCanvasSize = "Y"      
					Frame.ScrollBarImageColor3 = COL3RGB(30, 115, 255)     

					UIListLayout.Parent = Frame      
					UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center      
					UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder      
					local first = true      
					for i,v in ipairs(data.options) do      
						local Button = INST("TextButton")      
						local TextLabel = INST("TextLabel")      

						Button.Name = v      
						Button.Parent = Frame      
						Button.BackgroundColor3 = COL3RGB(1, 1, 1)      
						Button.BorderColor3 = COL3RGB(30, 30, 30)      
						Button.BorderSizePixel = 0      
						Button.Position = UDIM2(0, 30, 0, 16)      
						Button.Size = UDIM2(1, 0, 0, 16)      
						Button.AutoButtonColor = false      
						Button.Font = Enum.Font.SourceSans      
						Button.Text = ""      
						Button.TextColor3 = COL3RGB(0, 0, 0)      
						Button.TextSize = 14.000      

						TextLabel.Parent = Button      
						TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255)     
						TextLabel.BackgroundTransparency = 1.000      
						TextLabel.BorderColor3 = COL3RGB(30, 30, 30)      
						TextLabel.Position = UDIM2(0, 4, 0, -1)      
						TextLabel.Size = UDIM2(1, 1, 1, 1)      
						TextLabel.Font = Enum.Font.SourceSansSemibold      
						TextLabel.Text = v      
						TextLabel.TextColor3 = COL3RGB(200, 200, 200)      
						TextLabel.TextSize = 14.000      
						TextLabel.TextXAlignment = Enum.TextXAlignment.Left      
						if first then first = false      
							TextLabel.TextColor3 = COL3RGB(30, 115, 255)      
						end      

						Button.MouseButton1Down:Connect(function()      

							for i,v in pairs(Frame:GetChildren()) do      
								if v:IsA("TextButton") then      
									library:Tween(v.TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)})      
								end      
							end      

							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)})      

							Element.value.Scroll = v      

							values[tabname][sectorname][text] = Element.value      
							callback(Element.value)      
						end)      
						Button.MouseEnter:Connect(function()      
							if Element.value.Scroll ~= v then      
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)})      
							end      
						end)      
						Button.MouseLeave:Connect(function()      
							if Element.value.Scroll ~= v then      
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)})      
							end      
						end)      
					end      

					function Element:SetValue(val)      
						Element.value = val      

						for i,v in pairs(Frame:GetChildren()) do      
							if v:IsA("TextButton") then      
								library:Tween(v.TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)})      
							end      
						end      

						library:Tween(Frame[Element.value.Scroll].TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)})      
						values[tabname][sectorname][text] = Element.value      
						callback(Element.value)      
					end      
					values[tabname][sectorname][text] = Element.value      
				elseif type == "Jumbobox" then      
					Section.Size = Section.Size + UDIM2(0,0,0,39)      
					Element.value = {Jumbobox = {}}      
					data.options = data.options or {}      

					local Dropdown = INST("Frame")      
					local Button = INST("TextButton")      
					local TextLabel = INST("TextLabel")      
					local Drop = INST("ScrollingFrame")      
					local Button_2 = INST("TextButton")      
					local TextLabel_2 = INST("TextLabel")      
					local UIListLayout = INST("UIListLayout")      
					local ImageLabel = INST("ImageLabel")      
					local TextLabel_3 = INST("TextLabel")      

					Dropdown.Name = "Dropdown"      
					Dropdown.Parent = Inner      
					Dropdown.BackgroundColor3 = COL3RGB(1, 1, 1)      
					Dropdown.BackgroundTransparency = 1.000      
					Dropdown.Position = UDIM2(0, 0, 0.255102038, 0)      
					Dropdown.Size = UDIM2(1, 0, 0, 39)      

					Button.Name = "Button"      
					Button.Parent = Dropdown      
					Button.BackgroundColor3 = COL3RGB(1, 1, 1)      
					Button.BorderColor3 = COL3RGB(30, 30, 30)      
					Button.Position = UDIM2(0, 30, 0, 16)      
					Button.Size = UDIM2(0, 175, 0, 17)      
					Button.AutoButtonColor = false      
					Button.Font = Enum.Font.SourceSans      
					Button.Text = ""      
					Button.TextColor3 = COL3RGB(0, 0, 0)      
					Button.TextSize = 14.000      

					TextLabel.Parent = Button      
					TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255)      
					TextLabel.BackgroundTransparency = 1.000      
					TextLabel.BorderColor3 = COL3RGB(30, 30, 30)      
					TextLabel.Position = UDIM2(0, 5, 0, 0)      
					TextLabel.Size = UDIM2(-0.21714285, 208, 1, 0)      
					TextLabel.Font = Enum.Font.SourceSansSemibold      
					TextLabel.Text = "..."      
					TextLabel.TextColor3 = COL3RGB(200, 200, 200)      
					TextLabel.TextSize = 14.000      
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left      

					local abcd = TextLabel      

					Drop.Name = "Drop"      
					Drop.Parent = Button      
					Drop.Active = true      
					Drop.BackgroundColor3 = COL3RGB(1, 1, 1)      
					Drop.BorderColor3 = COL3RGB(30, 30, 30)      
					Drop.Position = UDIM2(0, 0, 1, 1)      
					Drop.Size = UDIM2(1, 0, 0, 20)      
					Drop.Visible = false      
					Drop.BottomImage = "http://www.roblox.com/asset/?id=6724808282"      
					Drop.CanvasSize = UDIM2(1, 1, 1, 1)      
					Drop.ScrollBarThickness = 0  
					Drop.TopImage = "http://www.roblox.com/asset/?id=6724808282"      
					Drop.MidImage = "http://www.roblox.com/asset/?id=6724808282"      
					for i,v in pairs(data.options) do      
						Drop.CanvasSize = Drop.CanvasSize + UDIM2(0, 0, 0, 17)      
					end      
					Drop.ZIndex = 5      
					Drop.ScrollBarImageColor3 = COL3RGB(30, 115, 255)   

					UIListLayout.Parent = Drop      
					UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center      
					UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder      

					values[tabname][sectorname][text] = Element.value      

					local num = #data.options      
					if num > 5 then      
						Drop.Size = UDIM2(1, 0, 0, 85)      
					else      
						Drop.Size = UDIM2(1, 0, 0, 17*num)      
					end      
					local first = true      

					local function updatetext()      
						local old = {}      
						for i,v in ipairs(data.options) do      
							if TBLFIND(Element.value.Jumbobox, v) then      
								old[#old+1] = (v)      
							else      
							end      
						end      
						local str = ""      


						if #old == 0 then      
							str = "..."      
						else      
							if #old == 1 then      
								str = old[1]      
							else      
								for i,v in ipairs(old) do      
									if i == 1 then      
										str = v      
									else      
										if i > 2 then      
											if i < 4 then      
												str = str..",  ..."      
											end      
										else      
											str = str..",  "..v      
										end      
									end      
								end      
							end      
						end      

						abcd.Text = str      
					end      
					for i,v in ipairs(data.options) do      
						do      
							local Button = INST("TextButton")      
							local TextLabel = INST("TextLabel")      

							Button.Name = v      
							Button.Parent = Drop      
							Button.BackgroundColor3 = COL3RGB(1, 1, 1)      
							Button.BorderColor3 = COL3RGB(30, 30, 30)      
							Button.Position = UDIM2(0, 30, 0, 16)      
							Button.Size = UDIM2(0, 175, 0, 17)      
							Button.AutoButtonColor = false      
							Button.Font = Enum.Font.SourceSans      
							Button.Text = ""      
							Button.TextColor3 = COL3RGB(0, 0, 0)      
							Button.TextSize = 14.000      
							Button.BorderSizePixel = 0      
							Button.ZIndex = 6      

							TextLabel.Parent = Button      
							TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255)      
							TextLabel.BackgroundTransparency = 1.000      
							TextLabel.BorderColor3 = COL3RGB(30, 30, 30)      
							TextLabel.Position = UDIM2(0, 5, 0, -1)      
							TextLabel.Size = UDIM2(-0.21714285, 208, 1, 0)      
							TextLabel.Font = Enum.Font.SourceSansSemibold      
							TextLabel.Text = v      
							TextLabel.TextColor3 = COL3RGB(200, 200, 200)      
							TextLabel.TextSize = 14.000      
							TextLabel.TextXAlignment = Enum.TextXAlignment.Left      
							TextLabel.ZIndex = 6      

							Button.MouseButton1Down:Connect(function()      
								if TBLFIND(Element.value.Jumbobox, v) then      
									for i,a in pairs(Element.value.Jumbobox) do      
										if a == v then      
											TBLREMOVE(Element.value.Jumbobox, i)      
										end      
									end      
									library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(255, 255, 255)})      
								else      
									Element.value.Jumbobox[#Element.value.Jumbobox+1] = (v)      
									library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)})      
								end      
								updatetext()      

								values[tabname][sectorname][text] = Element.value      
								callback(Element.value)      
							end)      
							Button.MouseEnter:Connect(function()      
								if not TBLFIND(Element.value.Jumbobox, v) then      
									library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)})      
								end      
							end)      
							Button.MouseLeave:Connect(function()      
								if not TBLFIND(Element.value.Jumbobox, v) then      
									library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)})      
								end      
							end)      

							first = false      
						end      
					end      
					function Element:SetValue(val)      
						Element.value = val      
						for i,v in pairs(Drop:GetChildren()) do      
							if v.Name ~= "UIListLayout" then      
								if TBLFIND(val.Jumbobox, v.Name) then      
									v.TextLabel.TextColor3 = COL3RGB(30, 115, 255)     
								else      
									v.TextLabel.TextColor3 = COL3RGB(200, 200, 200)      
								end      
							end      
						end      
						updatetext()      
						values[tabname][sectorname][text] = Element.value      
						callback(val)      
					end      
					if data.default then      
						Element:SetValue(data.default)      
					end      

					ImageLabel.Parent = Button      
					ImageLabel.BackgroundColor3 = COL3RGB(255, 255, 255)      
					ImageLabel.BackgroundTransparency = 1.000      
					ImageLabel.Position = UDIM2(0, 165, 0, 6)      
					ImageLabel.Size = UDIM2(0, 6, 0, 4)      
					ImageLabel.Image = "http://www.roblox.com/asset/?id=6724771531"      

					TextLabel_3.Parent = Dropdown      
					TextLabel_3.BackgroundColor3 = COL3RGB(255, 255, 255)      
					TextLabel_3.BackgroundTransparency = 1.000      
					TextLabel_3.Position = UDIM2(0, 32, 0, -1)      
					TextLabel_3.Size = UDIM2(0.111913361, 208, 0.382215232, 0)      
					TextLabel_3.Font = Enum.Font.SourceSansSemibold      
					TextLabel_3.Text = text      
					TextLabel_3.TextColor3 = COL3RGB(200, 200, 200)      
					TextLabel_3.TextSize = 14.000      
					TextLabel_3.TextXAlignment = Enum.TextXAlignment.Left      

					Button.MouseButton1Down:Connect(function()      
						Drop.Visible = not Drop.Visible      
						if not Drop.Visible then      
							Drop.CanvasPosition = Vec2(0,0)      
						end      
					end)      
					local indrop = false      
					local ind = false      
					Drop.MouseEnter:Connect(function()      
						indrop = true      
					end)      
					Drop.MouseLeave:Connect(function()      
						indrop = false      
					end)      
					Button.MouseEnter:Connect(function()      
						ind = true      
					end)      
					Button.MouseLeave:Connect(function()      
						ind = false      
					end)      
					game:GetService("UserInputService").InputBegan:Connect(function(input)      
						if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then      
							if Drop.Visible == true and not indrop and not ind then      
								Drop.Visible = false      
								Drop.CanvasPosition = Vec2(0,0)      
							end      
						end      
					end)      
				elseif type == "ToggleKeybind" then      
					Section.Size = Section.Size + UDIM2(0,0,0,16)      
					Element.value = {Toggle = data.default and data.default.Toggle or false, Key, Type = "Always", Active = true}      

					local Toggle = INST("Frame")      
					local Button = INST("TextButton")      
					local Color = INST("Frame")      
					local TextLabel = INST("TextLabel")      

					Toggle.Name = "Toggle"      
					Toggle.Parent = Inner      
					Toggle.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Toggle.BackgroundTransparency = 1.000      
					Toggle.Size = UDIM2(1, 0, 0, 15)      

					Button.Name = "Button"      
					Button.Parent = Toggle      
					Button.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Button.BackgroundTransparency = 1.000      
					Button.Size = UDIM2(1, 0, 1, 0)      
					Button.Font = Enum.Font.SourceSans      
					Button.Text = ""      
					Button.TextColor3 = COL3RGB(0, 0, 0)      
					Button.TextSize = 14.000      

					Color.Name = "Color"      
					Color.Parent = Button      
					Color.BackgroundColor3 = COL3RGB(1, 1, 1)      
					Color.BorderColor3 = COL3RGB(30, 30, 30)      
					Color.Position = UDIM2(0, 15, 0.5, -5)      
					Color.Size = UDIM2(0, 8, 0, 8)      
					local binding = false      
					TextLabel.Parent = Button      
					TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255)      
					TextLabel.BackgroundTransparency = 1.000      
					TextLabel.Position = UDIM2(0, 32, 0, -1)      
					TextLabel.Size = UDIM2(0.111913361, 208, 1, 0)      
					TextLabel.Font = Enum.Font.SourceSansSemibold      
					TextLabel.Text = text      
					TextLabel.TextColor3 = COL3RGB(200, 200, 200)      
					TextLabel.TextSize = 14.000      
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left      

					local function update()      
						if Element.value.Toggle then      
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(30, 115, 255)})      
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(255, 255, 255)})      
						else      
							keybindremove(text)      
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(1, 1, 1)})      
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)})      
						end      
						values[tabname][sectorname][text] = Element.value      
						callback(Element.value)      
					end      

					Button.MouseButton1Down:Connect(function()      
						if not binding then      
							Element.value.Toggle = not Element.value.Toggle      
							update()      
							values[tabname][sectorname][text] = Element.value      
							callback(Element.value)      
						end      
					end)      
					if data.default then      
						update()      
					end      
					values[tabname][sectorname][text] = Element.value      
					do      
						local Keybind = INST("TextButton")      
						local Frame = INST("Frame")      
						local Always = INST("TextButton")      
						local UIListLayout = INST("UIListLayout")      
						local Hold = INST("TextButton")      
						local Toggle = INST("TextButton")      

						Keybind.Name = "Keybind"      
						Keybind.Parent = Button      
						Keybind.BackgroundColor3 = COL3RGB(1, 1, 1)      
						Keybind.BorderColor3 = COL3RGB(30, 30, 30)      
						Keybind.Position = UDIM2(0, 270, 0.5, -6)      
						Keybind.Text = "NONE"      
						Keybind.Size = UDIM2(0, 43, 0, 12)      
						Keybind.Size = UDIM2(0,txt:GetTextSize("NONE", 14, Enum.Font.SourceSansSemibold, Vec2(700, 12)).X + 5,0, 12)      
						Keybind.AutoButtonColor = false      
						Keybind.Font = Enum.Font.SourceSansSemibold      
						Keybind.TextColor3 = COL3RGB(200, 200, 200)      
						Keybind.TextSize = 14.000      
						Keybind.AnchorPoint = Vec2(1,0)      
						Keybind.ZIndex = 3      

						Frame.Parent = Keybind      
						Frame.BackgroundColor3 = COL3RGB(1, 1, 1)      
						Frame.BorderColor3 = COL3RGB(230, 30, 30)      
						Frame.Position = UDIM2(1, -49, 0, 1)      
						Frame.Size = UDIM2(0, 49, 0, 49)      
						Frame.Visible = false      
						Frame.ZIndex = 3      

						Always.Name = "Always"      
						Always.Parent = Frame      
						Always.BackgroundColor3 = COL3RGB(1, 1, 1)      
						Always.BackgroundTransparency = 1.000      
						Always.BorderColor3 = COL3RGB(30, 30, 30)      
						Always.Position = UDIM2(-3.03289485, 231, 0.115384616, -6)      
						Always.Size = UDIM2(1, 0, 0, 16)      
						Always.AutoButtonColor = false      
						Always.Font = Enum.Font.SourceSansBold      
						Always.Text = "Always"      
						Always.TextColor3 = COL3RGB(30, 115, 255)     
						Always.TextSize = 14.000      
						Always.ZIndex = 3      

						UIListLayout.Parent = Frame      
						UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center      
						UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder      

						Hold.Name = "Hold"      
						Hold.Parent = Frame      
						Hold.BackgroundColor3 = COL3RGB(11, 1, 1)      
						Hold.BackgroundTransparency = 1.000      
						Hold.BorderColor3 = COL3RGB(30, 30, 30)      
						Hold.Position = UDIM2(-3.03289485, 231, 0.115384616, -6)      
						Hold.Size = UDIM2(1, 0, 0, 16)      
						Hold.AutoButtonColor = false      
						Hold.Font = Enum.Font.SourceSansSemibold      
						Hold.Text = "Hold"      
						Hold.TextColor3 = COL3RGB(200, 200, 200)      
						Hold.TextSize = 14.000      
						Hold.ZIndex = 3      

						Toggle.Name = "Toggle"      
						Toggle.Parent = Frame      
						Toggle.BackgroundColor3 = COL3RGB(1, 1, 1)      
						Toggle.BackgroundTransparency = 1.000      
						Toggle.BorderColor3 = COL3RGB(30, 30, 30)      
						Toggle.Position = UDIM2(-3.03289485, 231, 0.115384616, -6)      
						Toggle.Size = UDIM2(1, 0, 0, 16)      
						Toggle.AutoButtonColor = false      
						Toggle.Font = Enum.Font.SourceSansSemibold      
						Toggle.Text = "Toggle"      
						Toggle.TextColor3 = COL3RGB(200, 200, 200)      
						Toggle.TextSize = 14.000      
						Toggle.ZIndex = 3      

						for _,button in pairs(Frame:GetChildren()) do      
							if button:IsA("TextButton") then      
								button.MouseButton1Down:Connect(function()      
									Element.value.Type = button.Text      
									Frame.Visible = false      
									if Element.value.Active ~= (Element.value.Type == "Always" and true or false) then      
										Element.value.Active = Element.value.Type == "Always" and true or false      
										callback(Element.value)      
									end      
									if button.Text == "Always" then      
										keybindremove(text)      
									end      
									for _,button in pairs(Frame:GetChildren()) do      
										if button:IsA("TextButton") and button.Text ~= Element.value.Type then      
											button.Font = Enum.Font.SourceSansSemibold      
											library:Tween(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200,200,200)})      
										end      
									end      
									button.Font = Enum.Font.SourceSansBold      
									button.TextColor3 = COL3RGB(30, 115, 255)     
									values[tabname][sectorname][text] = Element.value      
								end)      
								button.MouseEnter:Connect(function()      
									if Element.value.Type ~= button.Text then      
										library:Tween(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)})      
									end      
								end)      
								button.MouseLeave:Connect(function()      
									if Element.value.Type ~= button.Text then      
										library:Tween(button, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200,200,200)})      
									end      
								end)      
							end      
						end      
						Keybind.MouseButton1Down:Connect(function()      
							if not binding then      
								wait()      
								binding = true      
								Keybind.Text = "..."      
								Keybind.Size = UDIM2(0,txt:GetTextSize("...", 14, Enum.Font.SourceSansSemibold, Vec2(700, 12)).X + 4,0, 12)      
							end      
						end)      
						Keybind.MouseButton2Down:Connect(function()      
							if not binding then      
								Frame.Visible = not Frame.Visible      
							end      
						end)      
						local Player = game.Players.LocalPlayer      
						local Mouse = Player:GetMouse()      
						local InFrame = false      
						Frame.MouseEnter:Connect(function()      
							InFrame = true      
						end)      
						Frame.MouseLeave:Connect(function()      
							InFrame = false      
						end)      
						local InFrame2 = false      
						Keybind.MouseEnter:Connect(function()      
							InFrame2 = true      
						end)      
						Keybind.MouseLeave:Connect(function()      
							InFrame2 = false      
						end)      
						game:GetService("UserInputService").InputBegan:Connect(function(input)      
							if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 and not binding then      
								if Frame.Visible == true and not InFrame and not InFrame2 then      
									Frame.Visible = false      
								end      
							end      
							if binding then      
								binding = false      
								Keybind.Text = input.KeyCode.Name ~= "Unknown" and input.KeyCode.Name:upper() or input.UserInputType.Name:upper()      
								Keybind.Size = UDIM2(0,txt:GetTextSize(Keybind.Text, 14, Enum.Font.SourceSansSemibold, Vec2(700, 12)).X + 5,0, 12)      
								Element.value.Key = input.KeyCode.Name ~= "Unknown" and input.KeyCode.Name or input.UserInputType.Name      
								if input.KeyCode.Name == "Backspace" then      
									Keybind.Text = "NONE"      
									Keybind.Size = UDIM2(0,txt:GetTextSize(Keybind.Text, 14, Enum.Font.SourceSansSemibold, Vec2(700, 12)).X + 4,0, 12)      
									Element.value.Key = nil      
									Element.value.Active = true      
								end      
								callback(Element.value)      
							else      
								if Element.value.Key ~= nil then      
									if FIND(Element.value.Key, "Mouse") then      
										if input.UserInputType == Enum.UserInputType[Element.value.Key] then      
											if Element.value.Type == "Hold" then      
												Element.value.Active = true      
												callback(Element.value)      
												if Element.value.Active and Element.value.Toggle then      
													keybindadd(text)      
												else      
													keybindremove(text)      
												end      
											elseif Element.value.Type == "Toggle" then      
												Element.value.Active = not Element.value.Active      
												callback(Element.value)      
												if Element.value.Active and Element.value.Toggle then      
													keybindadd(text)      
												else      
													keybindremove(text)      
												end      
											end      
										end      
									else      
										if input.KeyCode == Enum.KeyCode[Element.value.Key] then      
											if Element.value.Type == "Hold" then      
												Element.value.Active = true      
												callback(Element.value)      
												if Element.value.Active and Element.value.Toggle then      
													keybindadd(text)      
												else      
													keybindremove(text)      
												end      
											elseif Element.value.Type == "Toggle" then      
												Element.value.Active = not Element.value.Active      
												callback(Element.value)      
												if Element.value.Active and Element.value.Toggle then      
													keybindadd(text)      
												else      
													keybindremove(text)      
												end      
											end      
										end      
									end      
								else      
									Element.value.Active = true      
								end      
							end      
							values[tabname][sectorname][text] = Element.value      
						end)      
						game:GetService("UserInputService").InputEnded:Connect(function(input)      
							if Element.value.Key ~= nil then      
								if FIND(Element.value.Key, "Mouse") then      
									if input.UserInputType == Enum.UserInputType[Element.value.Key] then      
										if Element.value.Type == "Hold" then      
											Element.value.Active = false      
											callback(Element.value)      
											if Element.value.Active then      
												keybindadd(text)      
											else      
												keybindremove(text)      
											end      
										end      
									end      
								else      
									if input.KeyCode == Enum.KeyCode[Element.value.Key] then      
										if Element.value.Type == "Hold" then      
											Element.value.Active = false      
											callback(Element.value)      
											if Element.value.Active then      
												keybindadd(text)      
											else      
												keybindremove(text)      
											end      
										end      
									end      
								end      
							end      
							values[tabname][sectorname][text] = Element.value      
						end)      
					end      
					function Element:SetValue(value)      
						Element.value = value      
						update()      
					end      
				elseif type == "Toggle" then      
					Section.Size = Section.Size + UDIM2(0,0,0,16)      
					Element.value = {Toggle = data.default and data.default.Toggle or false}      

					local Toggle = INST("Frame")      
					local Button = INST("TextButton")      
					local Color = INST("Frame")      
					local TextLabel = INST("TextLabel")      

					Toggle.Name = "Toggle"      
					Toggle.Parent = Inner      
					Toggle.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Toggle.BackgroundTransparency = 1.000      
					Toggle.Size = UDIM2(1, 0, 0, 15)      

					Button.Name = "Button"      
					Button.Parent = Toggle      
					Button.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Button.BackgroundTransparency = 1.000      
					Button.Size = UDIM2(1, 0, 1, 0)      
					Button.Font = Enum.Font.SourceSans      
					Button.Text = ""      
					Button.TextColor3 = COL3RGB(0, 0, 0)      
					Button.TextSize = 14.000      

					Color.Name = "Color"      
					Color.Parent = Button      
					Color.BackgroundColor3 = COL3RGB(1, 1, 1)      
					Color.BorderColor3 = COL3RGB(30, 30, 30)      
					Color.Position = UDIM2(0, 15, 0.5, -5)      
					Color.Size = UDIM2(0, 8, 0, 8)      

					TextLabel.Parent = Button      
					TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255)      
					TextLabel.BackgroundTransparency = 1.000      
					TextLabel.Position = UDIM2(0, 32, 0, -1)      
					TextLabel.Size = UDIM2(0.111913361, 208, 1, 0)      
					TextLabel.Font = Enum.Font.SourceSansSemibold      
					TextLabel.Text = text      
					TextLabel.TextColor3 = COL3RGB(200, 200, 200)      
					TextLabel.TextSize = 14.000      
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left      

					local function update()      
						if Element.value.Toggle then      
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(30, 115, 255)})      
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(255, 255, 255)})      
						else      
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(1, 1, 1)})      
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)})      
						end      
						values[tabname][sectorname][text] = Element.value      
					end      

					Button.MouseButton1Down:Connect(function()      
						Element.value.Toggle = not Element.value.Toggle      
						update()      
						values[tabname][sectorname][text] = Element.value      
						callback(Element.value)      
					end)      
					if data.default then      
						update()      
					end      
					values[tabname][sectorname][text] = Element.value      
					function Element:SetValue(value)      
						Element.value = value      
						values[tabname][sectorname][text] = Element.value      
						update()      
						callback(Element.value)      
					end      
				elseif type == "ToggleColor" then      
					Section.Size = Section.Size + UDIM2(0,0,0,16)      
					Element.value = {Toggle = data.default and data.default.Toggle or false, Color = data.default and data.default.Color or COL3RGB(255,255,255)}      

					local Toggle = INST("Frame")      
					local Button = INST("TextButton")      
					local Color = INST("Frame")      
					local TextLabel = INST("TextLabel")      

					Toggle.Name = "Toggle"      
					Toggle.Parent = Inner      
					Toggle.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Toggle.BackgroundTransparency = 1.000      
					Toggle.Size = UDIM2(1, 0, 0, 15)      

					Button.Name = "Button"      
					Button.Parent = Toggle      
					Button.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Button.BackgroundTransparency = 1.000      
					Button.Size = UDIM2(1, 0, 1, 0)      
					Button.Font = Enum.Font.SourceSans      
					Button.Text = ""      
					Button.TextColor3 = COL3RGB(0, 0, 0)      
					Button.TextSize = 14.000      

					Color.Name = "Color"      
					Color.Parent = Button      
					Color.BackgroundColor3 = COL3RGB(1, 1, 1)      
					Color.BorderColor3 = COL3RGB(30, 30, 30)      
					Color.Position = UDIM2(0, 15, 0.5, -5)      
					Color.Size = UDIM2(0, 8, 0, 8)      

					TextLabel.Parent = Button      
					TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255)      
					TextLabel.BackgroundTransparency = 1.000      
					TextLabel.Position = UDIM2(0, 32, 0, -1)      
					TextLabel.Size = UDIM2(0.111913361, 208, 1, 0)      
					TextLabel.Font = Enum.Font.SourceSansSemibold      
					TextLabel.Text = text      
					TextLabel.TextColor3 = COL3RGB(200, 200, 200)      
					TextLabel.TextSize = 14.000      
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left      

					local function update()      
						if Element.value.Toggle then      
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(30, 115, 255)})      
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(255, 255, 255)})      
						else      
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(1, 1, 1)})      
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)})      
						end      
						values[tabname][sectorname][text] = Element.value      
					end      

					local ColorH,ColorS,ColorV      

					local ColorP = INST("TextButton")      
					local Frame = INST("Frame")      
					local Colorpick = INST("ImageButton")      
					local ColorDrag = INST("Frame")      
					local Huepick = INST("ImageButton")      
					local Huedrag = INST("Frame")      

					ColorP.Name = "ColorP"      
					ColorP.Parent = Button      
					ColorP.AnchorPoint = Vec2(1, 0)      
					ColorP.BackgroundColor3 = COL3RGB(255, 0, 0)      
					ColorP.BorderColor3 = COL3RGB(30, 30, 30)      
					ColorP.Position = UDIM2(0, 270, 0.5, -4)      
					ColorP.Size = UDIM2(0, 18, 0, 8)      
					ColorP.AutoButtonColor = false      
					ColorP.Font = Enum.Font.SourceSansSemibold      
					ColorP.Text = ""      
					ColorP.TextColor3 = COL3RGB(200, 200, 200)      
					ColorP.TextSize = 14.000      

					Frame.Parent = ColorP      
					Frame.BackgroundColor3 = COL3RGB(1, 1, 1)      
					Frame.BorderColor3 = COL3RGB(30, 30, 30)      
					Frame.Position = UDIM2(-0.666666687, -170, 1.375, 0)      
					Frame.Size = UDIM2(0, 200, 0, 170)      
					Frame.Visible = false      
					Frame.ZIndex = 3      

					Colorpick.Name = "Colorpick"      
					Colorpick.Parent = Frame      
					Colorpick.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Colorpick.BorderColor3 = COL3RGB(30, 30, 30)      
					Colorpick.ClipsDescendants = false      
					Colorpick.Position = UDIM2(0, 40, 0, 10)      
					Colorpick.Size = UDIM2(0, 150, 0, 150)      
					Colorpick.AutoButtonColor = false      
					Colorpick.Image = "rbxassetid://4155801252"      
					Colorpick.ImageColor3 = COL3RGB(255, 0, 0)      
					Colorpick.ZIndex = 3      

					ColorDrag.Name = "ColorDrag"      
					ColorDrag.Parent = Colorpick      
					ColorDrag.AnchorPoint = Vec2(0.5, 0.5)      
					ColorDrag.BackgroundColor3 = COL3RGB(255, 255, 255)      
					ColorDrag.BorderColor3 = COL3RGB(30, 30, 30)      
					ColorDrag.Size = UDIM2(0, 4, 0, 4)      
					ColorDrag.ZIndex = 3      

					Huepick.Name = "Huepick"      
					Huepick.Parent = Frame      
					Huepick.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Huepick.BorderColor3 = COL3RGB(30, 30, 30)      
					Huepick.ClipsDescendants = false      
					Huepick.Position = UDIM2(0, 10, 0, 10)      
					Huepick.Size = UDIM2(0, 20, 0, 150)      
					Huepick.AutoButtonColor = false      
					Huepick.Image = "rbxassetid://3641079629"      
					Huepick.ImageColor3 = COL3RGB(255, 0, 0)      
					Huepick.ImageTransparency = 1      
					Huepick.BackgroundTransparency = 0      
					Huepick.ZIndex = 3      

					local HueFrameGradient = INST("UIGradient")      
					HueFrameGradient.Rotation = 90      
					HueFrameGradient.Name = "HueFrameGradient"      
					HueFrameGradient.Parent = Huepick      
					HueFrameGradient.Color = ColorSequence.new {      
						ColorSequenceKeypoint.new(0.00, COL3RGB(255, 0, 0)),      
						ColorSequenceKeypoint.new(0.17, COL3RGB(255, 0, 255)),      
						ColorSequenceKeypoint.new(0.33, COL3RGB(0, 0, 255)),      
						ColorSequenceKeypoint.new(0.50, COL3RGB(0, 255, 255)),      
						ColorSequenceKeypoint.new(0.67, COL3RGB(0, 255, 0)),      
						ColorSequenceKeypoint.new(0.83, COL3RGB(255, 255, 0)),      
						ColorSequenceKeypoint.new(1.00, COL3RGB(255, 0, 0))      
					}	      

					Huedrag.Name = "Huedrag"      
					Huedrag.Parent = Huepick      
					Huedrag.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Huedrag.BorderColor3 = COL3RGB(30, 30, 30)      
					Huedrag.Size = UDIM2(1, 0, 0, 2)      
					Huedrag.ZIndex = 3      

					ColorP.MouseButton1Down:Connect(function()      
						Frame.Visible = not Frame.Visible      
					end)      
					local abc = false      
					local inCP = false      
					ColorP.MouseEnter:Connect(function()      
						abc = true      
					end)      
					ColorP.MouseLeave:Connect(function()      
						abc = false      
					end)      
					Frame.MouseEnter:Connect(function()      
						inCP = true      
					end)      
					Frame.MouseLeave:Connect(function()      
						inCP = false      
					end)      

					ColorH = (CLAMP(Huedrag.AbsolutePosition.Y-Huepick.AbsolutePosition.Y, 0, Huepick.AbsoluteSize.Y)/Huepick.AbsoluteSize.Y)      
					ColorS = 1-(CLAMP(ColorDrag.AbsolutePosition.X-Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X)      
					ColorV = 1-(CLAMP(ColorDrag.AbsolutePosition.Y-Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y)      

					if data.default and data.default.Color ~= nil then      
						ColorH, ColorS, ColorV = data.default.Color:ToHSV()      

						ColorH = CLAMP(ColorH,0,1)      
						ColorS = CLAMP(ColorS,0,1)      
						ColorV = CLAMP(ColorV,0,1)      
						ColorDrag.Position = UDIM2(1-ColorS,0,1-ColorV,0)      
						Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1)      

						ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV)      
						Huedrag.Position = UDIM2(0, 0, 1-ColorH, -1)      

						values[tabname][sectorname][text] = data.default.Color      
					end      

					local mouse = LocalPlayer:GetMouse()      
					game:GetService("UserInputService").InputBegan:Connect(function(input)      
						if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then      
							if not dragging and not abc and not inCP then      
								Frame.Visible = false      
							end      
						end      
					end)      

					local function updateColor()      
						local ColorX = (CLAMP(mouse.X - Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X)      
						local ColorY = (CLAMP(mouse.Y - Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y)      
						ColorDrag.Position = UDIM2(ColorX, 0, ColorY, 0)      
						ColorS = 1-ColorX      
						ColorV = 1-ColorY      
						Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1)      
						ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV)      
						values[tabname][sectorname][text] = Element.value      
						Element.value.Color = COL3HSV(ColorH, ColorS, ColorV)      
						callback(Element.value)      
					end      
					local function updateHue()      
						local y = CLAMP(mouse.Y - Huepick.AbsolutePosition.Y, 0, 148)      
						Huedrag.Position = UDIM2(0, 0, 0, y)      
						hue = y/148      
						ColorH = 1-hue      
						Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1)      
						ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV)      
						values[tabname][sectorname][text] = Element.value      
						Element.value.Color = COL3HSV(ColorH, ColorS, ColorV)      
						callback(Element.value)      
					end      
					Colorpick.MouseButton1Down:Connect(function()      
						updateColor()      
						moveconnection = mouse.Move:Connect(function()      
							updateColor()      
						end)      
						releaseconnection = game:GetService("UserInputService").InputEnded:Connect(function(Mouse)      
							if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then      
								updateColor()      
								moveconnection:Disconnect()      
								releaseconnection:Disconnect()      
							end      
						end)      
					end)      
					Huepick.MouseButton1Down:Connect(function()      
						updateHue()      
						moveconnection = mouse.Move:Connect(function()      
							updateHue()      
						end)      
						releaseconnection = game:GetService("UserInputService").InputEnded:Connect(function(Mouse)      
							if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then      
								updateHue()      
								moveconnection:Disconnect()      
								releaseconnection:Disconnect()      
							end      
						end)      
					end)      

					Button.MouseButton1Down:Connect(function()      
						Element.value.Toggle = not Element.value.Toggle      
						update()      
						values[tabname][sectorname][text] = Element.value      
						callback(Element.value)      
					end)      
					if data.default then      
						update()      
					end      
					values[tabname][sectorname][text] = Element.value      
					function Element:SetValue(value)      
						Element.value = value      
						local duplicate = COL3(value.Color.R, value.Color.G, value.Color.B)      
						ColorH, ColorS, ColorV = duplicate:ToHSV()      
						ColorH = CLAMP(ColorH,0,1)      
						ColorS = CLAMP(ColorS,0,1)      
						ColorV = CLAMP(ColorV,0,1)      

						ColorDrag.Position = UDIM2(1-ColorS,0,1-ColorV,0)      
						Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1)      
						ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV)      
						update()      
						Huedrag.Position = UDIM2(0, 0, 1-ColorH, -1)      

						callback(value)      
					end      
				elseif type == "ToggleTrans" then      
					Section.Size = Section.Size + UDIM2(0,0,0,16)      
					Element.value = {Toggle = data.default and data.default.Toggle or false, Color = data.default and data.default.Color or COL3RGB(255,255,255), Transparency = data.default and data.default.Transparency or 0}      

					local Toggle = INST("Frame")      
					local Button = INST("TextButton")      
					local Color = INST("Frame")      
					local TextLabel = INST("TextLabel")      

					Toggle.Name = "Toggle"      
					Toggle.Parent = Inner      
					Toggle.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Toggle.BackgroundTransparency = 1.000      
					Toggle.Size = UDIM2(1, 0, 0, 15)      

					Button.Name = "Button"      
					Button.Parent = Toggle      
					Button.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Button.BackgroundTransparency = 1.000      
					Button.Size = UDIM2(1, 0, 1, 0)      
					Button.Font = Enum.Font.SourceSans      
					Button.Text = ""      
					Button.TextColor3 = COL3RGB(0, 0, 0)      
					Button.TextSize = 14.000      

					Color.Name = "Color"      
					Color.Parent = Button      
					Color.BackgroundColor3 = COL3RGB(1, 1, 1)      
					Color.BorderColor3 = COL3RGB(30, 30, 30)      
					Color.Position = UDIM2(0, 15, 0.5, -5)      
					Color.Size = UDIM2(0, 8, 0, 8)      

					TextLabel.Parent = Button      
					TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255)      
					TextLabel.BackgroundTransparency = 1.000      
					TextLabel.Position = UDIM2(0, 32, 0, -1)      
					TextLabel.Size = UDIM2(0.111913361, 208, 1, 0)      
					TextLabel.Font = Enum.Font.SourceSansSemibold      
					TextLabel.Text = text      
					TextLabel.TextColor3 = COL3RGB(200, 200, 200)      
					TextLabel.TextSize = 14.000      
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left      

					local function update()      
						if Element.value.Toggle then      
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(30, 115, 255)})      
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(255, 255, 255)})      
						else      
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(1, 1, 1)})      
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)})      
						end      
						values[tabname][sectorname][text] = Element.value      
						callback(Element.value)      
					end      

					local ColorH,ColorS,ColorV      

					local ColorP = INST("TextButton")      
					local Frame = INST("Frame")      
					local Colorpick = INST("ImageButton")      
					local ColorDrag = INST("Frame")      
					local Huepick = INST("ImageButton")      
					local Huedrag = INST("Frame")      

					ColorP.Name = "ColorP"      
					ColorP.Parent = Button      
					ColorP.AnchorPoint = Vec2(1, 0)      
					ColorP.BackgroundColor3 = COL3RGB(255, 0, 0)      
					ColorP.BorderColor3 = COL3RGB(30, 30, 30)      
					ColorP.Position = UDIM2(0, 270, 0.5, -4)      
					ColorP.Size = UDIM2(0, 18, 0, 8)      
					ColorP.AutoButtonColor = false      
					ColorP.Font = Enum.Font.SourceSansSemibold      
					ColorP.Text = ""      
					ColorP.TextColor3 = COL3RGB(200, 200, 200)      
					ColorP.TextSize = 14.000      

					Frame.Parent = ColorP      
					Frame.BackgroundColor3 = COL3RGB(1, 1, 1)      
					Frame.BorderColor3 = COL3RGB(30, 30, 30)      
					Frame.Position = UDIM2(-0.666666687, -170, 1.375, 0)      
					Frame.Size = UDIM2(0, 200, 0, 190)      
					Frame.Visible = false      
					Frame.ZIndex = 3      

					Colorpick.Name = "Colorpick"      
					Colorpick.Parent = Frame      
					Colorpick.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Colorpick.BorderColor3 = COL3RGB(30, 30, 30)      
					Colorpick.ClipsDescendants = false      
					Colorpick.Position = UDIM2(0, 40, 0, 10)      
					Colorpick.Size = UDIM2(0, 150, 0, 150)      
					Colorpick.AutoButtonColor = false      
					Colorpick.Image = "rbxassetid://4155801252"      
					Colorpick.ImageColor3 = COL3RGB(255, 0, 0)      
					Colorpick.ZIndex = 3      

					ColorDrag.Name = "ColorDrag"      
					ColorDrag.Parent = Colorpick      
					ColorDrag.AnchorPoint = Vec2(0.5, 0.5)      
					ColorDrag.BackgroundColor3 = COL3RGB(255, 255, 255)      
					ColorDrag.BorderColor3 = COL3RGB(30, 30, 30)      
					ColorDrag.Size = UDIM2(0, 4, 0, 4)      
					ColorDrag.ZIndex = 3      

					Huepick.Name = "Huepick"      
					Huepick.Parent = Frame      
					Huepick.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Huepick.BorderColor3 = COL3RGB(30, 30, 30)      
					Huepick.ClipsDescendants = true      
					Huepick.Position = UDIM2(0, 10, 0, 10)      
					Huepick.Size = UDIM2(0, 20, 0, 150)      
					Huepick.AutoButtonColor = false      
					Huepick.Image = "rbxassetid://3641079629"      
					Huepick.ImageColor3 = COL3RGB(255, 0, 0)      
					Huepick.ImageTransparency = 1      
					Huepick.BackgroundTransparency = 0      
					Huepick.ZIndex = 3      

					local HueFrameGradient = INST("UIGradient")      
					HueFrameGradient.Rotation = 90      
					HueFrameGradient.Name = "HueFrameGradient"      
					HueFrameGradient.Parent = Huepick      
					HueFrameGradient.Color = ColorSequence.new {      
						ColorSequenceKeypoint.new(0.00, COL3RGB(255, 0, 0)),      
						ColorSequenceKeypoint.new(0.17, COL3RGB(255, 0, 255)),      
						ColorSequenceKeypoint.new(0.33, COL3RGB(0, 0, 255)),      
						ColorSequenceKeypoint.new(0.50, COL3RGB(0, 255, 255)),      
						ColorSequenceKeypoint.new(0.67, COL3RGB(0, 255, 0)),      
						ColorSequenceKeypoint.new(0.83, COL3RGB(255, 255, 0)),      
						ColorSequenceKeypoint.new(1.00, COL3RGB(255, 0, 0))      
					}	      

					Huedrag.Name = "Huedrag"      
					Huedrag.Parent = Huepick      
					Huedrag.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Huedrag.BorderColor3 = COL3RGB(30, 30, 30)      
					Huedrag.Size = UDIM2(1, 0, 0, 2)      
					Huedrag.ZIndex = 3      

					local Transpick = INST("ImageButton")      
					local Transcolor = INST("ImageLabel")      
					local Transdrag = INST("Frame")      

					Transpick.Name = "Transpick"      
					Transpick.Parent = Frame      
					Transpick.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Transpick.BorderColor3 = COL3RGB(30, 30, 30)      
					Transpick.Position = UDIM2(0, 10, 0, 167)      
					Transpick.Size = UDIM2(0, 180, 0, 15)      
					Transpick.AutoButtonColor = false      
					Transpick.Image = "rbxassetid://3887014957"      
					Transpick.ScaleType = Enum.ScaleType.Tile      
					Transpick.TileSize = UDIM2(0, 10, 0, 10)      
					Transpick.ZIndex = 3      

					Transcolor.Name = "Transcolor"      
					Transcolor.Parent = Transpick      
					Transcolor.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Transcolor.BackgroundTransparency = 1.000      
					Transcolor.Size = UDIM2(1, 0, 1, 0)      
					Transcolor.Image = "rbxassetid://3887017050"      
					Transcolor.ImageColor3 = COL3RGB(255, 0, 4)      
					Transcolor.ZIndex = 3      

					Transdrag.Name = "Transdrag"      
					Transdrag.Parent = Transcolor      
					Transdrag.BackgroundColor3 = COL3RGB(255, 255, 255)      
					Transdrag.BorderColor3 = COL3RGB(30, 30, 30)      
					Transdrag.Position = UDIM2(0, -1, 0, 0)      
					Transdrag.Size = UDIM2(0, 2, 1, 0)      
					Transdrag.ZIndex = 3      

					ColorP.MouseButton1Down:Connect(function()      
						Frame.Visible = not Frame.Visible      
					end)      
					local abc = false      
					local inCP = false      
					ColorP.MouseEnter:Connect(function()      
						abc = true      
					end)      
					ColorP.MouseLeave:Connect(function()      
						abc = false      
					end)      
					Frame.MouseEnter:Connect(function()      
						inCP = true      
					end)      
					Frame.MouseLeave:Connect(function()      
						inCP = false      
					end)      

					ColorH = (CLAMP(Huedrag.AbsolutePosition.Y-Huepick.AbsolutePosition.Y, 0, Huepick.AbsoluteSize.Y)/Huepick.AbsoluteSize.Y)      
					ColorS = 1-(CLAMP(ColorDrag.AbsolutePosition.X-Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X)      
					ColorV = 1-(CLAMP(ColorDrag.AbsolutePosition.Y-Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y)      

					if data.default and data.default.Color ~= nil then      
						ColorH, ColorS, ColorV = data.default.Color:ToHSV()      

						ColorH = CLAMP(ColorH,0,1)      
						ColorS = CLAMP(ColorS,0,1)      
						ColorV = CLAMP(ColorV,0,1)      
						ColorDrag.Position = UDIM2(1-ColorS,0,1-ColorV,0)      
						Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1)      

						Transcolor.ImageColor3 = COL3HSV(ColorH, 1, 1)      

						ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV)      
						Huedrag.Position = UDIM2(0, 0, 1-ColorH, -1)      
					end      
					if data.default and data.default.Transparency ~= nil then      
						Transdrag.Position = UDIM2(data.default.Transparency, -1, 0, 0)      
					end      
					local mouse = LocalPlayer:GetMouse()      
					game:GetService("UserInputService").InputBegan:Connect(function(input)      
						if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then      
							if not dragging and not abc and not inCP then      
								Frame.Visible = false      
							end      
						end      
					end)      

					local function updateColor()      
						local ColorX = (CLAMP(mouse.X - Colorpick.AbsolutePosition.X, 0, Colorpick.AbsoluteSize.X)/Colorpick.AbsoluteSize.X)      
						local ColorY = (CLAMP(mouse.Y - Colorpick.AbsolutePosition.Y, 0, Colorpick.AbsoluteSize.Y)/Colorpick.AbsoluteSize.Y)      
						ColorDrag.Position = UDIM2(ColorX, 0, ColorY, 0)      
						ColorS = 1-ColorX      
						ColorV = 1-ColorY      
						Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1)      
						ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV)      
						Transcolor.ImageColor3 = COL3HSV(ColorH, 1, 1)      
						values[tabname][sectorname][text] = Element.value      
						Element.value.Color = COL3HSV(ColorH, ColorS, ColorV)      
						callback(Element.value)      
					end      
					local function updateHue()      
						local y = CLAMP(mouse.Y - Huepick.AbsolutePosition.Y, 0, 148)      
						Huedrag.Position = UDIM2(0, 0, 0, y)      
						hue = y/148      
						ColorH = 1-hue      
						Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1)      
						Transcolor.ImageColor3 = COL3HSV(ColorH, 1, 1)      
						ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV)      
						values[tabname][sectorname][text] = Element.value      
						Element.value.Color = COL3HSV(ColorH, ColorS, ColorV)      
						callback(Element.value)      
					end      
					local function updateTrans()      
						local x = CLAMP(mouse.X - Transpick.AbsolutePosition.X, 0, 178)      
						Transdrag.Position = UDIM2(0, x, 0, 0)      
						Element.value.Transparency = (x/178)      
						values[tabname][sectorname][text] = Element.value      
						callback(Element.value)      
					end 
					Transpick.MouseButton1Down:Connect(function() 
						updateTrans() 
						moveconnection = mouse.Move:Connect(function() 
							updateTrans() 
						end) 
						releaseconnection = game:GetService("UserInputService").InputEnded:Connect(function(Mouse) 
							if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then 
								updateTrans() 
								moveconnection:Disconnect() 
								releaseconnection:Disconnect() 
							end 
						end) 
					end) 
					Colorpick.MouseButton1Down:Connect(function() 
						updateColor() 
						moveconnection = mouse.Move:Connect(function() 
							updateColor() 
						end) 
						releaseconnection = game:GetService("UserInputService").InputEnded:Connect(function(Mouse) 
							if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then 
								updateColor() 
								moveconnection:Disconnect() 
								releaseconnection:Disconnect() 
							end 
						end) 
					end) 
					Huepick.MouseButton1Down:Connect(function() 
						updateHue() 
						moveconnection = mouse.Move:Connect(function() 
							updateHue() 
						end) 
						releaseconnection = game:GetService("UserInputService").InputEnded:Connect(function(Mouse) 
							if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then 
								updateHue() 
								moveconnection:Disconnect() 
								releaseconnection:Disconnect() 
							end 
						end) 
					end) 

					Button.MouseButton1Down:Connect(function() 
						Element.value.Toggle = not Element.value.Toggle 
						update() 
						values[tabname][sectorname][text] = Element.value 
						callback(Element.value) 
					end) 
					if data.default then 
						if Element.value.Toggle then 
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(30, 115, 255)}) 
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(255, 255, 255)}) 
						else 
							tween = library:Tween(Color, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = COL3RGB(1, 1, 1)}) 
							library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)}) 
						end 
						values[tabname][sectorname][text] = Element.value 
					end 
					values[tabname][sectorname][text] = Element.value 
					function Element:SetValue(value) 
						Element.value = value 
						local duplicate = COL3(value.Color.R, value.Color.G, value.Color.B) 
						ColorH, ColorS, ColorV = duplicate:ToHSV() 
						ColorH = CLAMP(ColorH,0,1) 
						ColorS = CLAMP(ColorS,0,1) 
						ColorV = CLAMP(ColorV,0,1) 

						ColorDrag.Position = UDIM2(1-ColorS,0,1-ColorV,0) 
						Colorpick.ImageColor3 = COL3HSV(ColorH, 1, 1) 
						ColorP.BackgroundColor3 = COL3HSV(ColorH, ColorS, ColorV) 
						update() 
						Huedrag.Position = UDIM2(0, 0, 1-ColorH, -1) 
					end 
				elseif type == "TextBox" then 
					Section.Size = Section.Size + UDIM2(0,0,0,30) 
					Element.value = {Text = data.default and data.default.text or ""} 

					local Box = INST("Frame") 
					local TextBox = INST("TextBox") 

					Box.Name = "Box" 
					Box.Parent = Inner 
					Box.BackgroundColor3 = COL3RGB(255, 255, 255) 
					Box.BackgroundTransparency = 1.000 
					Box.Position = UDIM2(0, 0, 0.542059898, 0) 
					Box.Size = UDIM2(1, 0, 0, 30) 

					TextBox.Parent = Box 
					TextBox.BackgroundColor3 = COL3RGB(1, 1, 1) 
					TextBox.BorderColor3 = COL3RGB(30, 30, 30) 
					TextBox.Position = UDIM2(0.108303241, 0, 0.224465579, 0) 
					TextBox.Size = UDIM2(0, 175, 0, 20) 
					TextBox.Font = Enum.Font.SourceSans 
					TextBox.PlaceholderText = data.placeholder 
					TextBox.Text = Element.value.Text 
					TextBox.TextColor3 = COL3RGB(255, 255, 255) 
					TextBox.TextSize = 14.000 

					values[tabname][sectorname][text] = Element.value 

					TextBox:GetPropertyChangedSignal("Text"):Connect(function() 
						--if LEN(TextBox.Text) > 10 then 
						--    TextBox.Text = SUB(TextBox.Text, 1, 10) 
						--end
						Element.value.Text = TextBox.Text 
						values[tabname][sectorname][text] = Element.value 
						callback(Element.value) 
					end) 

					function Element:SetValue(value) 
						Element.value = value 
						values[tabname][sectorname][text] = Element.value 
						TextBox.Text = Element.value.Text 
					end 

				elseif type == "Dropdown" then 
					Section.Size = Section.Size + UDIM2(0,0,0,39) 
					Element.value = {Dropdown = data.options[1]} 

					local Dropdown = INST("Frame") 
					local Button = INST("TextButton") 
					local TextLabel = INST("TextLabel") 
					local Drop = INST("ScrollingFrame") 
					local Button_2 = INST("TextButton") 
					local TextLabel_2 = INST("TextLabel") 
					local UIListLayout = INST("UIListLayout") 
					local ImageLabel = INST("ImageLabel") 
					local TextLabel_3 = INST("TextLabel") 

					Dropdown.Name = "Dropdown" 
					Dropdown.Parent = Inner 
					Dropdown.BackgroundColor3 = COL3RGB(255, 255, 255) 
					Dropdown.BackgroundTransparency = 1.000 
					Dropdown.Position = UDIM2(0, 0, 0.255102038, 0) 
					Dropdown.Size = UDIM2(1, 0, 0, 39) 

					Button.Name = "Button" 
					Button.Parent = Dropdown 
					Button.BackgroundColor3 = COL3RGB(1, 1, 1) 
					Button.BorderColor3 = COL3RGB(30, 30, 30) 
					Button.Position = UDIM2(0, 30, 0, 16) 
					Button.Size = UDIM2(0, 175, 0, 17) 
					Button.AutoButtonColor = false 
					Button.Font = Enum.Font.SourceSans 
					Button.Text = "" 
					Button.TextColor3 = COL3RGB(0, 0, 0) 
					Button.TextSize = 14.000 

					TextLabel.Parent = Button 
					TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
					TextLabel.BackgroundTransparency = 1.000 
					TextLabel.BorderColor3 = COL3RGB(30, 30, 30) 
					TextLabel.Position = UDIM2(0, 5, 0, 0) 
					TextLabel.Size = UDIM2(-0.21714285, 208, 1, 0) 
					TextLabel.Font = Enum.Font.SourceSansSemibold 
					TextLabel.Text = Element.value.Dropdown 
					TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
					TextLabel.TextSize = 14.000 
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left 

					local abcd = TextLabel 

					Drop.Name = "Drop" 
					Drop.Parent = Button 
					Drop.Active = true 
					Drop.BackgroundColor3 = COL3RGB(1, 1, 1) 
					Drop.BorderColor3 = COL3RGB(30, 30, 30) 
					Drop.Position = UDIM2(0, 0, 1, 1) 
					Drop.Size = UDIM2(1, 0, 0, 20) 
					Drop.Visible = false 
					Drop.BottomImage = "http://www.roblox.com/asset/?id=6724808282" 
					Drop.CanvasSize = UDIM2(1, 1, 1, 1) 
					Drop.ScrollBarThickness = 4 
					Drop.TopImage = "http://www.roblox.com/asset/?id=6724808282" 
					Drop.MidImage = "http://www.roblox.com/asset/?id=6724808282" 
					Drop.AutomaticCanvasSize = "Y" 
					Drop.ZIndex = 5 
					Drop.ScrollBarImageColor3 = COL3RGB(30, 115, 255)

					UIListLayout.Parent = Drop 
					UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center 
					UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder 

					local num = #data.options 
					if num > 5 then 
						Drop.Size = UDIM2(1, 0, 0, 85) 
					else 
						Drop.Size = UDIM2(1, 0, 0, 17*num) 
					end 
					local first = true 
					for i,v in ipairs(data.options) do 
						do 
							local Button = INST("TextButton") 
							local TextLabel = INST("TextLabel") 

							Button.Name = v 
							Button.Parent = Drop 
							Button.BackgroundColor3 = COL3RGB(1, 1, 1) 
							Button.BorderColor3 = COL3RGB(30, 30, 30) 
							Button.Position = UDIM2(0, 30, 0, 16) 
							Button.Size = UDIM2(0, 175, 0, 17) 
							Button.AutoButtonColor = false 
							Button.Font = Enum.Font.SourceSans 
							Button.Text = "" 
							Button.TextColor3 = COL3RGB(0, 0, 0) 
							Button.TextSize = 14.000 
							Button.BorderSizePixel = 0 
							Button.ZIndex = 6 

							TextLabel.Parent = Button 
							TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
							TextLabel.BackgroundTransparency = 1.000 
							TextLabel.BorderColor3 = COL3RGB(30, 30, 30) 
							TextLabel.Position = UDIM2(0, 5, 0, -1) 
							TextLabel.Size = UDIM2(-0.21714285, 208, 1, 0) 
							TextLabel.Font = Enum.Font.SourceSansSemibold 
							TextLabel.Text = v 
							TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
							TextLabel.TextSize = 14.000 
							TextLabel.TextXAlignment = Enum.TextXAlignment.Left 
							TextLabel.ZIndex = 6 

							Button.MouseButton1Down:Connect(function() 
								Drop.Visible = false 
								Element.value.Dropdown = v 
								abcd.Text = v 
								values[tabname][sectorname][text] = Element.value 
								callback(Element.value) 
								Drop.CanvasPosition = Vec2(0,0) 
							end) 
							Button.MouseEnter:Connect(function() 
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 =  COL3RGB(30, 115, 255)}) 
							end) 
							Button.MouseLeave:Connect(function() 
								library:Tween(TextLabel, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 =  COL3RGB(200, 200, 200)}) 
							end) 

							first = false 
						end 
					end 

					function Element:SetValue(val) 
						Element.value = val 
						abcd.Text = val.Dropdown 
						values[tabname][sectorname][text] = Element.value 
						callback(val) 
					end 

					ImageLabel.Parent = Button 
					ImageLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
					ImageLabel.BackgroundTransparency = 1.000 
					ImageLabel.Position = UDIM2(0, 165, 0, 6) 
					ImageLabel.Size = UDIM2(0, 6, 0, 4) 
					ImageLabel.Image = "http://www.roblox.com/asset/?id=6724771531" 

					TextLabel_3.Parent = Dropdown 
					TextLabel_3.BackgroundColor3 = COL3RGB(255, 255, 255) 
					TextLabel_3.BackgroundTransparency = 1.000 
					TextLabel_3.Position = UDIM2(0, 32, 0, -1) 
					TextLabel_3.Size = UDIM2(0.111913361, 208, 0.382215232, 0) 
					TextLabel_3.Font = Enum.Font.SourceSansSemibold 
					TextLabel_3.Text = text 
					TextLabel_3.TextColor3 = COL3RGB(200, 200, 200) 
					TextLabel_3.TextSize = 14.000 
					TextLabel_3.TextXAlignment = Enum.TextXAlignment.Left 

					Button.MouseButton1Down:Connect(function() 
						Drop.Visible = not Drop.Visible 
						if not Drop.Visible then 
							Drop.CanvasPosition = Vec2(0,0) 
						end 
					end) 
					local indrop = false 
					local ind = false 
					Drop.MouseEnter:Connect(function() 
						indrop = true 
					end) 
					Drop.MouseLeave:Connect(function() 
						indrop = false 
					end) 
					Button.MouseEnter:Connect(function() 
						ind = true 
					end) 
					Button.MouseLeave:Connect(function() 
						ind = false 
					end) 
					game:GetService("UserInputService").InputBegan:Connect(function(input) 
						if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then 
							if Drop.Visible == true and not indrop and not ind then 
								Drop.Visible = false 
								Drop.CanvasPosition = Vec2(0,0) 
							end 
						end 
					end) 
					values[tabname][sectorname][text] = Element.value 
				elseif type == "Slider" then 

					Section.Size = Section.Size + UDIM2(0,0,0,25) 

					local Slider = INST("Frame") 
					local TextLabel = INST("TextLabel") 
					local Button = INST("TextButton") 
					local Frame = INST("Frame") 
					local UIGradient = INST("UIGradient") 
					local Value = INST("TextLabel") 

					Slider.Name = "Slider" 
					Slider.Parent = Inner 
					Slider.BackgroundColor3 = COL3RGB(255, 255, 255) 
					Slider.BackgroundTransparency = 1.000 
					Slider.Position = UDIM2(0, 0, 0.653061211, 0) 
					Slider.Size = UDIM2(1, 0, 0, 25) 

					TextLabel.Parent = Slider 
					TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
					TextLabel.BackgroundTransparency = 1.000 
					TextLabel.Position = UDIM2(0, 32, 0, -2) 
					TextLabel.Size = UDIM2(0, 100, 0, 15) 
					TextLabel.Font = Enum.Font.SourceSansSemibold 
					TextLabel.Text = text 
					TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
					TextLabel.TextSize = 14.000 
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left 

					Button.Name = "Button" 
					Button.Parent = Slider 
					Button.BackgroundColor3 = COL3RGB(10, 10, 10) 
					Button.BorderColor3 = COL3RGB(25, 25, 25) 
					Button.Position = UDIM2(0, 30, 0, 15) 
					Button.Size = UDIM2(0, 175, 0, 5) 
					Button.AutoButtonColor = false 
					Button.Font = Enum.Font.SourceSans 
					Button.Text = "" 
					Button.TextColor3 = COL3RGB(0, 0, 0) 
					Button.TextSize = 14.000 

					Frame.Parent = Button 
					Frame.BackgroundColor3 = COL3RGB(255, 255, 255) 
					Frame.BorderSizePixel = 0 
					Frame.Size = UDIM2(0.5, 0, 1, 0) 

					UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, COL3RGB(30, 115, 255)), ColorSequenceKeypoint.new(1, COL3RGB(30, 115, 255))} 
					UIGradient.Rotation = 90 
					UIGradient.Parent = Frame 

					Value.Name = "Value" 
					Value.Parent = Slider 
					Value.BackgroundColor3 = COL3RGB(255, 255, 255) 
					Value.BackgroundTransparency = 1.000 
					Value.Position = UDIM2(0, 150, 0, -1) 
					Value.Size = UDIM2(0, 55, 0, 15) 
					Value.Font = Enum.Font.SourceSansSemibold 
					Value.Text = "50" 
					Value.TextColor3 = COL3RGB(200, 200, 200) 
					Value.TextSize = 14.000 
					Value.TextXAlignment = Enum.TextXAlignment.Right 
					local min, max, default = data.min or 0, data.max or 100, data.default or 0 
					Element.value = {Slider = default} 

					function Element:SetValue(value) 
						Element.value = value 
						local a 
						if min > 0 then 
							a = ((Element.value.Slider - min)) / (max-min) 
						else 
							a = (Element.value.Slider-min)/(max-min) 
						end 
						Value.Text = Element.value.Slider 
						Frame.Size = UDIM2(a,0,1,0) 
						values[tabname][sectorname][text] = Element.value 
						callback(value) 
					end 
					local a 
					if min > 0 then 
						a = ((Element.value.Slider - min)) / (max-min) 
					else 
						a = (Element.value.Slider-min)/(max-min) 
					end 
					Value.Text = Element.value.Slider 
					Frame.Size = UDIM2(a,0,1,0) 
					values[tabname][sectorname][text] = Element.value 
					local uis = game:GetService("UserInputService") 
					local mouse = game.Players.LocalPlayer:GetMouse() 
					local val 
					Button.MouseButton1Down:Connect(function() 
						Frame.Size = UDIM2(0, CLAMP(mouse.X - Frame.AbsolutePosition.X, 0, 175), 0, 5) 
						val = FLOOR((((tonumber(max) - tonumber(min)) / 175) * Frame.AbsoluteSize.X) + tonumber(min)) or 0 
						Value.Text = val 
						Element.value.Slider = val 
						values[tabname][sectorname][text] = Element.value 
						callback(Element.value) 
						moveconnection = mouse.Move:Connect(function() 
							Frame.Size = UDIM2(0, CLAMP(mouse.X - Frame.AbsolutePosition.X, 0, 175), 0, 5) 
							val = FLOOR((((tonumber(max) - tonumber(min)) / 175) * Frame.AbsoluteSize.X) + tonumber(min)) 
							Value.Text = val 
							Element.value.Slider = val 
							values[tabname][sectorname][text] = Element.value 
							callback(Element.value) 
						end) 
						releaseconnection = uis.InputEnded:Connect(function(Mouse) 
							if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then 
								Frame.Size = UDIM2(0, CLAMP(mouse.X - Frame.AbsolutePosition.X, 0, 175), 0, 5) 
								val = FLOOR((((tonumber(max) - tonumber(min)) / 175) * Frame.AbsoluteSize.X) + tonumber(min)) 
								values[tabname][sectorname][text] = Element.value 
								callback(Element.value) 
								moveconnection:Disconnect() 
								releaseconnection:Disconnect() 
							end 
						end) 
					end) 
				elseif type == "Button" then 

					Section.Size = Section.Size + UDIM2(0,0,0,24) 
					local Button = INST("Frame") 
					local Button_2 = INST("TextButton") 
					local TextLabel = INST("TextLabel") 

					Button.Name = "Button" 
					Button.Parent = Inner 
					Button.BackgroundColor3 = COL3RGB(255, 255, 255) 
					Button.BackgroundTransparency = 1.000 
					Button.Position = UDIM2(0, 0, 0.236059487, 0) 
					Button.Size = UDIM2(1, 0, 0, 24) 

					Button_2.Name = "Button" 
					Button_2.Parent = Button 
					Button_2.BackgroundColor3 = COL3RGB(1, 1, 1) 
					Button_2.BorderColor3 = COL3RGB(30, 30, 30) 
					Button_2.Position = UDIM2(0, 30, 0.5, -9) 
					Button_2.Size = UDIM2(0, 175, 0, 18) 
					Button_2.AutoButtonColor = false 
					Button_2.Font = Enum.Font.SourceSans 
					Button_2.Text = "" 
					Button_2.TextColor3 = COL3RGB(0, 0, 0) 
					Button_2.TextSize = 14.000 

					TextLabel.Parent = Button_2 
					TextLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
					TextLabel.BackgroundTransparency = 1.000 
					TextLabel.BorderColor3 = COL3RGB(30, 30, 30) 
					TextLabel.Size = UDIM2(1, 0, 1, 0) 
					TextLabel.Font = Enum.Font.SourceSansSemibold 
					TextLabel.Text = text 
					TextLabel.TextColor3 = COL3RGB(200, 200, 200) 
					TextLabel.TextSize = 14.000 

					function Element:SetValue() 
					end 

					Button_2.MouseButton1Down:Connect(function() 
						TextLabel.TextColor3 = COL3RGB(30, 115, 255)
						library:Tween(TextLabel, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)}) 
						callback() 
					end) 
					Button_2.MouseEnter:Connect(function() 
						library:Tween(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(30, 115, 255)}) 
					end) 
					Button_2.MouseLeave:Connect(function() 
						library:Tween(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = COL3RGB(200, 200, 200)}) 
					end) 
				end 
				ConfigLoad:Connect(function(cfg) 
					pcall(function() 
						local fix = library:ConfigFix(cfg) 
						if fix[tabname][sectorname][text] ~= nil then 
							Element:SetValue(fix[tabname][sectorname][text]) 
						end 
					end) 
				end) 

				return Element 
			end 
			return Sector 
		end 

		return Tab 
	end 

	colgate.Parent = game.CoreGui 

	return menu 
end 



LocalPlayer = Players.LocalPlayer 
PlayerGui = LocalPlayer.PlayerGui 
Mouse = LocalPlayer:GetMouse() 
Camera = workspace.CurrentCamera 
ClientScript = LocalPlayer.PlayerGui.Client 
Client = getsenv(ClientScript) 

--SERVICE DUMP
UIS = game:GetService("UserInputService")
RS = game:GetService("RunService")

RenderStepped = RS.RenderStepped
IgnoreFolder = Instance.new("Folder", workspace)
Ignorezzzzzzzzzzzzzzz = {LocalPlayer.Character, IgnoreFolder}
RaycastParamzzzzzzzzzzzzzzz = RaycastParams.new()
RaycastParamzzzzzzzzzzzzzzz.FilterType = Enum.RaycastFilterType.Blacklist
RaycastParamzzzzzzzzzzzzzzz.FilterDescendantsInstances = Ignorezzzzzzzzzzzzzzz 
frames = 0
sfx = {}

ts = nil;
function unpacktbl(tbl, d)
	local rc = ""
	local d2 = d and d or 1
	if d and d-1>0 then
		for i=1,d-1,1 do
			rc = rc.."	"
		end
	end
	local str = "{"
	for i, v in pairs (tbl) do
		local K = [[

]]..rc.."	["..ts(i).."] = "..ts(v, d2+1)..","
		str = str..K
	end
	return str..[[

]]..rc.."}"
end
ts = function(v,d)
	if typeof(v) == "table" then
		return unpacktbl(v,d)
	elseif typeof(v) == "string" then
		local Sym1 = "'"
		local Sym2 = "'"
		if v:find(Sym1) then
			Sym1 = '"'
			Sym2 = '"'
			if v:find(Sym1) then
				Sym1 = '[['
				Sym2 = ']]'
			end
		end
		return Sym1..v..Sym2
    elseif typeof(v) == "Vector3" then
		return "("..ts(v.X)..","..ts(v.Y)..","..ts(v.Z)..")"
	end
	return tostring(v)
end
function average(tbl)
	local z = typeof(tbl[1]) == "Vector3" and Vector3.new() or typeof(tbl[1]) == "number" and 0
	for i, v in pairs (tbl) do
		z += v
	end
	return z/#tbl
end
function encode(str)
	local s = ""
	for i, v in pairs (str:split("")) do
		s = s..tostring(v:byte()).."/"
	end
	local split = s:split("")
	split[#split] = nil
	return table.concat(split)
end
function decode(str)
	local s = ""
	for i, v in pairs (str:split("/")) do
		s=s..string.char(tonumber(v))
	end
	return s
end
function scramble(str, specialsplit)
	local t = {}
	local t2 = {}
	local split = str:split(specialsplit or "")
	for i, v in pairs (split) do
		local n = math.random(1,#split)
		if table.find(t2, n) then
			repeat
				n = math.random(1,#split)
			until not table.find(t2, n)
		end
		t[n] = v..(specialsplit or "")
		t2[#t2+1] = n
	end
	local t3 = table.concat(t)
	if specialsplit then
		t3 = t3:split("")
		t3[#t3] = nil
		t3 = table.concat(t3)
	end
	return t3
end
function isvisible_eq_high(Parent)
	return -((#Camera:GetPartsObscuringTarget({Parent.Position, Camera.CFrame.p}, Ignorezzzzzzzzzzzzzzz )+((Parent.Position - Camera.CFrame.p).Magnitude/100))*5)
end
function isvisible_eq_vol(Parent)
	return 1/(#Camera:GetPartsObscuringTarget({Parent.Position, Camera.CFrame.p}, Ignorezzzzzzzzzzzzzzz )/2)
end
function isvisible_eq_distort(Parent)
	return math.clamp((isvisible_eq_vol(Parent)+(1/((Parent.Position - Camera.CFrame.p).Magnitude/2))), 0, 0.4)
end
function createsfx(Parent, id, pitch, looping)
	local Sound = Instance.new("Sound", Parent)
	Sound.SoundId = id
	Sound.Volume = 0.5
	Sound.PlaybackSpeed = pitch
	Sound.Looped = looping or false
	Sound.Playing = true
	local Eq = Instance.new("EqualizerSoundEffect", Sound)
	Eq.Name = "Eq"
	local Distortion = Instance.new("DistortionSoundEffect", Sound)
	Distortion.Name = "Distortion"
	local EqFx = isvisible_eq_high(Parent)*4
	library:Tween(Eq, TweenInfo.new(0.25), {HighGain = EqFx,MidGain = average({EqFx, -EqFx}),LowGain = -EqFx})
	library:Tween(Distortion, TweenInfo.new(0.35), {Level = isvisible_eq_distort(Parent)/10})
	library:Tween(Sound, TweenInfo.new(0.25), {Volume = isvisible_eq_vol(Parent)})
	local n = #sfx+1
	sfx[n] = Sound
	if not looping then
		coroutine.wrap(function()
			task.wait(Sound.TimeLength + 0.5)
			Parent:Destroy()
			sfx[n] = nil
		end)()
	end
	return Sound
end
function managesfx(sound, i)
	local Parent = sound.Parent
	local Eq = sound.Eq
	local Distortion = sound.Distortion
	local EqFx = isvisible_eq_high(Parent)*2
	library:Tween(Eq, TweenInfo.new(0.25), {HighGain = EqFx/2,MidGain = average({EqFx, -EqFx/2}),LowGain = -EqFx})
	library:Tween(Distortion, TweenInfo.new(0.35), {Level = isvisible_eq_distort(Parent)/10})
	library:Tween(sound, TweenInfo.new(0.25), {Volume = isvisible_eq_vol(Parent)})
	coroutine.wrap(function()
		task.wait(sound.TimeLength/1.5)
		table.remove(sfx, i)
	end)()
end
function sfxmanager()
	if math.floor(frames/10) ~= frames/10 then
		return
	end
	for i, v in pairs (sfx) do
		if #v:GetChildren() >= 2 then
			managesfx(v, i)
		end
	end
end
function Lightning(Position, length, color)
	local lastlightning = nil
	for i=1,length,1 do
		if lastlightning then
			local Position1 = (lastlightning.CFrame * CFrame.new(0,0,-lastlightning.Size.Z/2)).Position
			lastlightning = Instance.new("Part", lastlightning)
			local Pos = Position1 + Vector3.new(math.random(-10,10), math.random(10,25), math.random(-10,10))
			lastlightning.CFrame = CFrame.new(Position1, Pos)*CFrame.new(0,0,-(Pos-Position1).Magnitude/2)
			lastlightning.Size = Vector3.new(0.5,0.5,(Pos-Position1).Magnitude)
			lastlightning.Color = Color3.new(math.clamp(color.R+0.5,0,1),math.clamp(color.G+0.5,0,1),math.clamp(color.B+0.5,0,1))
			lastlightning.Transparency = 0.5
			lastlightning.Material = "Neon"
			lastlightning.Anchored = true
			lastlightning.CanCollide = false
			lastlightning.CanQuery = false
			lastlightning.CanTouch = false
			if math.random(1,5) == 5 then
				Lightning(Pos, length-i, color)
			end
			local outerlightning = Instance.new("Part", lastlightning)
			outerlightning.CFrame = CFrame.new(Position1, Pos)*CFrame.new(0,0,-(Pos-Position1).Magnitude/2)
			outerlightning.Size = Vector3.new(1,1,(Pos-Position1).Magnitude)
			outerlightning.Color = Color3.new(math.clamp(color.R+0.75,0,1),math.clamp(color.G+0.75,0,1),math.clamp(color.B+0.75,0,1))
			outerlightning.Transparency = 0.75
			outerlightning.Material = "Neon"
			outerlightning.Anchored = true
			outerlightning.CanCollide = false
			outerlightning.CanQuery = false
			outerlightning.CanTouch = false
			local LightFX = Instance.new("PointLight", lastlightning)
			LightFX.Color = Color3.new(math.clamp(color.R+0.85,0,1),math.clamp(color.G+0.85,0,1),math.clamp(color.B+0.85,0,1))
			LightFX.Brightness = 10
			LightFX.Shadows = true
			LightFX.Range = 32
			coroutine.wrap(function()
				library:Tween(lastlightning, TweenInfo.new(1), {Transparency = 1, Color = color})
				library:Tween(LightFX, TweenInfo.new(1.5), {Brightness = 1, Range = 0, Color = Color3.new(math.clamp(color.R+0.5,0,1),math.clamp(color.G+0.5,0,1),math.clamp(color.B+0.5,0,1))})
				library:Tween(outerlightning, TweenInfo.new(1), {Transparency = 1, Color = Color3.new(math.clamp(color.R+0.5,0,1),math.clamp(color.G+0.5,0,1),math.clamp(color.B+0.5,0,1))})
				task.wait(5)
				outerlightning.Parent:Destroy()
			end)()
		else
			lastlightning = Instance.new("Part", IgnoreFolder)
			local Pos = Position + Vector3.new(math.random(-10,10), math.random(10,25), math.random(-10,10))
			lastlightning.CFrame = CFrame.new(Position, Pos)*CFrame.new(0,0,-(Pos-Position).Magnitude/2)
			lastlightning.Size = Vector3.new(0.5,0.5,(Pos-Position).Magnitude)
			lastlightning.Color = Color3.new(math.clamp(color.R+0.5,0,1),math.clamp(color.G+0.5,0,1),math.clamp(color.B+0.5,0,1))
			lastlightning.Transparency = 0.5
			lastlightning.Material = "Neon"
			lastlightning.Anchored = true
			lastlightning.CanCollide = false
			lastlightning.CanQuery = false
			lastlightning.CanTouch = false
			local outerlightning = Instance.new("Part", lastlightning)
			outerlightning.CFrame = CFrame.new(Pos, Position)*CFrame.new(0,0,-(Pos-Position).Magnitude/2)
			outerlightning.Size = Vector3.new(1,1,(Pos-Position).Magnitude)
			outerlightning.Color = Color3.new(math.clamp(color.R+0.5,0,1),math.clamp(color.G+0.5,0,1),math.clamp(color.B+0.5,0,1))
			outerlightning.Transparency = 0.75
			outerlightning.Material = "Neon"
			outerlightning.Anchored = true
			outerlightning.CanCollide = false
			outerlightning.CanQuery = false
			outerlightning.CanTouch = false
			local LightFX = Instance.new("PointLight", lastlightning)
			LightFX.Color = Color3.new(math.clamp(color.R+0.85,0,1),math.clamp(color.G+0.85,0,1),math.clamp(color.B+0.85,0,1))
			LightFX.Brightness = 10
			LightFX.Shadows = true
			LightFX.Range = 32
			local SoundPart = Instance.new("Part", IgnoreFolder)
			SoundPart.Size = Vector3.new(1,1,1)
			SoundPart.Position = Position+Vector3.new(0,SoundPart.Size.Y,0)
			SoundPart.Transparency = 1
			SoundPart.Anchored = true
			SoundPart.CanCollide = false
			SoundPart.CanQuery = false
			SoundPart.CanTouch = false
			local Sound = createsfx(SoundPart, "rbxassetid://6458307118", 1)
			coroutine.wrap(function()	
				library:Tween(lastlightning, TweenInfo.new(1), {Transparency = 1, Color = color})
				library:Tween(LightFX, TweenInfo.new(1.5), {Brightness = 1, Range = 0, Color = Color3.new(math.clamp(color.R+0.5,0,1),math.clamp(color.G+0.5,0,1),math.clamp(color.B+0.5,0,1))})
				library:Tween(outerlightning, TweenInfo.new(1), {Transparency = 1, Color = Color3.new(math.clamp(color.R+0.5,0,1),math.clamp(color.G+0.5,0,1),math.clamp(color.B+0.5,0,1))})
				task.wait(5)
				outerlightning.Parent:Destroy()
			end)()
		end
	end
end

repeat RunService.RenderStepped:Wait() until game:IsLoaded() 

Crosshairs = PlayerGui.GUI.Crosshairs 
Crosshair = PlayerGui.GUI.Crosshairs.Crosshair 
oldcreatebullethole = Client.createbullethole 
LGlove, RGlove, LSleeve, RSleeve, RArm, LArm = nil,nil,nil,nil,nil,nil
WeaponObj = {} 
SelfObj = {} 
Viewmodels =  ReplicatedStorage.Viewmodels 
Weapons =  ReplicatedStorage.Weapons 
tableofallweapons = nil
ViewmodelOffset = CF(0,0,0) 
Smokes = {} 
Mollies = {} 
RayIgnore = workspace.Ray_Ignore 
RageTarget = nil
GetIcon = require(game.ReplicatedStorage.GetIcon) 
BodyVelocity = INST("BodyVelocity") 
BodyVelocity.MaxForce = Vec3(HUGE, 0, HUGE) 
fakeduckfolder = Instance.new("Folder", RayIgnore )
fakeduckfolder.Name = "fakeduckfolderfuckoff"
vposfolder = Instance.new("Folder", RayIgnore )
vposfolder.Name = "vposfolder2y85"
FakelagFolder = INST("Folder", RayIgnore ) 
FakelagFolder.Name = "Fakelag" 
autopeekFolder = INST("Folder", RayIgnore ) 
autopeekFolder.Name = "autopeekFolder"
attachmentmanager = INST("Part", RayIgnore )
attachmentmanager.Anchored = true
attachmentmanager.CanCollide = false
attachmentmanager.CanQuery = false
attachmentmanager.Size = Vector3.new()
attachmentmanager.Position = Vector3.new()
attachmentmanager.Transparency = 1
Collision = {Camera, workspace.Ray_Ignore, workspace.Debris} 
FakeAnim = INST("Animation", workspace) 
FakeAnim.AnimationId = "rbxassetid://0" 
Gloves = ReplicatedStorage.Gloves 
if Gloves:FindFirstChild("ImageLabel") then 
	Gloves.ImageLabel:Destroy() 
end 
GloveModels = Gloves.Models 
Multipliers = { 
	["Head"] = 4, 
	["FakeHead"] = 4, 
	["HeadHB"] = 4, 
	["UpperTorso"] = 1, 
	["LowerTorso"] = 1.25, 
	["LeftUpperArm"] = 1, 
	["LeftLowerArm"] = 1, 
	["LeftHand"] = 1, 
	["RightUpperArm"] = 1, 
	["RightLowerArm"] = 1, 
	["RightHand"] = 1, 
	["LeftUpperLeg"] = 0.75, 
	["LeftLowerLeg"] = 0.75, 
	["LeftFoot"] = 0.75, 
	["RightUpperLeg"] = 0.75, 
	["RightLowerLeg"] = 0.75, 
	["RightFoot"] = 0.75, 
} 
ChamItems = {} 
Skyboxes = { 
	["nebula"] = { 
		SkyboxLf = "rbxassetid://159454286", 
		SkyboxBk = "rbxassetid://159454299", 
		SkyboxDn = "rbxassetid://159454296", 
		SkyboxFt = "rbxassetid://159454293", 
		SkyboxLf = "rbxassetid://159454286", 
		SkyboxRt = "rbxassetid://159454300", 
		SkyboxUp = "rbxassetid://159454288", 
	}, 
	["vaporwave"] = { 
		SkyboxLf = "rbxassetid://1417494402", 
		SkyboxBk = "rbxassetid://1417494030", 
		SkyboxDn = "rbxassetid://1417494146", 
		SkyboxFt = "rbxassetid://1417494253", 
		SkyboxLf = "rbxassetid://1417494402", 
		SkyboxRt = "rbxassetid://1417494499", 
		SkyboxUp = "rbxassetid://1417494643", 
	}, 
	["clouds"] = { 
		SkyboxLf = "rbxassetid://570557620", 
		SkyboxBk = "rbxassetid://570557514", 
		SkyboxDn = "rbxassetid://570557775", 
		SkyboxFt = "rbxassetid://570557559", 
		SkyboxLf = "rbxassetid://570557620", 
		SkyboxRt = "rbxassetid://570557672", 
		SkyboxUp = "rbxassetid://570557727", 
	}, 
	["dn"] = { 
		SkyboxLf = "rbxassetid://264909758", 
		SkyboxBk = "rbxassetid://264908339", 
		SkyboxDn = "rbxassetid://264907909", 
		SkyboxFt = "rbxassetid://264909420", 
		SkyboxLf = "rbxassetid://264909758", 
		SkyboxRt = "rbxassetid://264908886", 
		SkyboxUp = "rbxassetid://264907379", 
	}, 
	['solid black']= {
		SkyboxLf = "rbxassetid://50282196",
		SkyboxBk = "rbxassetid://50282196",
		SkyboxDn = "rbxassetid://50282196",
		SkyboxFt = "rbxassetid://50282196",
		SkyboxLf = "rbxassetid://50282196",
		SkyboxRt = "rbxassetid://50282196",
		SkyboxUp = "rbxassetid://50282196",
	},
} 
NewScope = nil
do 
	local ScreenGui = INST("ScreenGui") 
	local Frame = INST("Frame") 
	local Frame_2 = INST("Frame") 

	ScreenGui.Enabled = false 
	ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global 
	ScreenGui.IgnoreGuiInset = true 

	Frame.Parent = ScreenGui 
	Frame.BackgroundColor3 = COL3RGB(0, 0, 0) 
	Frame.BorderSizePixel = 0 
	Frame.Position = UDIM2(0, 0, 0.5, 0) 
	Frame.Size = UDIM2(1, 0, 0, 1) 

	Frame_2.Parent = ScreenGui 
	Frame_2.BackgroundColor3 = COL3RGB(0, 0, 0) 
	Frame_2.BorderSizePixel = 0 
	Frame_2.Position = UDIM2(0.5, 0, 0, 0) 
	Frame_2.Size = UDIM2(0, 1, 1, 0) 

	ScreenGui.Parent = game.CoreGui 

	NewScope = ScreenGui 
end 
oldSkybox = nil

function VectorRGB(RGB) 
	return Vec3(RGB.R, RGB.G, RGB.B) 
end 
function new(name, prop) 
	local obj = INST(name) 
	for i,v in pairs(prop) do 
		if i ~= "Parent" then 
			obj[i] = v 
		end 
	end 
	if prop["Parent"] ~= nil then 
		obj.Parent = prop["Parent"] 
	end 
end 
function UpdateAccessory(Accessory) 
	Accessory.Material = values.visuals.effects["accessory material"].Dropdown == "Smooth" and "SmoothPlastic" or values.visuals.effects["accessory material"].Dropdown == "Flat" and "Neon" or values.visuals.effects["accessory material"].Dropdown == "Glass" and "Glass" or "ForceField" 
	Accessory.Mesh.VertexColor = VectorRGB(values.visuals.effects["accessory chams"].Color) 
	Accessory.Color = values.visuals.effects["accessory chams"].Color 
	Accessory.Transparency = values.visuals.effects["accessory chams"].Transparency 
	if values.visuals.effects["accessory material"].Dropdown ~= "ForceField" then 
		Accessory.Mesh.TextureId = "" 
	else 
		Accessory.Mesh.TextureId = Accessory.StringValue.Value 
	end 
end 
function ReverseAccessory(Accessory) 
	Accessory.Material = "SmoothPlastic" 
	Accessory.Mesh.VertexColor = Vec3(1,1,1) 
	Accessory.Mesh.TextureId = Accessory.StringValue.Value 
	Accessory.Transparency = 0 
end 
function UpdateWeapon(obj) 
	local selected = values.visuals.effects["weapon material"].Dropdown 

	if obj:IsA("MeshPart") then obj.TextureID = "" end 
	if obj:IsA("Part") and obj:FindFirstChild("Mesh") and not obj:IsA("BlockMesh") then 
		obj.Mesh.VertexColor = VectorRGB(values.visuals.effects["weapon chams"].Color) 
		if selected == "Smooth" or selected == "Glass" then 
			obj.Mesh.TextureId = "" 
		else 
			pcall(function() 
				obj.Mesh.TextureId = obj.Mesh.OriginalTexture.Value 
				obj.Mesh.TextureID = obj.Mesh.OriginalTexture.Value 
			end) 
		end 
	end 
	obj.Color = values.visuals.effects["weapon chams"].Color 
	obj.Material = selected == "Smooth" and "SmoothPlastic" or selected == "Flat" and "Neon" or selected == "ForceField" and "ForceField" or "Glass" 
	obj.Reflectance = values.visuals.effects["reflectance"].Slider/10 
	obj.Transparency = values.visuals.effects["weapon chams"].Transparency 
end 
Skins = ReplicatedStorage.Skins 
function MapSkin(Gun, Skin, CustomSkin) 
	if CustomSkin ~= nil then 
		for _,Data in pairs(CustomSkin) do 
			local Obj = Camera.Arms:FindFirstChild(Data.Name) 
			if Obj ~= nil and Obj.Transparency ~= 1 then 
				Obj.TextureId = Data.Value 
			end 
		end 
	else 
		local SkinData = Skins:FindFirstChild(Gun):FindFirstChild(Skin) 
		if not SkinData:FindFirstChild("Animated") then 
			for _,Data in pairs(SkinData:GetChildren()) do 
				local Obj = Camera.Arms:FindFirstChild(Data.Name) 
				if Obj ~= nil and Obj.Transparency ~= 1 then 
					if Obj:FindFirstChild("Mesh") then 
						Obj.Mesh.TextureId = v.Value 
					elseif not Obj:FindFirstChild("Mesh") then 
						Obj.TextureID = Data.Value 
					end 
				end 
			end 
		end 
	end 
end 
function ChangeCharacter(NewCharacter) 
	for _,Part in pairs (LocalPlayer.Character:GetChildren()) do 
		if Part:IsA("Accessory") then 
			Part:Destroy() 
		end 
		if Part:IsA("BasePart") then 
			if NewCharacter:FindFirstChild(Part.Name) then 
				Part.Color = NewCharacter:FindFirstChild(Part.Name).Color 
				Part.Transparency = NewCharacter:FindFirstChild(Part.Name).Transparency 
			end 
			if Part.Name == "FakeHead" then 
				Part.Color = NewCharacter:FindFirstChild("Head").Color 
				Part.Transparency = NewCharacter:FindFirstChild("Head").Transparency 
			end 
		end 

		if (Part.Name == "Head" or Part.Name == "FakeHead") and Part:FindFirstChildOfClass("Decal") and NewCharacter.Head:FindFirstChildOfClass("Decal") then 
			Part:FindFirstChildOfClass("Decal").Texture = NewCharacter.Head:FindFirstChildOfClass("Decal").Texture 
		end 
	end 

	if NewCharacter:FindFirstChildOfClass("Shirt") then 
		if LocalPlayer.Character:FindFirstChildOfClass("Shirt") then 
			LocalPlayer.Character:FindFirstChildOfClass("Shirt"):Destroy() 
		end 
		local Clone = NewCharacter:FindFirstChildOfClass("Shirt"):Clone() 
		Clone.Parent = LocalPlayer.Character 
	end 

	if NewCharacter:FindFirstChildOfClass("Pants") then 
		if LocalPlayer.Character:FindFirstChildOfClass("Pants") then 
			LocalPlayer.Character:FindFirstChildOfClass("Pants"):Destroy() 
		end 
		local Clone = NewCharacter:FindFirstChildOfClass("Pants"):Clone() 
		Clone.Parent = LocalPlayer.Character 
	end 

	for _,Part in pairs (NewCharacter:GetChildren()) do 
		if Part:IsA("Accessory") then 
			local Clone = Part:Clone() 
			for _,Weld in pairs (Clone.Handle:GetChildren()) do 
				if Weld:IsA("Weld") and Weld.Part1 ~= nil then 
					Weld.Part1 = LocalPlayer.Character[Weld.Part1.Name] 
				end 
			end 
			Clone.Parent = LocalPlayer.Character 
		end 
	end 

	if LocalPlayer.Character:FindFirstChildOfClass("Shirt") then 
		local String = INST("StringValue") 
		String.Name = "OriginalTexture" 
		String.Value = LocalPlayer.Character:FindFirstChildOfClass("Shirt").ShirtTemplate 
		String.Parent = LocalPlayer.Character:FindFirstChildOfClass("Shirt") 

		if TBLFIND(values.visuals.effects.removals.Jumbobox, "clothes") then 
			LocalPlayer.Character:FindFirstChildOfClass("Shirt").ShirtTemplate = "" 
		end 
	end 
	if LocalPlayer.Character:FindFirstChildOfClass("Pants") then 
		local String = INST("StringValue") 
		String.Name = "OriginalTexture" 
		String.Value = LocalPlayer.Character:FindFirstChildOfClass("Pants").PantsTemplate 
		String.Parent = LocalPlayer.Character:FindFirstChildOfClass("Pants") 

		if TBLFIND(values.visuals.effects.removals.Jumbobox, "clothes") then 
			LocalPlayer.Character:FindFirstChildOfClass("Pants").PantsTemplate = "" 
		end 
	end 
	for i,v in pairs(LocalPlayer.Character:GetChildren()) do 
		if v:IsA("BasePart") and v.Transparency ~= 1 then 
			SelfObj[#SelfObj+1] = (v) 
			local Color = INST("Color3Value") 
			Color.Name = "OriginalColor" 
			Color.Value = v.Color 
			Color.Parent = v 

			local String = INST("StringValue") 
			String.Name = "OriginalMaterial" 
			String.Value = v.Material.Name 
			String.Parent = v 
		elseif v:IsA("Accessory") and v.Handle.Transparency ~= 1 then 
			SelfObj[#SelfObj+1] = (v.Handle) 
			local Color = INST("Color3Value") 
			Color.Name = "OriginalColor" 
			Color.Value = v.Handle.Color 
			Color.Parent = v.Handle 

			local String = INST("StringValue") 
			String.Name = "OriginalMaterial" 
			String.Value = v.Handle.Material.Name 
			String.Parent = v.Handle 
		end 
	end 

	if values.visuals.self["self chams"].Toggle then 
		for _,obj in pairs(SelfObj) do 
			if obj.Parent ~= nil then 
				obj.Material = values.visuals.self["self chams material"].Dropdown 
				obj.Color = values.visuals.self["self chams"].Color 
			end 
		end 
	end 
end 
function GetDeg(pos1, pos2) 
	local start = pos1.LookVector 
	local vector = CF(pos1.Position, pos2).LookVector 
	local angle = ACOS(start:Dot(vector)) 
	local deg = DEG(angle) 
	return deg 
end 
P = game.CoreGui
SG2 = Instance.new("ScreenGui", P)
SG2.ResetOnSpawn = false
SG2.ZIndexBehavior = Enum.ZIndexBehavior.Global
SG2.DisplayOrder = 4096
F2 = Instance.new("Frame", SG2)
F2.Position = UDim2.new(0,5,0,0)
F2.Size = UDim2.new(0,500,0,750)
F2.BackgroundTransparency = 1
ListLayout = Instance.new("UIListLayout", F2)
ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
ListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
function CreateHitElement(text, col)
	if text == nil or typeof(text) ~= "string" then return end
	local TL2 = Instance.new("TextLabel", F2)
	TL2.RichText = true
	TL2.TextXAlignment = Enum.TextXAlignment.Left
	TL2.TextYAlignment = Enum.TextYAlignment.Center
	TL2.BorderSizePixel = 0
	TL2.BackgroundColor3 = Color3.new(1,1,1)
	TL2.BackgroundTransparency = 0.5
	TL2.AutomaticSize = Enum.AutomaticSize.X
	TL2.TextColor3 = col
	TL2.Position = UDim2.new(0,5,0,5)
	TL2.Size = UDim2.new(0,0,0,1)
	TL2.Text = ""
	TL2.TextScaled = true
	local Line = Instance.new("Frame", TL2)
	Line.Position = UDim2.new(0,0,0,-5)
	Line.Size = UDim2.new(1,0,1,5)
	Line.BackgroundColor3 = Color3.new(0,0,0)
	Line.BorderSizePixel = 0
	local Line2 = Instance.new("Frame", TL2)
	Line2.Position = UDim2.new(0,-5,0,-5)
	Line2.Size = UDim2.new(0,0,1,0)
	Line2.BackgroundColor3 = Color3.new(0,0,0)
	Line2.BorderSizePixel = 0
	coroutine.wrap(function()
		library:Tween(Line, TweenInfo.new(0.5), {Size = UDim2.new(1,0,0,5), BackgroundColor3 = col})
		library:Tween(Line2, TweenInfo.new(0.5), {Size = UDim2.new(0,5,1,5), BackgroundColor3 = col})
		library:Tween(TL2, TweenInfo.new(0.2), {Size = UDim2.new(0,250,0,25)})
		task.wait(0.35)
		library:Tween(TL2, TweenInfo.new(0.2), {Text = text, BackgroundColor3 = Color3.new(0, 0, 0)})
		task.wait(0.1)
		library:Tween(TL2, TweenInfo.new(0.5), {Position = UDim2.new(0,5,0,0)})
		library:Tween(Line, TweenInfo.new(0.5), {Position = UDim2.new(1,5,0,0),Size = UDim2.new(0,5,0,5)})
		library:Tween(Line2, TweenInfo.new(0.5), {Position = UDim2.new(0,-5,0,0),Size = UDim2.new(0,5,1,0)})
		task.wait(1)
		library:Tween(Line, TweenInfo.new(0.5), {Position = UDim2.new(1,5,0,0),Size = UDim2.new(0,5,1,0)})
		task.wait(1)
		library:Tween(Line, TweenInfo.new(0.5), {Position = UDim2.new(0,0,0,0),Size = UDim2.new(1,0,1,0), BackgroundColor3 = Color3.new(0,0,0)})
		task.wait(0.6)
		library:Tween(TL2, TweenInfo.new(0.4), {Size = UDim2.new(0,0,0,0)})
		task.wait(0.3)
		library:Tween(TL2, TweenInfo.new(0.4), {Position = UDim2.new(0,0,0,-55)})
		task.wait(0.5)
		TL2:Destroy()
	end)()
end
Ping = game.Stats.PerformanceStats.Ping:GetValue() 

for i,v in pairs(Viewmodels:GetChildren()) do 
	if v:FindFirstChild("HumanoidRootPart") and v.HumanoidRootPart.Transparency ~= 1 then 
		v.HumanoidRootPart.Transparency = 1 
	end 
end 

Models = game:GetObjects("rbxassetid://7285197035")[1] 
repeat wait() until Models ~= nil 
ChrModels = game:GetObjects("rbxassetid://7642937303")[1] 
repeat wait() until ChrModels ~= nil 


AllKnives = { 
	"CT Knife", 
	"T Knife", 
	"Banana", 
	"Bayonet", 
	"Bearded Axe", 
	"Butterfly Knife", 
	"Cleaver", 
	"Crowbar", 
	"Falchion Knife", 
	"Flip Knife", 
	"Gut Knife", 
	"Huntsman Knife", 
	"Karambit", 
	"Sickle", 
} 

AllGloves = {} 


for _,fldr in pairs(Gloves:GetChildren()) do 
	if fldr ~= GloveModels and fldr.Name ~= "Racer" then 
		AllGloves[fldr.Name] = {} 
		for _2,modl in pairs(fldr:GetChildren()) do 
			AllGloves[fldr.Name][#AllGloves[fldr.Name]+1] = (modl.Name) 
		end 
	end 
end 

for i,v in pairs(Models.Knives:GetChildren()) do 
	AllKnives[#AllKnives+1] = (v.Name) 
end 

AllSkins = {} 
AllWeapons = {} 
AllCharacters = {} 

for i,v in pairs(ChrModels:GetChildren()) do 
	AllCharacters[#AllCharacters+1] = (v.Name) 
end 

skins = { 
	{["Weapon"] = "AWP", ["SkinName"] = "Bot", ["Skin"] = {["Scope"] = "6572594838", ["Handle"] = "6572594077"}} 
} 

for _,skin in pairs (skins) do 
	local Folder = INST("Folder") 
	Folder.Name = skin["SkinName"] 
	Folder.Parent = Skins[skin["Weapon"] ] 

	for _,model in pairs (skin["Skin"]) do 
		local val = INST("StringValue") 
		val.Name = _ 
		val.Value = "rbxassetid://"..model 
		val.Parent = Folder 
	end 
end 

for i,v in pairs(Skins:GetChildren()) do 
	AllWeapons[#AllWeapons+1] = (v.Name) 
end 

TBLSORT(AllWeapons, function(a,b) 
	return a < b 
end) 

for i,v in ipairs(AllWeapons) do 
	AllSkins[v] = {} 
	AllSkins[v][#AllSkins[v]+1] = ("Inventory") 
	for _,v2 in pairs(Skins[v]:GetChildren()) do 
		if not v2:FindFirstChild("Animated") then 
			AllSkins[v][#AllSkins[v]+1] = (v2.Name) 
		end 
	end 
end 

makefolder("colgatelua") 

allluas = {} 

for _,lua in pairs(listfiles("colgatelua")) do 
	local luaname = GSUB(lua, "colgatelua\\", "") 
	allluas[#allluas+1] = (luaname) 
end 

RunService.RenderStepped:Wait() 

gui = library:New("colgatesense |") 
legit = gui:Tab("legit") 
rage = gui:Tab("rage") 
visuals = gui:Tab("visuals") 
misc = gui:Tab("misc") 
skins = gui:Tab("skins") 
luas = gui:Tab("luas") 

getgenv().api = {} 
api.newtab = function(name) 
	return gui:Tab(name) 
end 
api.newsection = function(tab, name, side) 
	return tab:Sector(name, side) 
end 
api.newelement = function(section, type, name, data, callback) 
	section:Element(type, name, data, callback) 
end 


luascripts = luas:Sector("lua scripts", "Left") 
luascripts:Element("Scroll", "lua", {options = allluas, Amount = 5}) 
luascripts:Element("Button", "load", {}, function() 
	loadstring(readfile("colgatelua\\"..values.luas["lua scripts"].lua.Scroll))() 
end) 
luascripts:Element("Button", "Watermark", nil, function()
	local water = loadstring(game:HttpGet'https://raw.githubusercontent.com/CatzCode/PikaHub/main/Libraries/UI/bruh.lua')()
	water:CreateWatermark("Colgatesense | Version 3.22.11.03 | ".. game.Players.LocalPlayer.Name..'')
	water.theme.accentcolor = Color3.fromRGB(0, 0, 0)
	water.theme.accentcolor2 = Color3.fromRGB(0, 0, 0)
	water.theme.topheight = 45
	water.theme.TextColor = Color3.fromRGB(0, 0, 0)
end)


knife = skins:Sector("knife", "Left") 
knife:Element("Toggle", "knife changer") 
knife:Element("Scroll", "model", {options = AllKnives, Amount = 15}) 

glove = skins:Sector("glove", "Left") 
glove:Element("Toggle", "glove changer") 
glove:Element("ScrollDrop", "model", {options = AllGloves, Amount = 9}) 

skin = skins:Sector("skins", "Right") 
skin:Element("Toggle", "skin changer") 
skin:Element("ScrollDrop", "skin", {options = AllSkins, Amount = 15, alphabet = true}) 

characters = skins:Sector("characters", "Right") 
characters:Element("Toggle", "character changer", nil, function(tbl) 
	if tbl.Toggle then 
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Gun") then 
			ChangeCharacter(ChrModels:FindFirstChild(values.skins.characters.skin.Scroll)) 
		end 
	end 
end) 
characters:Element("Scroll", "skin", {options = AllCharacters, Amount = 9, alphabet = true}, function(tbl) 
	if values.skins.characters["character changer"].Toggle then 
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Gun") then 
			ChangeCharacter(ChrModels:FindFirstChild(tbl.Scroll)) 
		end 
	end 
end) 

aimbot = legit:Sector("aimbot", "Left") 
aimbot:Element("ToggleKeybind", "aim assist") 
aimbot:Element("ToggleKeybind", "silent aim") 
aimbot:Element("ToggleKeybind", "triggerbot") 

main = legit:MSector("main", "Left") 
default = main:Tab("default") 
pistol = main:Tab("pistol") 
smg = main:Tab("smg") 
rifle = main:Tab("rifle") 
sniper = main:Tab("sniper") 

function AddLegit(Tab) 
	Tab:Element("Jumbobox", "conditions", {options = {"visible", "standing", "blind", "smoke"}}) 
	Tab:Element("Dropdown", "target", {options = {"crosshair", "health", "distance"}}) 
	Tab:Element("Dropdown", "hitbox", {options = {"closest", "head", "chest"}}) 
	Tab:Element("Slider", "field of view", {min = 30, max = 420, default = 120}) 
	Tab:Element("Slider", "smoothing", {min = 1, max = 50, default = 1}) 
	Tab:Element("Slider", "offset X", {min = -50, max = 50, default = 0}) 
	Tab:Element("Slider", "offset Y", {min = -50, max = 50, default = 0}) 
	Tab:Element("Slider", "min mouse speed", {min = 0, max = 50, default = 1}) 
	Tab:Element("Slider", "max mouse speed", {min = 0, max = 50, default = 1}) 
	Tab:Element("Slider", "aim speed multi", {min = 0, max = 50, default = 1}) 
	Tab:Element("Dropdown", "aim assist type", {options = {"robotic", "realistic"}}) 
	Tab:Element("Toggle", "silent aim") 
	Tab:Element("Slider", "hitchance", {min = 1, max = 100, default = 100}) 
	Tab:Element("Dropdown", "priority", {options = {"closest", "head", "chest"}}) 
	Tab:Element("Toggle", "triggerbot") 
	Tab:Element("Dropdown", "triggerbot type", {options = {"raycast (camera)", "raycast (camera to mouse)", "mouse target"}}) 
	Tab:Element("Slider", "delay (ms)", {min = 0, max = 300, default = 200}) 
	Tab:Element("Slider", "minimum dmg", {min = 0, max = 100, default = 15}) 
end 

AddLegit(default) 

pistol:Element("Toggle", "override default") 
AddLegit(pistol) 

smg:Element("Toggle", "override default") 
AddLegit(smg) 

rifle:Element("Toggle", "override default") 
AddLegit(rifle) 

sniper:Element("Toggle", "override default") 
AddLegit(sniper) 

settings = legit:Sector("settings", "Right") 
settings:Element("Toggle", "free for all") 
settings:Element("Toggle", "forcefield check") 
settings:Element("ToggleColor", "draw fov") 
settings:Element("Toggle", "filled fov")

aimbot = rage:Sector("aimbot", "Left") 
aimbot:Element("Toggle", "enabled") 
aimbot:Element("Dropdown", "origin", {options = {"character", "camera"}}) 
aimbot:Element("Toggle", "silent aim") 
aimbot:Element("Dropdown", "automatic fire", {options = {"off", "standard", "hitpart"}}) 
aimbot:Element("Toggle", "automatic penetration") 
aimbot:Element("Jumbobox", "resolver", {options = {"pitch", "roll"}}) 
aimbot:Element("Toggle", "delay shot") 
aimbot:Element("Toggle", "force hit")
aimbot:Element("Toggle", "force hit (head)")
aimbot:Element("Toggle", "fuck the headless (auto baim)")
aimbot:Element("Dropdown", "prediction", {options = {"off", "cframe", "velocity", "air", "auto"}}) 
aimbot:Element("Dropdown", "target", {options = {"off", "distance", "velocity", "health", "name"}}) 
aimbot:Element("Toggle", "sex package") 
aimbot:Element("Toggle", "teammates") 
aimbot:Element("Toggle", "auto baim") 
aimbot:Element("Toggle", "knifebot") 
aimbot:Element("Toggle", "knifebot altfire") 
aimbot:Element("Toggle", "knifebot inf range") 
aimbot:Element("Slider", "knifebot range", {min = 1, max = 250, default = 20}) 
aimbot:Element("Toggle", "forcefield check") 
aimbot:Element("Toggle", "buy time check")


weapons = rage:MSector("weapons", "Left") 
default = weapons:Tab("default") 
pistol = weapons:Tab("pistol") 
rifle = weapons:Tab("rifle") 
scout = weapons:Tab("scout") 
awp = weapons:Tab("awp") 
auto = weapons:Tab("auto") 

function AddRage(Tab) 
	Tab:Element("Jumbobox", "hitboxes", {options = {"head", "torso", "pelvis", "legs", "arms", "hands", "feet"}})
	Tab:Element("Toggle", "prefer body") 
	Tab:Element("Slider", "minimum damage", {min = -10, max = 100, default = 20})
	Tab:Element("Slider", "damage multiplier", {min = 1, max = 20, default = 1})
	Tab:Element("Slider", "max fov", {min = 1, max = 180, default = 180}) 
end 

AddRage(default) 

pistol:Element("Toggle", "override default") 
AddRage(pistol) 

rifle:Element("Toggle", "override default") 
AddRage(rifle) 

scout:Element("Toggle", "override default") 
AddRage(scout) 

awp:Element("Toggle", "override default") 
AddRage(awp) 

auto:Element("Toggle", "override default") 
AddRage(auto) 

antiaim = rage:Sector("angles", "Right") 
antiaim:Element("Toggle", "enabled") 
antiaim:Element("ToggleKeybind", "fake duck")
antiaim:Element("ToggleTrans", "visualize fake duck")
antiaim:Element("Dropdown", "visualize fake duck material", {options = {"Smooth", "Flat", "Glass", "ForceField"}})
antiaim:Element("Dropdown", "yaw base", {options = {"camera", "targets", "spin", "random", "anti crippin'", "keybind yaw"}}) 
antiaim:Element("Slider", "yaw offset", {min = -180, max = 180, default = 0}) 
antiaim:Element("ToggleKeybind", "reset yaw")
--antiaim:Element("Toggle", "auto hide head") 
--antiaim:Element("Dropdown", "auto hide head type", {options = {"Fast", "Precise", "Custom", "MultiPoint (WIP)"}}) 
--antiaim:Element("Slider", "custom angle", {min = -180, max = 180, default = 45})
antiaim:Element("Toggle", "jitter") 
antiaim:Element("Toggle", "random jitter") 
antiaim:Element("Slider", "jitter offset", {min = -180, max = 180, default = 0}) 
antiaim:Element("Dropdown", "pitch", {options = {"none", "Sus_down", "freak", "up", "down", "imposter", "glitch", "zero", "random", "Bodyarm", "negative"}}) 
antiaim:Element("ToggleKeybind", "reset pitch")
antiaim:Element("Toggle", "extend pitch") 
antiaim:Element("Dropdown", "body roll", {options = {"off", "180", "360"}})
antiaim:Element("Slider", "body roll offset", {min = -180, max = 180, default = 0}) 
antiaim:Element("Slider", "spin speed", {min = 1, max = 69, default = 4})
antiaim:Element("Slider", "high pos", {min = -3, max = 20, default = 2})

others = rage:Sector("others", "Right") 
others:Element("ToggleColor", "HitLogs")
others:Element("ToggleColor", "Lightning") 
others:Element("Slider", "lightning parts", {min = 1, max = 25, default = 10})
others:Element("Toggle", "remove head") 
others:Element("Toggle", "no animations") 
others:Element("Jumbobox", "leg slide movement", {options = {"walk", "run", "jump"}}) 

LagTick = 0 
fakelag = rage:Sector("fakelag", "Right") 
fakelag:Element("Toggle", "enabled", {default = {Toggle = false}}, function(tbl) 
	if tbl.Toggle then 
	else 
		FakelagFolder:ClearAllChildren() 
		game:GetService("NetworkClient"):SetOutgoingKBPSLimit(9e9) 
	end 
end) 
fakelag:Element("Dropdown", "amount", {options = {"static", "dynamic"}}) 
fakelag:Element("Slider", "limit", {min = 1, max = 16, default = 8}) 
fakelag:Element("ToggleColor", "visualize lag", {default = {Toggle = false, Color = COL3RGB(255,255,255)}}, function(tbl) 
	if tbl.Toggle then 
		for _,obj in pairs(FakelagFolder:GetChildren()) do 
			obj.Color = tbl.Color 
		end 
	else 
		FakelagFolder:ClearAllChildren() 
	end 
end) 
fakelag:Element("ToggleKeybind", "ping spike") 
coroutine.wrap(function() 
	while wait(1/16) do 
		LagTick = CLAMP(LagTick + 1, 0, values.rage.fakelag.limit.Slider) 
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("UpperTorso") and values.rage.fakelag.enabled.Toggle then 
			if LagTick == (values.rage.fakelag.amount.Dropdown == "static" and values.rage.fakelag.limit.Slider or RANDOM(1, values.rage.fakelag.limit.Slider)) then 
				game:GetService("NetworkClient"):SetOutgoingKBPSLimit(9e9) 
				FakelagFolder:ClearAllChildren() 
				LagTick = 0 
				if values.rage.fakelag["visualize lag"].Toggle then 
					for _,hitbox in pairs(LocalPlayer.Character:GetChildren()) do 
						if hitbox:IsA("BasePart") and hitbox.Name ~= "HumanoidRootPart" then 
							local part = INST("Part") 
							part.CFrame = hitbox.CFrame 
							part.Anchored = true 
							part.CanCollide = false 
							part.Material = Enum.Material.ForceField 
							part.Color = values.rage.fakelag["visualize lag"].Color 
							part.Name = hitbox.Name 
							part.Transparency = 0 
							part.Size = hitbox.Size 
							part.Parent = FakelagFolder 
						end 
					end 
				end 
			else 
				if values.rage.fakelag.enabled.Toggle then 
					game:GetService("NetworkClient"):SetOutgoingKBPSLimit(1) 
				end 
			end 
		else 
			FakelagFolder:ClearAllChildren() 
			game:GetService("NetworkClient"):SetOutgoingKBPSLimit(9e9) 
		end 
	end 
end)() 

cringe = rage:Sector("cringe", "Right") 
cringe:Element("Toggle", "damage multiplier")
cringe:Element("Slider", "multiplier", {min = 1, max = 150, default = 1})
cringe:Element("Button", "kill all bypass", {}, function()
	Client.splatterBlood = function() end
end)
cringe:Element("Button", "god mode", {}, function()
	LocalPlayer.Character.Humanoid.Parent = nil
	Instance.new("Humanoid", LocalPlayer.Character)
end)
cringe:Element("Button", "invisibility (defuse for cw)", {}, function()
	pcall(function()
		coroutine.wrap(function()
			local oldpos = LocalPlayer.Character.HumanoidRootPart.CFrame
			LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(99999,99999999999999999,99999)
			local NewRoot = LocalPlayer.Character.LowerTorso.Root:Clone()
			LocalPlayer.Character.LowerTorso.Root:Destroy()
			NewRoot.Parent = LocalPlayer.Character.LowerTorso
			wait(1*(game.Stats.PerformanceStats.Ping:GetValue()/1000))
			LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
		end)()
	end)
end)
defusing = false
cringe:Element("Button", "defuse", {}, function()
	if IsAlive(LocalPlayer) and workspace.Map.Gamemode.Value == "defusal" and defusing == false and workspace:FindFirstChild("C4") then 
		defusing = true
		LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
		local pos = LocalPlayer.Character.HumanoidRootPart.CFrame 
		workspace.CurrentCamera.CameraType = "Fixed"
		LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.C4.Handle.CFrame + Vector3.new(0, 2, 0)
		LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
		wait(0.1)
		LocalPlayer.Backpack.PressDefuse:FireServer(workspace.C4)
		LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
		wait(0.25)
		if IsAlive(LocalPlayer) and workspace:FindFirstChild("C4") and workspace.C4:FindFirstChild("Defusing") and workspace.C4.Defusing.Value == LocalPlayer then
			LocalPlayer.Backpack.Defuse:FireServer(workspace.C4)
		end
		LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
		wait(0.2)
		LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
		LocalPlayer.Character.HumanoidRootPart.CFrame = pos
		LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
		game.Workspace.CurrentCamera.CameraType = "Custom"
		defusing = false
	end
end)
planting = false
cringe:Element("Button", "plant c4", {}, function()
	if IsAlive(LocalPlayer) and workspace.Map.Gamemode.Value == "defusal" and workspace.Status.Preparation.Value == false and planting == false then 
		planting = true
		local pos = LocalPlayer.Character.HumanoidRootPart.CFrame 
		workspace.CurrentCamera.CameraType = "Fixed"
		LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Map.SpawnPoints.C4Plant.CFrame
		wait(0.2)
		game.ReplicatedStorage.Events.PlantC4:FireServer((pos + Vector3.new(0, -2.75, 0)) * CFrame.Angles(math.rad(90), 0, math.rad(180)), GetSite())
		wait(0.2)
		LocalPlayer.Character.HumanoidRootPart.CFrame = pos
		LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
		game.Workspace.CurrentCamera.CameraType = "Custom"
		planting = false
	end
end)
cringe:Element("Button", "kys", {}, function()
	game.ReplicatedStorage.Events.FallDamage:FireServer(100)
end)

exploits = rage:Sector("exploits", "Left") 
exploits:Element("Toggle", "HitBox Extender")
exploits:Element("ToggleTrans", "Visible HitBox")
exploits:Element("Slider", "HitBox Size", {min = 1, max = 50, default = 1})
exploits:Element("ToggleKeybind", "double tap (firebullet)")
exploits:Element("ToggleKeybind", "double tap")
exploits:Element("ToggleKeybind", "custom tap")
exploits:Element("Slider", "custom tap amount", {min = 1, max = 35, default = 1})
exploits:Element("Dropdown", "method", {options = {"default", "firebullet"}})
autopeekpos = nil
exploits:Element("ToggleKeybind", "auto peek", {}, function(tbl)
	for i, v in pairs (autopeekFolder:GetChildren()) do
		v:Destroy()
	end
	if tbl.Toggle == true then
		local Velocity1 = LocalPlayer.Character.HumanoidRootPart.Velocity * (values.rage.exploits["velocity multiplier"].Slider/10)
		local Velocity = Vector3.new(Velocity1.X, values.rage.exploits['auto peek y velocity'].Toggle == true and Velocity1.Y or 0, Velocity1.Z)
		if values.rage.exploits["visualize auto peek"].Toggle == true and LocalPlayer.Character then
			for i, v in pairs (LocalPlayer.Character:GetChildren()) do
				if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then 
					local part = INST("Part") 
					part.CFrame = values.rage.exploits['auto peek velocity'].Toggle == true and v.CFrame + (Velocity) or v.CFrame 
					part.Anchored = true 
					part.CanCollide = false 
					part.Material = Enum.Material.ForceField 
					part.Color = values.rage.exploits["visualize auto peek"].Color
					part.Name = v.Name 
					part.Transparency = values.rage.exploits["visualize auto peek"].Transparency 
					part.Size = v.Size 
					part.Parent = autopeekFolder 
				end
			end
		end
		autopeekpos = values.rage.exploits['auto peek velocity'].Toggle == true and LocalPlayer.Character.HumanoidRootPart.CFrame + Velocity or LocalPlayer.Character.HumanoidRootPart.CFrame
	else
		autopeekpos = nil 
	end
end)
exploits:Element("Toggle", "auto peek+")
exploits:Element("ToggleTrans", "visualize auto peek")
exploits:Element("Toggle", "auto peek visibility check")
exploits:Element("Toggle", "auto peek velocity")
exploits:Element("Toggle", "auto peek y velocity")
exploits:Element("Slider", "velocity multiplier", {min = -25, max = 25, default = 1})
exploits:Element("Dropdown", "auto peek method", {options = {"CFrame", "Tween", "Backtrack (CFrame)", "Backtrack (Tween)"}})
exploits:Element("Slider", "auto peek backtrack time (ms)", {min = 1, max = 1000, default = 100})
local killallconnection = nil
local validationchar = nil
local killalltarget = nil
exploits:Element("ToggleKeybind", "kill all", {}, function(tbl)
	if killallconnection then killallconnection:Disconnect() end
	killallconnection = nil
	validationchar = nil
	tableofallweapons = nil
	Client.createbullethole = function() end 
	if not tbl.Toggle and not tbl.Active then return end
	tableofallweapons = {
		[1] = 'AK47',
		[2] = 'AUG',
		[3] = 'AWP',
		[4] = 'Banana',
		[5] = 'Bayonet',
		[6] = 'Bearded Axe',
		[7] = 'Bizon',
		[9] = 'CT Knife',
		[10] = 'CZ',
		[11] = 'Cleaver',
		[12] = 'Crowbar',
		[14] = 'DesertEagle',
		[15] = 'DualBerettas',
		[16] = 'Falchion Knife',
		[17] = 'Famas',
		[19] = 'FiveSeven',
		[21] = 'Flashbang',
		[22] = 'Flip Knife',
		[23] = 'G3SG1',
		[24] = 'Galil',
		[25] = 'Glock',
		[26] = 'Gut Knife',
		[29] = 'Huntsman Knife',
		[31] = 'Karambit',
		[33] = 'M249',
		[34] = 'M4A1',
		[35] = 'M4A4',
		[36] = 'MAC10',
		[37] = 'MAG7',
		[38] = 'MP7',
		[39] = 'MP7-SD',
		[40] = 'MP9',
		[42] = 'Negev',
		[43] = 'Nova',
		[44] = 'P2000',
		[46] = 'P250',
		[47] = 'P90',
		[48] = 'R8',
		[49] = 'SG',
		[50] = 'SawedOff',
		[51] = 'Scout',
		[52] = 'Sickle',
		[56] = 'T Knife',
		[57] = 'Tec9',
		[58] = 'UMP',
		[59] = 'USP',
		[60] = 'XM',
		[61] = 'Butterfly Knife',
	}
	validationchar = function(plr)
		return (not values.rage.aimbot.teammates.Toggle or plr.Team ~= LocalPlayer.Team) and plr.Character and plr.Character:FindFirstChild("Humanoid") and plr.Character.Humanoid.Health > 0
	end
	killallconnection = RunService.RenderStepped:Connect(function()
		if not tbl.Toggle and not tbl.Active then return end
		for i, plr in pairs (Players:GetPlayers()) do
			if validationchar(plr) then
				killalltarget = plr.Character.Head
				Client.firebullet()
				Client.ammocount = 72769420
				Client.ammocount2 = 72769420
				Client.resetaccuracy()
				Client.RecoilX = 0
				Client.RecoilY = 0
				local Value = plr.Character.HumanoidRootPart:FindFirstChild("OldPosition") or INST("Vector3Value") 
				Value.Name = "OldPosition" 
				Value.Value = plr.Character.HumanoidRootPart.Position 
				Value.Parent = plr.Character.HumanoidRootPart 
			end
		end
		RunService.Heartbeat:Wait()
		for i, plr in pairs (Players:GetPlayers()) do
			if validationchar(plr) then
				killalltarget = plr.Character.Head
				Client.firebullet()
				Client.ammocount = 72769420
				Client.ammocount2 = 72769420
				Client.resetaccuracy()
				Client.RecoilX = 0
				Client.RecoilY = 0
			end
		end
	end)
end)
exploits:Element("Dropdown", "kill all weapon", {options = {"Auto", "AWP", "Banana", "Flip Knife", "😱"}})
exploits:Element("Button", "copy others usernames", {}, function()
	local str = ""
	for _,v in pairs (Players:GetPlayers()) do
		if v~=LocalPlayer then
			if str ~= "" then
				str = str..' '..v.Name
			else
				str = str..v.Name
			end
		end
	end
	setclipboard(str)
	CreateHitElement("Copied!")
end)

players = visuals:Sector("players", "Left") 
objects = {} 
utility = {} 
players:Element("Toggle", "teammates") 
players:Element("ToggleColor", "box", {default = {Color = COL3RGB(255,255,255)}}) 
players:Element("ToggleColor", "name", {default = {Color = COL3RGB(255,255,255)}}) 
players:Element("Toggle", "health") 
players:Element("ToggleColor", "weapon", {default = {Color = COL3RGB(255,255,255)}}) 
players:Element("ToggleColor", "weapon icon", {default = {Color = COL3RGB(255,255,255)}}) 
players:Element("Jumbobox", "indicators", {options = {"armor"}}) 
players:Element("Jumbobox", "outlines", {options = {"drawings", "text"}, default = {Jumbobox = {"drawings", "text"}}}) 
players:Element("Dropdown", "font", {options = {"Plex", "Monospace", "System", "UI"}}) 
players:Element("Slider", "size", {min = 12, max = 16, default = 13}) 
players:Element("ToggleTrans", "chams", nil, function(tbl) 
	for _,Player in pairs(Players:GetPlayers()) do 
		if Player.Character then 
			for _2,Obj in pairs(Player.Character:GetDescendants()) do 
				if Obj.Name == "VisibleCham" or Obj.Name == "WallCham" then 
					if tbl.Toggle then 
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then 
							Obj.Visible = true 
						else 
							Obj.Visible = false 
						end 
					else 
						Obj.Visible = false 
					end 
					Obj.Color3 = tbl.Color 
					Obj.Transparency = tbl.Transparency
				end 
			end 
		end 
	end 
end) 
players:Element("ToggleTrans", "visible chams", nil, function(tbl) 
	for _,Player in pairs(Players:GetPlayers()) do 
		if Player.Character then 
			for _2,Obj in pairs(Player.Character:GetDescendants()) do 
				if Obj.Name == "stonks" then
					if tbl.Toggle then 
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then 
							Obj.Visible = true 
						else 
							Obj.Visible = false 
						end 
					else 
						Obj.Visible = false 
					end 
					Obj.Color3 = tbl.Color 
					Obj.Transparency = tbl.Transparency
				end
			end
		end
	end
end)
function refreshchams()
	for i, plr in pairs (game.Players:GetPlayers()) do
		if plr.Character and plr ~= game.Players.LocalPlayer then
			for i, obj in pairs (plr.Character:GetChildren()) do
				if obj:IsA("BasePart") and obj.Name ~= "HumanoidRootPart" and obj.Name ~= "BackC4" and obj.Name ~= "HeadHB" and obj.Name ~= "Head" and not obj:FindFirstChild("stocks") and obj.Parent and obj.Parent.Name ~= "BackC4" then 
					local bha_1 = Instance.new("BoxHandleAdornment", obj)
					bha_1.Visible = values.visuals.players["visible chams 2"].Toggle == true and isvisible(plr, values.visuals.players["vchams2 max walls"].Slider, bha_1.Adornee) or false
					bha_1.Name = "stocks"
					bha_1.Adornee = obj
					bha_1.Size = obj.Size + Vector3.new(0.1,0.1,0.1)
					bha_1.Color3 = values.visuals.players["visible chams 2"].Color
					bha_1.Transparency = values.visuals.players["visible chams 2"].Transparency
					bha_1.AlwaysOnTop = true
					bha_1.ZIndex = 1
				end
				if obj:FindFirstChild("stocks") then
					local bha_1 = obj:FindFirstChild("stocks")
					bha_1.Visible = values.visuals.players["visible chams 2"].Toggle == true and isvisible(plr, values.visuals.players["vchams2 max walls"].Slider, bha_1.Adornee) or false
					bha_1.Color3 = values.visuals.players["visible chams 2"].Color
					bha_1.Transparency = values.visuals.players["visible chams 2"].Transparency
				end
			end
		end
	end
end
players:Element("ToggleTrans", "visible chams 2", {}, function(tbl)
	refreshchams()
end)
players:Element("Dropdown", "vchams2 visibility check type", {options = {"Individual", "Head", "Torso"}})
players:Element("Slider", "vchams2 max walls", {min = 0, max = 20, default = 3})
players:Element("Slider", "vchams2 refresh rate", {min = 1, max = 60, default = 30})
function isvisible(plr, maxwalls, forcepart)
	local Ignore_1 = {game.Players.LocalPlayer.Character}
	local char = plr.Character
	local head = char.Head
	local camera = workspace.CurrentCamera
	if forcepart and values.visuals.players["vchams2 visibility check type"].Dropdown == "Individual" then
		head = forcepart
	end
	if values.visuals.players["vchams2 visibility check type"].Dropdown == "Torso" then
		head = char.UpperTorso
	end
	local Hits = workspace.CurrentCamera:GetPartsObscuringTarget({camera.CFrame.p, head.Position}, {game.Players.LocalPlayer.Character, workspace.Ray_Ignore, workspace.Map.Clips, workspace.Map:FindFirstChild("AllSpawns") ~= nil and workspace.Map.AllSpawns, workspace.Map.CTSpawns, workspace.Map.TSpawns, workspace.Map.SpawnPoints, workspace.Map:FindFirstChild("Killers") ~= nil and workspace.Map.Killers or game.Lighting, workspace.Map:FindFirstChild("Ignore") ~= nil and workspace.Map.Ignore or game.Lighting, workspace.Debris})
	return (values.visuals.players.teammates.Toggle == true or plr.Team ~= LocalPlayer.Team) and #Hits <= maxwalls
end
effects = visuals:Sector("effects", "Right") 
effects:Element("ToggleTrans", "weapon chams", {default = {Color = COL3RGB(255,255,255), Transparency = 0}}, function(tbl) 
	if WeaponObj == nil then return end 
	if tbl.Toggle then 
		for i,v in pairs(WeaponObj) do 
			UpdateWeapon(v) 
		end 
	else 
		for i,v in pairs(WeaponObj) do 
			if v:IsA("MeshPart") then v.TextureID = v.OriginalTexture.Value end 
			if v:IsA("Part") and v:FindFirstChild("Mesh") and not v:IsA("BlockMesh") then 
				v.Mesh.TextureId = v.Mesh.OriginalTexture.Value 
				v.Mesh.VertexColor = Vec3(1,1,1) 
			end 
			v.Color = v.OriginalColor.Value 
			v.Material = v.OriginalMaterial.Value 
			v.Transparency = 0 
		end 
	end 
end) 
effects:Element("Dropdown", "weapon material", {options = {"Smooth", "Flat", "ForceField", "Glass"}}, function(tbl) 
	if WeaponObj == nil then return end 
	if values.visuals.effects["weapon chams"].Toggle then 
		for i,v in pairs(WeaponObj) do 
			UpdateWeapon(v) 
		end 
	end 
end) 
effects:Element("Slider", "reflectance", {min = 0, max = 100, default = 0}, function(tbl) 
	if values.visuals.effects["weapon chams"].Toggle then 
		for i,v in pairs(WeaponObj) do 
			UpdateWeapon(v) 
		end 
	end 
end) 
effects:Element("ToggleTrans", "accessory chams", {default = {Color = COL3RGB(255,255,255)}}, function(val) 
	if RArm == nil or LArm == nil then return end 
	if val.Toggle then 
		if RGlove ~= nil then 
			UpdateAccessory(RGlove) 
		end 
		if RSleeve ~= nil then 
			UpdateAccessory(RSleeve) 
		end 
		if LGlove ~= nil then 
			UpdateAccessory(LGlove) 
		end 
		if LSleeve ~= nil then 
			UpdateAccessory(LSleeve) 
		end 
	else 
		if RGlove then 
			ReverseAccessory(RGlove) 
		end 
		if LGlove then 
			ReverseAccessory(LGlove) 
		end 
		if RSleeve then 
			ReverseAccessory(RSleeve) 
		end 
		if LSleeve then 
			ReverseAccessory(LSleeve) 
		end 
	end 
end) 
effects:Element("Dropdown", "accessory material", {options = {"Smooth","Flat","ForceField","Glass"}}, function(val) 
	if RArm == nil or LArm == nil then return end 
	if values.visuals.effects["accessory chams"].Toggle then 
		if RGlove ~= nil then 
			UpdateAccessory(RGlove) 
		end 
		if RSleeve ~= nil then 
			UpdateAccessory(RSleeve) 
		end 
		if LGlove ~= nil then 
			UpdateAccessory(LGlove) 
		end 
		if LSleeve ~= nil then 
			UpdateAccessory(LSleeve) 
		end 
	end 
end) 
effects:Element("ToggleTrans", "arm chams", {default = {Color = COL3RGB(255,255,255)}}, function(val) 
	if RArm == nil then return end 
	if LArm == nil then return end 
	local mat = values.visuals.effects["arm chams material"].Dropdown == "Smooth" and "SmoothPlastic" or values.visuals.effects["arm chams material"].Dropdown == "Flat" and "Neon" or values.visuals.effects["arm chams material"].Dropdown
	if val.Toggle then 
		RArm.Color = val.Color 
		LArm.Color = val.Color 
		RArm.Transparency = val.Transparency 
		LArm.Transparency = val.Transparency 
		RArm.Material = mat
		LArm.Material = mat
	else 
		RArm.Color = RArm.Color3Value.Value 
		LArm.Color = RArm.Color3Value.Value 
		RArm.Transparency = 0 
		LArm.Transparency = 0 
		RArm.Material = "SmoothPlastic"
		LArm.Material = "SmoothPlastic"
	end 
end) 
effects:Element("Dropdown", "arm chams material", {options = {"Smooth", "Flat", "ForceField", "Glass"}})

effects:Element("Jumbobox", "removals", {options = {"scope", "scope lines", "flash", "smoke", "decals", "shadows", "clothes"}}, function(val) 
	local tbl = val.Jumbobox 
	if TBLFIND(tbl, "decals") then 
		Client.createbullethole = function() end 
		for i,v in pairs(workspace.Debris:GetChildren()) do 
			if v.Name == "Bullet" or v.Name == "SurfaceGui" then 
				v:Destroy() 
			end 
		end 
	else 
		Client.createbullethole = oldcreatebullethole 
	end 
	if TBLFIND(tbl, "clothes") then 
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("UpperTorso") then 
			if LocalPlayer.Character:FindFirstChild("Shirt") then 
				LocalPlayer.Character:FindFirstChild("Shirt").ShirtTemplate = "" 
			end 
			if LocalPlayer.Character:FindFirstChild("Pants") then 
				LocalPlayer.Character:FindFirstChild("Pants").PantsTemplate = "" 
			end 
		end 
	else 
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("UpperTorso") then 
			if LocalPlayer.Character:FindFirstChild("Shirt") then 
				LocalPlayer.Character:FindFirstChild("Shirt").ShirtTemplate = LocalPlayer.Character:FindFirstChild("Shirt").OriginalTexture.Value 
			end 
			if LocalPlayer.Character:FindFirstChild("Pants") then 
				LocalPlayer.Character:FindFirstChild("Pants").PantsTemplate = LocalPlayer.Character:FindFirstChild("Pants").OriginalTexture.Value 
			end 
		end 
	end 
	if TBLFIND(tbl, "scope") then 
		Crosshairs.Scope.ImageTransparency = 1 
		Crosshairs.Scope.Scope.ImageTransparency = 1 
		Crosshairs.Frame1.Transparency = 1 
		Crosshairs.Frame2.Transparency = 1 
		Crosshairs.Frame3.Transparency = 1 
		Crosshairs.Frame4.Transparency = 1 
	else 
		Crosshairs.Scope.ImageTransparency = 0 
		Crosshairs.Scope.Scope.ImageTransparency = 0 
		Crosshairs.Frame1.Transparency = 0 
		Crosshairs.Frame2.Transparency = 0 
		Crosshairs.Frame3.Transparency = 0 
		Crosshairs.Frame4.Transparency = 0 
	end 
	PlayerGui.Blnd.Enabled = not TBLFIND(tbl, "flash") and true or false 
	Lighting.GlobalShadows = not TBLFIND(tbl, "shadows") and true or false 
	if RayIgnore:FindFirstChild("Smokes") then 
		if TBLFIND(tbl, "smoke") then 
			for i,smoke in pairs(RayIgnore.Smokes:GetChildren()) do 
				smoke.ParticleEmitter.Rate = 0 
			end 
		else 
			for i,smoke in pairs(RayIgnore.Smokes:GetChildren()) do 
				smoke.ParticleEmitter.Rate = smoke.OriginalRate.Value 
			end 
		end 
	end 
end) 
effects:Element("Toggle", "force crosshair") 
effects:Element("Toggle", "on scope")
effects:Element("ToggleColor", "world color", {default = {Color = COL3RGB(255,255,255)}}, function(val) 
	if val.Toggle then 
		Camera.ColorCorrection.TintColor = val.Color 
	else 
		Camera.ColorCorrection.TintColor = COL3RGB(255,255,255) 
	end 
end) 
effects:Element("Toggle", "shadowmap technology", nil, function(val) sethiddenproperty(Lighting, "Technology", val.Toggle and "ShadowMap" or "Legacy") end) 

self = visuals:Sector("self", "Right") 
finishedtween = false
self:Element("ToggleKeybind", "third person", {}, function(tbl) 
	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then 
		if tbl.Toggle then 
			if tbl.Active then 
				if values.visuals.self["third person tween"].Toggle == true then
					finishedtween = false
					library:Tween(LocalPlayer, TweenInfo.new(values.visuals.self["tween time"].Slider/10), {CameraMinZoomDistance = values.visuals.self.distance.Slider, CameraMaxZoomDistance = values.visuals.self.distance.Slider}) 
					task.wait(values.visuals.self["tween time"].Slider/10)
					finishedtween = true
				else
					finishedtween = false
					LocalPlayer.CameraMinZoomDistance = values.visuals.self.distance.Slider
					LocalPlayer.CameraMaxZoomDistance = values.visuals.self.distance.Slider
					finishedtween = true
				end
			else 
				if values.visuals.self["third person tween"].Toggle == true then
					finishedtween = false
					library:Tween(LocalPlayer, TweenInfo.new(values.visuals.self["tween time"].Slider/10), {CameraMinZoomDistance = 0, CameraMaxZoomDistance = 0}) 
					task.wait(values.visuals.self["tween time"].Slider/10)
					finishedtween = true
				else
					finishedtween = false
					LocalPlayer.CameraMinZoomDistance = 0
					LocalPlayer.CameraMaxZoomDistance = 0
					finishedtween = true
				end
			end
		else 
			if values.visuals.self["third person tween"].Toggle == true then
				finishedtween = false
				library:Tween(LocalPlayer, TweenInfo.new(values.visuals.self["tween time"].Slider/10), {CameraMinZoomDistance = 0, CameraMaxZoomDistance = 0}) 
				task.wait(values.visuals.self["tween time"].Slider/10)
				finishedtween = true
			else
				finishedtween = false
				LocalPlayer.CameraMinZoomDistance = 0
				LocalPlayer.CameraMaxZoomDistance = 0
				finishedtween = true
			end
		end 
	end 
end) 
self:Element("Toggle", "third person tween")
self:Element("Slider", "tween time", {min = 1, max = 10, default = 1})
self:Element("Toggle", "no arm third person")
self:Element("Toggle", "shoot sounds in third person")
self:Element("Slider", "volume", {min = 1, max = 5, default = 1})
self:Element("Slider", "distance", {min = 6, max = 18, default = 12}, function(tbl) 
	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then 
		if values.visuals.self["third person"].Toggle == true and values.visuals.self["third person"].Active == true then 
			if values.visuals.self["third person tween"].Toggle == true then
				finishedtween = false
				library:Tween(LocalPlayer, TweenInfo.new(values.visuals.self["tween time"].Slider/10), {CameraMinZoomDistance = values.visuals.self.distance.Slider, CameraMaxZoomDistance = values.visuals.self.distance.Slider}) 
				task.wait(values.visuals.self["tween time"].Slider/10)
				finishedtween = true
			else
				finishedtween = false
				LocalPlayer.CameraMinZoomDistance = values.visuals.self.distance.Slider
				LocalPlayer.CameraMaxZoomDistance = values.visuals.self.distance.Slider
				finishedtween = true
			end
		else 
			if values.visuals.self["third person tween"].Toggle == true then
				finishedtween = false
				library:Tween(LocalPlayer, TweenInfo.new(values.visuals.self["tween time"].Slider/10), {CameraMinZoomDistance = 0, CameraMaxZoomDistance = 0}) 
				task.wait(values.visuals.self["tween time"].Slider/10)
				finishedtween = true
			else
				finishedtween = false
				LocalPlayer.CameraMinZoomDistance = 0
				LocalPlayer.CameraMaxZoomDistance = 0
				finishedtween = true
			end
		end 
	end
end) 
LocalPlayer:GetPropertyChangedSignal("CameraMinZoomDistance"):Connect(function() 
	if values.visuals.self["third person"].Toggle and values.visuals.self["third person"].Active then 
		if LocalPlayer.CameraMinZoomDistance ~= values.visuals.self.distance.Slider and finishedtween == true then 
			LocalPlayer.CameraMinZoomDistance = values.visuals.self.distance.Slider
			LocalPlayer.CameraMaxZoomDistance = values.visuals.self.distance.Slider
		end 
	else 
		if values.visuals.self["third person tween"].Toggle == true then
			finishedtween = false
			library:Tween(LocalPlayer, TweenInfo.new(values.visuals.self["tween time"].Slider/10), {CameraMinZoomDistance = 0, CameraMaxZoomDistance = 0}) 
			task.wait(values.visuals.self["tween time"].Slider/10)
			finishedtween = true
		end
	end 
end) 
self:Element("Slider", "fov changer", {min = 0, max = 120, default = 80}, function(value) 
	RunService.RenderStepped:Wait() 
	if LocalPlayer.Character == nil then return end 
	if fov == value.Slider then return end 
	if values.visuals.self["on scope"].Toggle or not LocalPlayer.Character:FindFirstChild("AIMING") then 
		Camera.FieldOfView = value.Slider 
	end 
end) 
self:Element("Toggle", "on scope") 
self:Element("Toggle", "visualize silent angle")
self:Element("Toggle", "visualize silent angle with crosshair")
self:Element("Slider", "silent angle duration", {min = 1, max = 25, default = 5})
self:Element("Toggle", "viewmodel changer") 
self:Element("Slider", "viewmodel x", {min = -20, max = 20}, function(val) 
	ViewmodelOffset = CF(values.visuals.self["viewmodel x"].Slider/7, values.visuals.self["viewmodel y"].Slider/7, values.visuals.self["viewmodel z"].Slider/7) * CFAngles(0, 0, values.visuals.self.roll.Slider/50) 
end) 
self:Element("Slider", "viewmodel y", {min = -20, max = 20}, function(val) 
	ViewmodelOffset = CF(values.visuals.self["viewmodel x"].Slider/7, values.visuals.self["viewmodel y"].Slider/7, values.visuals.self["viewmodel z"].Slider/7) * CFAngles(0, 0, values.visuals.self.roll.Slider/50) 
end) 
self:Element("Slider", "viewmodel z", {min = -20, max = 20}, function(val) 
	ViewmodelOffset = CF(values.visuals.self["viewmodel x"].Slider/7, values.visuals.self["viewmodel y"].Slider/7, values.visuals.self["viewmodel z"].Slider/7) * CFAngles(0, 0, values.visuals.self.roll.Slider/50) 
end) 
self:Element("Slider", "roll", {min = -100, max = 100}, function(val) 
	ViewmodelOffset = CF(values.visuals.self["viewmodel x"].Slider/7, values.visuals.self["viewmodel y"].Slider/7, values.visuals.self["viewmodel z"].Slider/7) * CFAngles(0, 0, values.visuals.self.roll.Slider/50) 
end) 
self:Element("ToggleColor", "self chams", {default = {Color = COL3RGB(255,255,255)}}, function(tbl) 
	if tbl.Toggle then 
		for _,obj in pairs(SelfObj) do 
			if obj.Parent ~= nil then 
				obj.Material = values.visuals.self["self chams material"].Dropdown 
				obj.Color = tbl.Color 
			end 
		end 
	else 
		for _,obj in pairs(SelfObj) do 
			if obj.Parent ~= nil then 
				obj.Material = obj.OriginalMaterial.Value 
				obj.Color = obj.OriginalColor.Value 
			end 
		end 
	end 
end) 

self:Element("Dropdown", "self chams material", {options = {"ForceField", "Neon", "Glass"}}, function(val)
	if TBLFIND(val, "ForceField") then
		for _,obj in pairs(SelfObj) do 
			if obj.Parent ~= nil then 
				obj.Material = Enum.Material.ForceField
				obj.Color = tbl.Color
			end
		end
	else
		if TBLFIND(val, "Neon") then
			for _,obj in pairs(SelfObj) do 
				if obj.Parent ~= nil then
					obj.Material = Enum.Material.Neon
					obj.Color = tbl.Color
				end
			end
		else
			if TBLFIND(val, "Glass") then
				for _,obj in pairs(SelfObj) do
					if obj.Parent ~= nil then
						obj.Material = Enum.Material.Glass
						obj.Color = tbl.Color
					end
				end
			end
		end
	end
end)

self:Element("Slider", "scope blend", {min = 0, max = 100, default = 0}) 

ads = Client.updateads 
Client.updateads = function(self, ...) 
	local args = {...} 
	coroutine.wrap(function() 
		wait() 
		if LocalPlayer.Character ~= nil then 
			for _,part in pairs(LocalPlayer.Character:GetDescendants()) do 
				if part:IsA("Part") or part:IsA("MeshPart") then 
					if part.Transparency ~= 1 then 
						part.Transparency = LocalPlayer.Character:FindFirstChild("AIMING") and values.visuals.self["scope blend"].Slider/100 or 0 
					end 
				end 
				if part:IsA("Accessory") then 
					part.Handle.Transparency = LocalPlayer.Character:FindFirstChild("AIMING") and values.visuals.self["scope blend"].Slider/100 or 0 
				end 
			end 
		end 
	end)() 
	return ads(self, ...) 
end 

world = visuals:Sector("world", "Left") 
world:Element("Toggle", "Old Gun Sounds")
world:Element("Toggle", "only selected guns")
world:Element("Jumbobox", "guns", {options = {"Tec9","M4A4","SG","G3SG1","AWP","AUG","Scout","Famas","UMP","MP9","DesertEagle","P250","P2000","USP","Galil","Glock","M4A1","AK47"}})
effects:Element("Slider", "time changer", {min = 0, max = 15, default = 0})
effects:Element("Slider", "bloom", {min = 0, max = 50, default = 1})
effects:Element("Slider", "threshold", {min = 0, max = 50, default = 20})
effects:Element("Slider", "size", {min = 0, max = 100, default = 24})
effects:Element("Slider", "saturation", {min = -25, max = 25, default = 0})
effects:Element("Slider", "contrast", {min = -25, max = 25, default = 0})
bloomeffect = Instance.new("BloomEffect", Camera)
bloomeffect.Size = 24
bloomeffect.Threshold = 2
function beamer(pos1, pos2, col1, col2, dur, beam2_t)
	local atch1 = Instance.new("Attachment", attachmentmanager)
	atch1.WorldPosition = pos1
	local atch2 = Instance.new("Attachment", attachmentmanager)
	atch2.WorldPosition = pos2
	local beam = Instance.new("Beam", attachmentmanager)
	beam.Attachment0 = atch1
	beam.Attachment1 = atch2
	beam.Texture = 'http://www.roblox.com/asset/?id=446111271'
	beam.TextureSpeed = 3
	beam.TextureMode = Enum.TextureMode.Wrap
	beam.TextureLength = 1
	beam.Transparency = NumberSequence.new({
		NumberSequenceKeypoint.new(0,0),
		NumberSequenceKeypoint.new(1,0)
	})
	beam.FaceCamera = true
	beam.Width0 = 0.25
	beam.Width1 = 0.25
	beam.Segments = 1
	beam.LightEmission = 1
	beam.LightInfluence = 0
	beam.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0,col1),
		ColorSequenceKeypoint.new(1,col1),
	})
	local beam2 = nil
	if beam2_t == true then
		beam2 = Instance.new("Beam", attachmentmanager)
		beam2.Attachment0 = atch1
		beam2.Attachment1 = atch2
		beam2.Texture = 'http://www.roblox.com/asset/?id=446111271'
		beam2.TextureSpeed = 1.25
		beam2.TextureMode = Enum.TextureMode.Wrap
		beam2.TextureLength = 1
		beam2.Transparency = NumberSequence.new({
			NumberSequenceKeypoint.new(0,0),
			NumberSequenceKeypoint.new(1,0)
		})
		beam2.FaceCamera = true
		beam2.Width0 = 0.25
		beam2.Width1 = 0.25
		beam2.Segments = 1
		beam2.LightEmission = 1
		beam2.LightInfluence = 0
		beam2.Color = ColorSequence.new({
			ColorSequenceKeypoint.new(0,col2),
			ColorSequenceKeypoint.new(1,col2),
		})
	end
	coroutine.wrap(function()
		task.wait(dur)
		atch1:Destroy()
		atch2:Destroy()
		beam:Destroy()
		if beam2 ~= nil then
			beam2:Destroy()
		end
	end)()
end
for i, v in pairs (workspace:GetDescendants()) do
	if v:IsA("TrussPart") or v:IsA("UnionOperation") or v:IsA("WedgePart") or v:IsA("MeshPart") or v:IsA("Part") then
		local oldtrans = Instance.new("NumberValue")
		oldtrans.Name = "oldtransparency"
		oldtrans.Value = v.Transparency
	end
end
world:Element("ToggleTrans", "molly radius", {default = {Color = COL3RGB(255,0,0)}}, function(tbl) 
	if RayIgnore:FindFirstChild("Fires") == nil then return end 
	if tbl.Toggle then 
		for i,fire in pairs(RayIgnore:FindFirstChild("Fires"):GetChildren()) do 
			fire.Transparency = tbl.Transparency 
			fire.Color = tbl.Color 
		end 
	else 
		for i,fire in pairs(RayIgnore:FindFirstChild("Fires"):GetChildren()) do 
			fire.Transparency = 1 
		end 
	end 
end) 
world:Element("ToggleColor", "smoke radius", {default = {Color = COL3RGB(0, 255, 0)}}, function(tbl) 
	if RayIgnore:FindFirstChild("Smokes") == nil then return end 
	if tbl.Toggle then 
		for i,smoke in pairs(RayIgnore:FindFirstChild("Smokes"):GetChildren()) do 
			smoke.Transparency = 0 
			smoke.Color = tbl.Color 
		end 
	else 
		for i,smoke in pairs(RayIgnore:FindFirstChild("Smokes"):GetChildren()) do 
			smoke.Transparency = 1 
		end 
	end 
end) 
world:Element("ToggleColor", "bullet tracers", {default = {Color = COL3RGB(0, 0, 255)}}) 
world:Element("ToggleColor", "2nd beam", {default = {Color = COL3RGB(255, 255, 255)}}) 
world:Element("Dropdown", "tracer material", {options = {"Smooth", "Flat", "ForceField", "Glass", "beam", "BoxHandleAdornment", "LineHandleAdornment"}})
world:Element("Dropdown", "tracer start point", {options = {"Camera", "Head", "Gun"}})
world:Element("Slider", "tracer thickness (1 = 1/20)", {min = 1, max = 5, default = 1})
world:Element("Slider", "tracer fade time (1 = 1/10s)", {min = 1, max = 250, default = 10})
world:Element("ToggleColor", "impacts", {default = {Color = COL3RGB(255, 0, 0)}}) 
world:Element("ToggleColor", "hit chams", {default = {Color = COL3RGB(0, 0, 255)}}) 
tabloid = {
	["skeet"] = "rbxassetid://5447626464",
	--["neverlose"] = "rbxassetid://5043539486",
	["rust"] = "rbxassetid://5043539486",
	["bag"] = "rbxassetid://364942410",
	["baimware"] = "rbxassetid://4275842574",
	["bruh"] = "rbxassetid://535690488",
	["Minecraft"] = "rbxassetid://6361963422",
	["moan"] = "rbxassetid://2440889605",
	["ding"] = "rbxassetid://8322227470",
	["osu"] = "rbxassetid://7149919358",
	["osu1"] = "rbxassetid://7654404889",
	["Tf2"] = "rbxassetid://296102734",
	["Tf2 pan"] = "rbxassetid://3431749479",
	["Slap"] = "rbxassetid://4888372697",
	["1"] = "rbxassetid://7349055654",
	["jojo"] = "rbxassetid://6787514780",
	["vibe"] = "rbxassetid://1848288500",
	["supersmash"] = "rbxassetid://2039907664",
	["epic"] = "rbxassetid://7344303740",
	["retro"] = "rbxassetid://3466984142",
	["quake"] = "rbxassetid://4868633804",
	["hangouts"] = "rbxassetid://1463004699",
	["pickaxehit"] = "rbxassetid://1347140027",
	["tool_break"] = "rbxassetid://1067922803",
	["vineboom1"] = "rbxassetid://7285916572",
	["vineboom2"] = "rbxassetid://8080941676",
	["fart1"] = "rbxassetid://7479844209", --I DON'T HAVE A FART KINK
	["fart2"] = "rbxassetid://6367774932", --I DON'T HAVE A FART KINK
	["fart3"] = "rbxassetid://6577701238", --I DON'T HAVE A FART KINK
	["error"] = "rbxassetid://7930024055",
	["doink"] = "rbxassetid://7398268682",
	["e636bc507277f4165564c8928f893b0b"] = "rbxassetid://3123254187",
	["wood"] = "rbxassetid://5815442967",
	["csgo headshot"] = "rbxassetid://6937353691",
	["zeus"] = "rbxassetid://7554632797",
	["ping"] = "rbxassetid://7527024276",
	["m1 garand"] = "rbxassetid://6111738677",
	["hitmarker"] = "rbxassetid://160432334",
	["amogus"] = "rbxassetid://5700183626",
	["bass drop"] = "rbxassetid://622100551",
	["samsung"] = "rbxassetid://6205717931",
	--["01-kick deep"] = "rbxassetid://9617608974",
	--["02-water drop"] = "rbxassetid://9617691710",
	--["03-AB shot"] = "rbxassetid://9617693038",
	--["04-cowbell 808"] = "rbxassetid://9617731994",
	--["05-hitsound Def"] = "rbxassetid://9619067839",
	--["06-hitsound thalash"] = "rbxassetid://9619074337",
	--["07-idk"] = "rbxassetid://9619076981",
	--["08-gnome"] = "rbxassetid://9619106787",
	["click"] = "rbxassetid://452267918",
	["shutdown"] = "rbxassetid://784747919",
	["button?"] = "rbxassetid://12221967",
	["sicko mode"] = "rbxassetid://8950332570",
}
tabloid1 = {}
for i, v in pairs (tabloid) do
	tabloid1[#tabloid1+1] = i
end
table.sort(tabloid1,function(a,b) return a < b end)
world:Element("Dropdown", "hitsound", {options = {"none",unpack(tabloid1)}})
world:Element("Slider", "sound volume", {min = 1, max = 5, default = 3}) 
world:Element("Dropdown", "skybox", {options = {"none", "nebula", "vaporwave", "clouds", "dn", "solid black"}}, function(tbl) 
	local sky = tbl.Dropdown 
	if sky ~= "none" then 
		if Lighting:FindFirstChildOfClass("Sky") then Lighting:FindFirstChildOfClass("Sky"):Destroy() end 
		local skybox = INST("Sky") 
		skybox.SkyboxLf = Skyboxes[sky].SkyboxLf 
		skybox.SkyboxBk = Skyboxes[sky].SkyboxBk 
		skybox.SkyboxDn = Skyboxes[sky].SkyboxDn 
		skybox.SkyboxFt = Skyboxes[sky].SkyboxFt 
		skybox.SkyboxRt = Skyboxes[sky].SkyboxRt 
		skybox.SkyboxUp = Skyboxes[sky].SkyboxUp 
		skybox.Name = "override" 
		skybox.Parent = Lighting 
	else 
		if Lighting:FindFirstChildOfClass("Sky") then Lighting:FindFirstChildOfClass("Sky"):Destroy() end 
		if oldSkybox ~= nil then oldSkybox:Clone().Parent = Lighting end 
	end 
end) 
world:Element("ToggleColor", "item esp", {default = {Color = COL3RGB(255, 255, 255)}}, function(tbl) 
	for i,weapon in pairs(workspace.Debris:GetChildren()) do 
		if weapon:IsA("BasePart") and Weapons:FindFirstChild(weapon.Name) then 
			weapon.BillboardGui.ImageLabel.Visible = tbl.Toggle and TBLFIND(values.visuals.world["types"].Jumbobox, "icon") and true or false 
		end 
	end 
end) 
world:Element("Jumbobox", "types", {options = {"icon"}}, function(tbl) 
	for i,weapon in pairs(workspace.Debris:GetChildren()) do 
		if weapon:IsA("BasePart") and Weapons:FindFirstChild(weapon.Name) then 
			weapon.BillboardGui.ImageLabel.Visible = values.visuals.world["item esp"].Toggle and TBLFIND(tbl.Jumbobox, "icon") and true or false 
			weapon.BillboardGui.ImageLabel.ImageColor3 = values.visuals.world["item esp"].Color 
		end 
	end 
end) 
configs = misc:Sector("configs", "Left") 
configs:Element("TextBox", "config", {placeholder = "config name"}) 
configs:Element("Button", "save", {}, function() if values.misc.configs.config.Text ~= "" then library:SaveConfig(values.misc.configs.config.Text) end end) 
configs:Element("Button", "load", {}, function() if values.misc.configs.config.Text ~= "" then ConfigLoad:Fire(values.misc.configs.config.Text) end end) 

crosshaireditor = misc:Sector("crosshair editor", "Right") 
function UpdateCrosshair() 
	if values.misc["crosshair editor"].enabled.Toggle then 
		local length = values.misc["crosshair editor"].length.Slider 
		Crosshair.LeftFrame.Size = UDIM2(0, length, 0, 2) 
		Crosshair.RightFrame.Size = UDIM2(0, length, 0, 2) 
		Crosshair.TopFrame.Size = UDIM2(0, 2, 0, length) 
		Crosshair.BottomFrame.Size = UDIM2(0, 2, 0, length) 
		for _,frame in pairs(Crosshair:GetChildren()) do 
			if FIND(frame.Name, "Frame") then 
				frame.BorderColor3 = COL3(0,0,0) 
				if values.misc["crosshair editor"].border.Toggle then 
					frame.BorderSizePixel = 1 
				else 
					frame.BorderSizePixel = 0 
				end 
			end 
		end 
	else 
		Crosshair.LeftFrame.Size = UDIM2(0, 10, 0, 2) 
		Crosshair.RightFrame.Size = UDIM2(0, 10, 0, 2) 
		Crosshair.TopFrame.Size = UDIM2(0, 2, 0, 10) 
		Crosshair.BottomFrame.Size = UDIM2(0, 2, 0, 10) 
		for _,frame in pairs(Crosshair:GetChildren()) do 
			if FIND(frame.Name, "Frame") then 
				frame.BorderSizePixel = 0 
			end 
		end 
	end 
end 
crosshaireditor:Element("Toggle", "enabled", nil, UpdateCrosshair) 
crosshaireditor:Element("Slider", "length", {min = 1, max = 15, default = 10}, UpdateCrosshair) 
crosshaireditor:Element("Toggle", "border", nil, UpdateCrosshair) 

client = misc:Sector("client", "Right") 
configs:Element("Toggle", "keybind list", nil, function(tbl) 
	library:SetKeybindVisible(tbl.Toggle) 
end) 
client:Element("Toggle", "spectator list", nil, function(tbl)
	if tbl.Toggle then
		game.CoreGui.SpectatorsList.Enabled = true
	else
		game.CoreGui.SpectatorsList.Enabled = false
	end
end)
client:Element("Toggle", "view spectate type")
client:Element("Slider", "spectator detection dist", {min = 2, max = 15, default = 10})
client:Element("Toggle", "Anti Votekick")
client:Element("Slider", "Anti Votekick Threshold", {min = 1, max = 10, default = 3})
client:Element("Toggle", "anti gravity ragdolls")
client:Element("Toggle", "infinite cash", nil, function(tbl) 
	if tbl.Toggle then 
		LocalPlayer.Cash.Value = 999999999 
	end 
end) 
client:Element("Toggle", "infinite crouch") 
client:Element("Jumbobox", "damage bypass", {options = {"fire", "fall"}}) 
client:Element("Jumbobox", "gun modifiers", {options = {"recoil", "spread", "reload", "equip", "ammo", "automatic", "penetration", "firerate"}}) 
client:Element("Toggle", "remove killers", {}, function(tbl) 
	if tbl.Toggle then 
		if workspace:FindFirstChild("Map") and workspace:FindFirstChild("Map"):FindFirstChild("Killers") then 
			local clone = workspace:FindFirstChild("Map"):FindFirstChild("Killers"):Clone() 
			clone.Name = "KillersClone" 
			clone.Parent = workspace:FindFirstChild("Map") 

			workspace:FindFirstChild("Map"):FindFirstChild("Killers"):Destroy() 
		end 
	else 
		if workspace:FindFirstChild("Map") and workspace:FindFirstChild("Map"):FindFirstChild("KillersClone") then 
			workspace:FindFirstChild("Map"):FindFirstChild("KillersClone").Name = "Killers" 
		end 
	end 
end) 
client:Element("ToggleColor", "hitmarker", {default = {Color = COL3RGB(255,255,255)}}) 
client:Element("ToggleColor", "hitmarker 2", {default = {Color = COL3RGB(255,255,255)}}) 
client:Element("Slider", "hitmarker duration", {min = 1, max = 100, default = 0}) 
client:Element("Toggle", "buy any grenade") 
client:Element("Toggle", "chat alive") 
client:Element("Jumbobox", "shop", {options = {"inf time", "anywhere"}}) 
client:Element("Jumbobox", "anti spectate", {options = {"classic", "random", "upside down", "floating point", "backwards", "head", "gun", "custom"}}) 
client:Element("Slider", "custom spectate angle", {min = -180, max = 180, default = 0}) 
client:Element("Toggle", "anti spectate visible shots") 

oldgrenadeallowed = Client.grenadeallowed 
Client.grenadeallowed = function(...) 
	if values.misc.client["buy any grenade"].Toggle then 
		return true 
	end 

	return oldgrenadeallowed(...) 
end 

movement = misc:Sector("movement", "Left") 
movement:Element("Toggle", "bunny hop") 
movement:Element("Dropdown", "direction", {options = {"forward", "directional", "directional 2"}}) 
movement:Element("Dropdown", "type", {options = {"gyro", "cframe", "fuck", "bypass"}})
movement:Element("Dropdown", "gyro behaviour", {options = {"no fling", "fling"}}) 
movement:Element("Slider", "speed", {min = 15, max = 300, default = 40}) 
movement:Element("Toggle", "walk speed") 
movement:Element("Slider", "walkspeed", {min = 1, max = 75, default = 16}) 
movement:Element("ToggleKeybind", "fly")
movement:Element("ToggleKeybind", "slow fall")
movement:Element("ToggleKeybind", "no fall")
movement:Element("ToggleKeybind", "noclip")      
movement:Element("ToggleKeybind", "jump bug") 
movement:Element("ToggleKeybind", "edge jump") 
movement:Element("ToggleKeybind", "edge bug") 

chat = misc:Sector("chat", "Left") 
chat:Element("Toggle", "chat spam") 
chat:Element("Dropdown", "type", {options = {"stroke", "colgatesense"}}) 
chat:Element("Slider", "speed (ms)", {min = 15, max = 300, default = 50}) 
chat:Element("Toggle", "kill say") 
chat:Element("TextBox", "message", {placeholder = "message"}) 
chat:Element("Toggle", "no filter") 

grenades = misc:Sector("grenades", "Right") 
grenades:Element("ToggleKeybind", "spam grenades") 
coroutine.wrap(function() 
	while true do 
		wait(0.5) 
		if values.misc.grenades["spam grenades"].Toggle and values.misc.grenades["spam grenades"].Active then 
			local oh1 = game:GetService("ReplicatedStorage").Weapons[values.misc.grenades.grenade.Dropdown].Model 
			local oh3 = 25 
			local oh4 = 35 
			local oh6 = "" 
			local oh7 = "" 
			game:GetService("ReplicatedStorage").Events.ThrowGrenade:FireServer(oh1, nil, oh3, oh4, Vec3(0,-100,0), oh6, oh7) 
		end 
	end 
end)() 
grenades:Element("Dropdown", "grenade", {options = {"Flashbang", "Smoke Grenade", "Molotov", "HE Grenade", "Decoy Grenade"}}) 
grenades:Element("Dropdown", "crash server type", {options = {'both', 'grenades (patched i think)', 'mag drop'}})
grenades:Element("Slider", "crash server mag drop multi", {min = 1, max = 100, default = 1})
function magdropcrash(r1)
	if values.misc.grenades['crash server type'].Dropdown == 'mag drop' or values.misc.grenades['crash server type'].Dropdown == 'both' then
		for i=0,r1,1 do
			game:GetService("ReplicatedStorage").Events.DropMag:FireServer(LocalPlayer.Character.Gun.Mag)
		end
	end
end
function mollycrash()
	if values.misc.grenades['crash server type'].Dropdown == 'grenades (patched i think)' or values.misc.grenades['crash server type'].Dropdown == 'both' then
		local oh1 = game:GetService("ReplicatedStorage").Weapons['Decoy Grenade'].Model
		local oh3 = 25
		local oh4 = 35
		local oh6 = ""
		local oh7 = ""
		game:GetService("ReplicatedStorage").Events.ThrowGrenade:FireServer(oh1, nil, oh3, oh4, Vector3.new(0,-100,0), oh6, oh7)
	end
end
grenades:Element("Toggle", "crash server", {}, function(tbl)
	if LocalPlayer.Character then
		if tbl.Toggle == true then
			game:GetService("ReplicatedStorage").Events.PlayerChatted:FireServer(1, false, "Innocent", false, true)
		end
		coroutine.wrap(function()
			while values.misc.grenades['crash server'].Toggle == true do
				pcall(function()
					if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("UpperTorso") then
						mollycrash()
						magdropcrash(250*values.misc.grenades['crash server mag drop multi'].Slider)
					end
				end)
				RunService.RenderStepped:Wait()
				pcall(function()
					if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("UpperTorso") then
						mollycrash()
						magdropcrash(500)
					end
				end)
				RunService.Stepped:Wait()
				pcall(function()
					if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("UpperTorso") then
						mollycrash()
						magdropcrash(500)
					end
				end)
				RunService.Heartbeat:Wait()
				pcall(function()
					if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("UpperTorso") then
						mollycrash()
						magdropcrash(500)
					end
				end)
			end
		end)()
	else
		if tbl.Toggle == true then
			CreateHitElement("Spawn in with a gun to crash the server.",Color3.new(1,1,1))
		end
	end
end)
grenades:Element("ToggleKeybind", "ping exploit", {Type = "Toggle", Key = "T"})   
grenades:Element("Slider", "ping limit", {min = 1, max = 4, default = 2})  
grenades:Element("Toggle", "anti-ping")  
grenades:Element("Toggle", "anti-ping 2")  

Dance = INST("Animation") 
Dance.AnimationId = "rbxassetid://5917459365" 

LoadedAnim = nil

animations = misc:Sector("animations", "Right") 
animations:Element("Slider", "anim speed", {min=1,max=350,default=1})
animations:Element("ToggleKeybind", "enabled", nil, function(tbl) 
	pcall(function() 
		LoadedAnim:Stop() 
	end) 
	if tbl.Toggle and tbl.Active then
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then 
			LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance) 
			LoadedAnim.Priority = Enum.AnimationPriority.Action 
			LoadedAnim:Play(0.1,1,values.misc.animations["anim speed"].Slider) 
		end 
	end 
end) 
animations:Element("Dropdown", "animation", {options = {"Fake swim", "Fake walk", "Fake jump",  "Fake sit", "Default", "Floss"}}, function(tbl)
	Dance.AnimationId = tbl.Dropdown == "Fake swim" and "rbxassetid://616119360" or tbl.Dropdown == "Fake walk" and "rbxassetid://1330180905"  or tbl.Dropdown == "Fake sit" and "rbxassetid://507768133" or tbl.Dropdown == "Fake jump" and "rbxassetid://896586529" or tbl.Dropdown == "Default" and "rbxassetid://3732699835" or tbl.Dropdown == "Floss" and "rbxassetid://5917459365" 

	pcall(function() 
		LoadedAnim:Stop() 
	end) 

	if values.misc.animations.enabled.Toggle and values.misc.animations.enabled.Active then 
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then 
			LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance) 
			LoadedAnim.Priority = Enum.AnimationPriority.Action 
			LoadedAnim:Play(0.1,1,values.misc.animations["anim speed"].Slider) 
		end 
	end 
end) 

library.New = nil


do 
	utility.default = { 
		Line = { 
			Thickness = 1.5, 
			Color = COL3RGB(255, 255, 255), 
			Visible = false 
		}, 
		Text = { 
			Size = 13, 
			Center = true, 
			Outline = true, 
			Font = Drawing.Fonts.Plex, 
			Color = COL3RGB(255, 255, 255), 
			Visible = false 
		}, 
		Square = { 
			Thickness = 1.5, 
			Filled = false, 
			Color = COL3RGB(255, 255, 255), 
			Visible = false 
		}, 
	} 
	function utility.create(type, isOutline) 
		local drawing = Drawing.new(type) 
		for i, v in pairs(utility.default[type]) do 
			drawing[i] = v 
		end 
		if isOutline then 
			drawing.Color = COL3(0,0,0) 
			drawing.Thickness = 3 
		end 
		return drawing 
	end 
	function utility.add(plr) 
		if not objects[plr] then 
			objects[plr] = { 
				Name = utility.create("Text"), 
				Weapon = utility.create("Text"), 
				Armor = utility.create("Text"), 
				BoxOutline = utility.create("Square", true), 
				Box = utility.create("Square"), 
				HealthOutline = utility.create("Line", true), 
				Health = utility.create("Line"), 
			} 
		end 
	end 
	for _,plr in pairs(Players:GetPlayers()) do 
		if Player ~= LocalPlayer then 
			utility.add(plr) 
		end 
	end 
	Players.PlayerAdded:Connect(utility.add) 
	Players.PlayerRemoving:Connect(function(plr) 
		wait() 
		if objects[plr] then
			local s1, e1 = "unknown", "unknown"
			local s2, e2 = "unknown", "unknown"
			for i,v in pairs(objects[plr]) do
				if v then
					s1, e2 = pcall(function()
						v:Remove()
					end)
					s2, e2 = pcall(function()
						v:Destroy()
					end)
				end
			end
			e1, e2 = e1 or "unknown", e2 or "unknown"
			print("Drawing Removal [TEST] tbl:"..unpacktbl(objects[plr]))
			warn("v:Remove() output: "..e1..[[

v:Destroy() output: ]]..e2)
			objects[plr] = nil
		end
	end) 
end 
Items = INST("ScreenGui") 
Items.Name = "Items" 
Items.Parent = game.CoreGui 
Items.ResetOnSpawn = false 
Items.ZIndexBehavior = "Global" 
do 
	function add(plr) 
		local ImageLabel = INST("ImageLabel") 
		ImageLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
		ImageLabel.BackgroundTransparency = 1.000 
		ImageLabel.Size = UDIM2(0, 62, 0, 25) 
		ImageLabel.Visible = false 
		ImageLabel.Image = "rbxassetid://1784884358" 
		ImageLabel.ScaleType = Enum.ScaleType.Fit 
		ImageLabel.Name = plr.Name 
		ImageLabel.AnchorPoint = Vec2(0.5,0.5) 
		ImageLabel.Parent = Items 
	end 
	for _,plr in pairs(Players:GetPlayers()) do 
		if Player ~= LocalPlayer then 
			add(plr) 
		end 
	end 
	Players.PlayerAdded:Connect(add)
	Players.PlayerRemoving:Connect(function(plr) 
		wait() 
		Items[plr.Name]:Destroy() 
	end) 
end 
debrisitems = {} 
workspace.Debris.ChildAdded:Connect(function(obj) 
	local self = obj
	if game.Players:FindFirstChild(self.Name) and game.Players:FindFirstChild(self.Name).ClassName == "Player" and self:IsA("Model") and values.misc.client["anti gravity ragdolls"].Toggle == true then
		for _, v in pairs(self:GetDescendants()) do
			if v:IsA("MeshPart") then
				coroutine.wrap(function()
					task.wait(0.15)
					local a = Instance.new("BodyVelocity", v)
					a.Velocity = (v.Velocity)+Vector3.new(0,20,0)
					a.P = 1250
					a.MaxForce = Vector3.new(99999,99999,99999)
					local b = Instance.new("BodyAngularVelocity", v)
					b.AngularVelocity = Vector3.new(0,0,0)
					b.MaxTorque = Vector3.new(99999,99999,99999)
					b.P = 1250
				end)()
			end
		end
	end
	if obj:IsA("BasePart") and Weapons:FindFirstChild(obj.Name) then 
		RunService.RenderStepped:Wait() 

		local BillboardGui = INST("BillboardGui") 
		BillboardGui.AlwaysOnTop = true 
		BillboardGui.Size = UDIM2(0, 40, 0, 40) 
		BillboardGui.Adornee = obj 

		local ImageLabel = INST("ImageLabel") 
		ImageLabel.Parent = BillboardGui 
		ImageLabel.BackgroundTransparency = 1 
		ImageLabel.Size = UDIM2(1, 0, 1, 0) 
		ImageLabel.ImageColor3 = values.visuals.world["item esp"].Color 
		ImageLabel.Image = GetIcon.getWeaponOfKiller(obj.Name) 
		ImageLabel.ScaleType = Enum.ScaleType.Fit 
		ImageLabel.Visible = values.visuals.world["item esp"].Toggle and TBLFIND(values.visuals.world["types"].Jumbobox, "icon") and true or false 

		BillboardGui.Parent = obj 
	end 
end) 
for _, obj in pairs(workspace.Debris:GetChildren()) do 
	if obj:IsA("BasePart") and Weapons:FindFirstChild(obj.Name) then 
		RunService.RenderStepped:Wait() 

		local BillboardGui = INST("BillboardGui") 
		BillboardGui.AlwaysOnTop = true 
		BillboardGui.Size = UDIM2(0, 40, 0, 40) 
		BillboardGui.Adornee = obj 

		local ImageLabel = INST("ImageLabel") 
		ImageLabel.Parent = BillboardGui 
		ImageLabel.BackgroundTransparency = 1 
		ImageLabel.Size = UDIM2(1, 0, 1, 0) 
		ImageLabel.ImageColor3 = values.visuals.world["item esp"].Color 
		ImageLabel.Image = GetIcon.getWeaponOfKiller(obj.Name) 
		ImageLabel.ScaleType = Enum.ScaleType.Fit 
		ImageLabel.Visible = values.visuals.world["item esp"].Toggle and TBLFIND(values.visuals.world["types"].Jumbobox, "icon") and true or false 

		BillboardGui.Parent = obj 
	end 
end 
function YROTATION(cframe) 
	local x, y, z = cframe:ToOrientation() 
	return CF(cframe.Position) * CFAngles(0,y,0) 
end 
function XYROTATION(cframe) 
	local x, y, z = cframe:ToOrientation() 
	return CF(cframe.Position) * CFAngles(x,y,0) 
end 
weps = { 
	Pistol = {"USP", "P2000", "Glock", "DualBerettas", "P250", "FiveSeven", "Tec9", "CZ", "DesertEagle", "R8"}, 
	SMG = {"MP9", "MAC10", "MP7", "UMP", "P90", "Bizon"}, 
	Rifle = {"M4A4", "M4A1", "AK47", "Famas", "Galil", "AUG", "SG"}, 
	Sniper = {"AWP", "Scout", "G3SG1"} 
} 
weps2 = { 
	Pistol = {"USP", "P2000", "Glock", "DualBerettas", "P250", "FiveSeven", "Tec9", "CZ", "DesertEagle", "R8"}, 
	SMG = {"MP9", "MAC10", "MP7", "UMP", "P90", "Bizon"}, 
	Rifle = {"M4A4", "M4A1", "AK47", "Famas", "Galil", "AUG", "SG"}, 
	Sniper = {"AWP", "Scout", "G3SG1"} 
} 
function GetWeaponRage(weapon) 
	return TBLFIND(weps.Pistol, weapon) and "pistol" or TBLFIND(weps.Rifle, weapon) and "rifle" or weapon == "AWP" and "awp" or weapon == "G3SG1"  and "auto" or weapon == "Scout" and "scout" or "default" 
end 
function GetStatsRage(weapon) 
	if weapon == "default" then 
		return values.rage.weapons.default 
	else 
		if values.rage.weapons[weapon]["override default"].Toggle then 
			return values.rage.weapons[weapon] 
		else 
			return values.rage.weapons.default 
		end 
	end 
end 
function GetWeaponLegit(weapon) 
	return TBLFIND(weps2.Pistol, weapon) and "pistol" or TBLFIND(weps2.Rifle, weapon) and "rifle" or TBLFIND(weps2.SMG, weapon) and "smg" or TBLFIND(weps2.Sniper, weapon) and "sniper" or "default" 
end 
function GetStatsLegit(weapon) 
	if weapon == "default" then 
		return values.legit.main.default 
	else 
		if values.legit.main[weapon]["override default"].Toggle then 
			return values.legit.main[weapon] 
		else 
			return values.legit.main.default 
		end 
	end 
end 
OldClientFireBullet = Client.firebullet
function shootsound()
	if LocalPlayer.Character:FindFirstChild("Gun") ~= nil and LocalPlayer.Character:FindFirstChild("Gun"):FindFirstChild('Shoot') ~= nil and LocalPlayer.Character:FindFirstChild("Gun"):FindFirstChild('Shoot').SoundId then
		soundid = LocalPlayer.Character:FindFirstChild("Gun") ~= nil and LocalPlayer.Character:FindFirstChild("Gun"):FindFirstChild('Shoot') ~= nil and LocalPlayer.Character:FindFirstChild("Gun"):FindFirstChild('Shoot').SoundId
		Sound6999 = Instance.new("Sound", game:GetService("SoundService"))
		Sound6999.SoundId = soundid
		Sound6999.PlayOnRemove = true
		Sound6999.Volume = values.visuals.self.volume.Slider
		Sound6999:Destroy()
	end
end
Client.firebullet = function(...)
	if values.rage.exploits['double tap (firebullet)'].Toggle == true then
		OldClientFireBullet(...)
	end
	if values.rage.exploits['auto peek'].Toggle == true and values.rage.exploits['auto peek'].Active == true and autopeekpos ~= nil then
		if values.rage.exploits['auto peek visibility check'].Toggle == true then
			local ray = RAY(LocalPlayer.Character.HumanoidRootPart.Position, (autopeekpos.Position - LocalPlayer.Character.HumanoidRootPart.Position).Unit * (autopeekpos.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude)
			local hit, pos = workspace:FindPartOnRayWithIgnoreList(ray, {LocalPlayer.Character, fakeduckfolder, vposfolder, FakelagFolder, autopeekFolder, attachmentmanager, unpack(Collision)})
			if (pos - autopeekpos.Position).Magnitude < 0.25 then
				if values.rage.exploits["auto peek method"].Dropdown == "CFrame" then
					LocalPlayer.Character.HumanoidRootPart.CFrame = autopeekpos
				elseif values.rage.exploits["auto peek method"].Dropdown == "Tween" then
					library:Tween(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(0.1), {CFrame = autopeekpos})
				elseif values.rage.exploits["auto peek method"].Dropdown == "Backtrack (CFrame)" then
					LocalPlayer.Character.HumanoidRootPart.CFrame = autopeekpos
				elseif values.rage.exploits["auto peek method"].Dropdown == "Backtrack (Tween)" then
					library:Tween(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(0.1), {CFrame = autopeekpos})
				end
			end 
		else
			if values.rage.exploits["auto peek method"].Dropdown == "CFrame" then
				LocalPlayer.Character.HumanoidRootPart.CFrame = autopeekpos
			elseif values.rage.exploits["auto peek method"].Dropdown == "Tween" then
				library:Tween(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(0.1), {CFrame = autopeekpos})
			elseif values.rage.exploits["auto peek method"].Dropdown == "Backtrack (CFrame)" then
				LocalPlayer.Character.HumanoidRootPart.CFrame = autopeekpos
			elseif values.rage.exploits["auto peek method"].Dropdown == "Backtrack (Tween)" then
				library:Tween(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(0.1), {CFrame = autopeekpos})
			end
		end
	end
	if values.visuals.self["third person"].Toggle == true and values.visuals.self["third person"].Active == true and values.visuals.self["shoot sounds in third person"].Toggle == true then
		shootsound()
	end
	if values.rage.exploits["custom tap"].Toggle == true and values.rage.exploits["custom tap"].Active == true and values.rage.exploits["method"].Dropdown == "firebullet" and values.rage.exploits["custom tap amount"].Slider - 1 ~= 0 then
		for count=1,values.rage.exploits["custom tap amount"].Slider-1,1 do	
			OldClientFireBullet(...)
		end
	end
	return OldClientFireBullet(...)
end
Jitter = false 
Spin = 0 
RageTarget = nil
Filter = false 
LastStep  = nil
TriggerDebounce = false 
DisableAA = false 
Fov = Drawing.new("Circle") 
oldkbyaw = nil 
Fov.Filled = false 
Fov.Color = COL3RGB(15,15,15) 
Fov.Transparency = 1
Fov.Position = Vec2(Mouse.X, Mouse.Y + 16) 
Fov.Radius = 120 
alreadylocking = nil
gigagong = false
nofallbv = nil
bv = nil
jit = false
game:GetService("Workspace").Status.Timer:GetPropertyChangedSignal("Value"):Connect(function()
	if game:GetService("Workspace").Status.Timer.Value > 75 then
		jit = true
	end
end)
game:GetService("Workspace").Status.BuyTime:GetPropertyChangedSignal("Value"):Connect(function()
	if game:GetService("Workspace").Status.BuyTime.Value > 1 and game:GetService("Workspace").Status.Timer.Value < 30 then
		jit = false
	end
end)
ltickcheck = 0
ltickcheck_1 = 0
cstick = 0
vctick = 0
hbetick = 0
function nocliprrr2(v)
	if not v:IsA("BasePart") then
		return
	end
	v.CanCollide = false
end
function nocliprrr()
	if not values.misc.movement["noclip"].Toggle or not values.misc.movement["noclip"].Active or not LocalPlayer.Character then
		return
	end
	for i,v in pairs(LocalPlayer.Character:GetDescendants()) do
		nocliprrr2(v)
	end
end
RunService.Stepped:Connect(nocliprrr)
function VisualsRRR()
	Lighting.ClockTime = values.visuals.effects['time changer'].Slider
	Camera.ColorCorrection.Saturation = values.visuals.effects['saturation'].Slider / 10
	Camera.ColorCorrection.Contrast = values.visuals.effects['contrast'].Slider / 10
	bloomeffect.Intensity = values.visuals.effects['bloom'].Slider / 5
	bloomeffect.Threshold = values.visuals.effects["threshold"].Slider / 10
	bloomeffect.Size = values.visuals.effects['size'].Slider
end
function stonksquestionmark3(Obj)
	if Obj.Name ~= "stonks" then
		return
	end
	Obj.Visible = values.visuals.players['visible chams'].Toggle and (values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team)
	Obj.Color3 = values.visuals.players['visible chams'].Color 
	Obj.Transparency = values.visuals.players['visible chams'].Transparency
end
function stonksquestionmark2(Player)
	if not Player.Character then 
		return
	end
	for _2,Obj in pairs(Player.Character:GetDescendants()) do 
		stonksquestionmark3(Obj)
	end
end
function stonksquestionmark()
	if (tick() - vctick) < 1 then
		return
	end
	for _,Player in pairs(Players:GetPlayers()) do 
		stonksquestionmark2(Player)
	end
	vctick = tick()
end
RunService.RenderStepped:Connect(function(step)
	VisualsRRR()
	stonksquestionmark()
	if values.misc.chat["chat spam"].Toggle == true and (tick() - cstick) > (values.misc.chat["speed (ms)"].Slider/1000) then 
		game:GetService("ReplicatedStorage").Events.PlayerChatted:FireServer(values.misc.chat.type.Dropdown == "stroke" and "'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''" or "brush your teeth", false, "Innocent", false, true) 
		cstick = tick()
	end 
	if values.misc.grenades["anti-ping"].Toggle == true then
		pcall(function()
			for i,v in pairs(workspace["Ray_Ignore"]:GetChildren()) do
				if v.Name == "MagDrop" then
					v:Destroy()
				end
			end
		end)
	end 
	if values.misc.grenades["anti-ping 2"].Toggle == true then
		pcall(function()
			for i,v in pairs(workspace["Ray_Ignore"]:GetChildren()) do
				if v.Name == "MagDrop" or v:IsDescendantOf(workspace["Ray_Ignore"].Smokes) or v:IsDescendantOf(workspace["Ray_Ignore"].Fires) then
					v:Destroy()
				end
			end
			for i,v in pairs(workspace["Debris"]:GetChildren()) do
				v:Destroy()
			end 
		end)
	end 
	pcall(function()
		if values.visuals.players["visible chams 2"].Toggle == true and (tick() - ltickcheck_1) > (1/values.visuals.players["vchams2 refresh rate"].Slider) then
			refreshchams()
			ltickcheck_1 = tick()
		end 
	end)
	pcall(function()
		if values.rage.exploits['HitBox Extender'].Toggle == true and tick() - hbetick > 0.15 then
			for _,v in pairs (game.Players:GetPlayers()) do
				if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("HeadHB") then
					v.Character.HeadHB.CanCollide = false
					v.Character.HeadHB.Massless = true
					v.Character.HeadHB.Color = values.rage.exploits['Visible HitBox'].Color
					v.Character.HeadHB.Transparency = values.rage.exploits['Visible HitBox'].Toggle == true and values.rage.exploits['Visible HitBox'].Transparency or 1
					v.Character.HeadHB.Size = Vector3.new(values.rage.exploits['HitBox Size'].Slider,values.rage.exploits['HitBox Size'].Slider,values.rage.exploits['HitBox Size'].Slider)
				end
			end
			hbetick = tick()
		elseif tick() - hbetick > 0.15 then
			for _,v in pairs (game.Players:GetPlayers()) do
				if v ~= game.Players.LocalPlayer and v.Character and v.Character.HeadHB then
					v.Character.HeadHB.CanCollide = false
					v.Character.HeadHB.Massless = true
					v.Character.HeadHB.Transparency = 1
					v.Character.HeadHB.Size = Vector3.new(1.175, 1.175, 1.175)
				end
			end
			hbetick = tick()
		end
	end) 
	Fov.Visible = false
	if values.misc.movement["slow fall"].Toggle == true and values.misc.movement["slow fall"].Active == true and LocalPlayer.Character and LocalPlayer.Character.HumanoidRootPart then
		local v = LocalPlayer.Character.HumanoidRootPart.Velocity
		if v.Y < 0 then
			LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(v.X, v.Y * 0, v.Z)
		end
	end
	if values.misc.movement["no fall"].Toggle == true and values.misc.movement["no fall"].Active == true and LocalPlayer.Character and LocalPlayer.Character.HumanoidRootPart then
		pcall(function()
			bv:Destroy()
		end)
		local bv = INST("BodyVelocity")
		bv.MaxForce = Vec3(0,math.huge,0)
		bv.Velocity = Vec3(0,0,0)
	end 
	LastStep = step 
	Ping = game.Stats.PerformanceStats.Ping:GetValue() 
	RageTarget = nil 
	local CamCFrame = Camera.CFrame 
	local CamLook = CamCFrame.LookVector 
	local PlayerIsAlive = nil 
	local Character = LocalPlayer.Character 
	RageTarget = nil 
	Spin = CLAMP(Spin + values.rage.angles["spin speed"].Slider, 0, 360) 
	if Spin == 360 then Spin = 0 end 
	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character:FindFirstChild("Humanoid").Health > 0 and LocalPlayer.Character:FindFirstChild("UpperTorso") then 
		PlayerIsAlive = true 
	end 
	for i,v in pairs(ChamItems) do 
		if v.Parent == nil then 
			TBLREMOVE(ChamItems, i) 
		end 
	end 
	if PlayerIsAlive then 
		if values.visuals.world["Old Gun Sounds"].Toggle == true then
			pcall(function()
				local g = game.Players.LocalPlayer
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "AK47" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "AK47" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://1112730119"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "M4A1" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "M4A1" then
					g.Character.Gun.SShoot.SoundId = "rbxassetid://1665639883"
					g.Character.Gun.Shoot.SoundId = "rbxassetid://2515498997"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "Glock" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "Glock" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://1112951656"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "Galil" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "Galil" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://344800912"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "USP" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "USP" then
					g.Character.Gun.SShoot.SoundId = "rbxassetid://1112952739"
					g.Character.Gun.Shoot.SoundId = "rbxassetid://2515499360"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "P2000" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "P2000" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://263589107"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "P250" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "P250" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://340365431"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "DesertEagle" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "DesertEagle" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://202918645"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "MP9" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "MP9" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://222888810"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "UMP" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "UMP" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://206953341"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "Famas" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "Famas" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://206953280"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "Scout" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "Scout" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://1112858108"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "AUG" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "AUG" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://515215839"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "AWP" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "AWP" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://202918637"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "G3SG1" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "G3SG1" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://340365815"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "SG" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "SG" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://347270113"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "M4A4" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "M4A4" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://202918741"
				end
				if values.visuals.world["only selected guns"].Toggle == true and TBLFIND(values.visuals.world.guns.Jumbobox, g.Character.EquippedTool.Value) and g.Character.EquippedTool.Value == "Tec9" or values.visuals.world["only selected guns"].Toggle == false and g.Character.EquippedTool.Value == "Tec9" then
					g.Character.Gun.Shoot.SoundId = "rbxassetid://206953317"
				end
			end)
		end
		if values.misc.grenades["ping exploit"].Toggle == true and values.misc.grenades["ping exploit"].Active == true then
			pcall(function()
				for i = 1,values.misc.grenades["ping limit"].Slider,1 do
					game:GetService("ReplicatedStorage").Events.DropMag:FireServer(LocalPlayer.Character.Gun.Mag)
				end
			end)
		end 
		if (values.rage.exploits['auto peek'].Toggle == true and values.rage.exploits['auto peek'].Active == true and string.find(values.rage.exploits["auto peek method"].Dropdown, "Backtrack") and tick() - ltickcheck > values.rage.exploits["auto peek backtrack time (ms)"].Slider/1000) and LocalPlayer.Character then
			for i, v in pairs (autopeekFolder:GetChildren()) do
				v:Destroy()
			end
			local Velocity1 = LocalPlayer.Character.HumanoidRootPart.Velocity * (values.rage.exploits["velocity multiplier"].Slider/10)
			local Velocity = Vector3.new(Velocity1.X, values.rage.exploits['auto peek y velocity'].Toggle == true and Velocity1.Y or 0, Velocity1.Z)
			if values.rage.exploits["visualize auto peek"].Toggle == true and LocalPlayer.Character then
				for i, v in pairs (LocalPlayer.Character:GetChildren()) do
					if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then 
						local part = INST("Part") 
						part.CFrame = values.rage.exploits['auto peek velocity'].Toggle == true and v.CFrame + (Velocity) or v.CFrame 
						part.Anchored = true 
						part.CanCollide = false 
						part.Material = Enum.Material.ForceField 
						part.Color = values.rage.exploits["visualize auto peek"].Color
						part.Name = v.Name 
						part.Transparency = values.rage.exploits["visualize auto peek"].Transparency 
						part.Size = v.Size 
						part.Parent = autopeekFolder 
					end
				end
			end
			autopeekpos = values.rage.exploits['auto peek velocity'].Toggle == true and LocalPlayer.Character.HumanoidRootPart.CFrame + Velocity or LocalPlayer.Character.HumanoidRootPart.CFrame
			ltickcheck = tick()
		end
		local SelfVelocity = LocalPlayer.Character.HumanoidRootPart.Velocity 
		if values.rage.fakelag["ping spike"].Toggle and values.rage.fakelag["ping spike"].Active then 
			for count = 1, 20  do 
				game:GetService("ReplicatedStorage").Events.RemoteEvent:FireServer({[1] = "createparticle", [2] = "bullethole", [3] = LocalPlayer.Character.Head, [4] = Vec3(0,0,0)}) 
			end 
		end 
		local Root = LocalPlayer.Character.HumanoidRootPart 
		if values.misc.client["infinite crouch"].Toggle then 
			Client.crouchcooldown = 0 
		end 
		if TBLFIND(values.misc.client["gun modifiers"].Jumbobox, "firerate") then 
			Client.DISABLED = false 
		end
		if TBLFIND(values.visuals.effects.removals.Jumbobox, "scope lines") then 
			NewScope.Enabled = LocalPlayer.Character:FindFirstChild("AIMING") and true or false 
			Crosshairs.Scope.Visible = false 
		else 
			NewScope.Enabled = false 
		end 
		local RageGuy 
		if values.rage.angles['fake duck'].Toggle == true and values.rage.angles['fake duck'].Active == true and game.Players.LocalPlayer.Character ~= nil then
			pcall(function()
				game.Players.LocalPlayer.Character.LowerTorso.Root.C0 = CFrame.new(0,2.5,0)
				local Client = getsenv(game.Players.LocalPlayer.PlayerGui.Client)
				local CrouchAnim = nil
				for i,v in pairs(debug.getupvalues(Client.setcharacter)) do
					if type(v) == "userdata" and v.ClassName == "AnimationTrack" and v.Name == "Idle" then
						CrouchAnim = v	
					end
				end 
				CrouchAnim:Play()
				if values.rage.angles['visualize fake duck'].Toggle == true then
					for i, v in pairs (game.Players.LocalPlayer.Character:GetChildren()) do
						if v.Name == "Head" then
							coroutine.wrap(function()
								local dd = values.rage.angles["visualize fake duck material"].Dropdown;local mat=dd=="Smooth"and"SmoothPlastic"or dd=="Flat"and"Neon"or dd
								local squar = Instance.new("Part", fakeduckfolder)squar.CFrame=v.CFrame;squar.Material = mat;squar.Anchored = true;squar.CanCollide = false;squar.Color = values.rage.angles['visualize fake duck'].Color;squar.Transparency = values.rage.angles['visualize fake duck'].Transparency;squar.Size = v.Size;library:Tween(squar, TweenInfo.new(0.1), {Transparency = 1})task.wait(0.1)squar:Destroy()
							end)()
						end
					end
				end
			end)
		end
		if workspace:FindFirstChild("Map") and Client.gun and Client.gun ~= "none" and Client.gun.Name ~= "C4" then 
			if values.rage.aimbot.enabled.Toggle and (values.rage.aimbot["buy time check"].Toggle == false or (game:GetService("Workspace"):FindFirstChild("Status") and game:GetService("Workspace").Status:FindFirstChild("BuyTime") and game:GetService("Workspace").Status.BuyTime.Value <= 0 or jit == true)) then 
				local Origin = values.rage.aimbot.origin.Dropdown == "character" and LocalPlayer.Character.LowerTorso.Position + Vec3(0, 2.5, 0) or CamCFrame.p 
				local Stats = GetStatsRage(GetWeaponRage(Client.gun.Name)) 
				for _,Player in pairs(Players:GetPlayers()) do 
					if TBLFIND(values.misc.client["gun modifiers"].Jumbobox, "firerate") then 
						Client.DISABLED = false 
					end 
					if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Humanoid").Health > 0 and Player.Team ~= "TTT" and Player ~= LocalPlayer then 
						if TBLFIND(values.rage.aimbot.resolver.Jumbobox, "pitch") then 
							Player.Character.UpperTorso.Waist.C0 = CFAngles(0, 0, 0) 
						end 
						if TBLFIND(values.rage.aimbot.resolver.Jumbobox, "roll") then 
							Player.Character.Humanoid.MaxSlopeAngle = 0 
						end 
					end 

					if Player.Character and Player.Character:FindFirstChild("Humanoid") and not Client.DISABLED and Player.Character:FindFirstChild("Humanoid").Health > 0 and Player.Team ~= "TTT" and (values.rage.aimbot["forcefield check"].Toggle == false or not Player.Character:FindFirstChildOfClass("ForceField")) and GetDeg(CamCFrame, Player.Character.Head.Position) <= Stats["max fov"].Slider and Player ~= LocalPlayer then 
						if Player.Team ~= LocalPlayer.Team and Player.Status.Team.Value ~= LocalPlayer.Status.Team.Value and Player:FindFirstChild("Status") and Player.Status.Alive.Value or values.rage.aimbot.teammates.Toggle and Player:FindFirstChild("Status") and Player.Status.Alive.Value then 
							local Hitboxes = {} 
							for _,Hitbox in ipairs(Stats.hitboxes.Jumbobox) do 
								if Stats["prefer body"].Toggle then 
									if Hitbox == "torso" then 
										Hitboxes[#Hitboxes+1] = (Player.Character.UpperTorso) 
									end
									if Hitbox == "pelvis" then
										Hitboxes[#Hitboxes+1] = (Player.Character.LowerTorso) 
									end
									if Hitbox == "arms" then
										Hitboxes[#Hitboxes+1] = (Player.Character.RightUpperArm) 
										Hitboxes[#Hitboxes+1] = (Player.Character.RightLowerArm) 
										Hitboxes[#Hitboxes+1] = (Player.Character.LeftUpperArm) 
										Hitboxes[#Hitboxes+1] = (Player.Character.LeftLowerArm) 
									end
									if Hitbox == "hands" then
										Hitboxes[#Hitboxes+1] = (Player.Character.RightHand) 
										Hitboxes[#Hitboxes+1] = (Player.Character.LeftHand) 
									end
									if Hitbox == "legs" then
										Hitboxes[#Hitboxes+1] = (Player.Character.RightUpperLeg) 
										Hitboxes[#Hitboxes+1] = (Player.Character.RightLowerLeg) 
										Hitboxes[#Hitboxes+1] = (Player.Character.LeftUpperLeg) 
										Hitboxes[#Hitboxes+1] = (Player.Character.LeftLowerLeg) 
									end
									if Hitbox == "feet" then
										Hitboxes[#Hitboxes+1] = (Player.Character.RightFoot) 
										Hitboxes[#Hitboxes+1] = (Player.Character.LeftFoot) 
									end
									if Hitbox == "head" and (not values.rage.aimbot["auto baim"].Toggle and not values.rage.aimbot["auto baim"].Active or Player.Character:FindFirstChild("FakeHead")) then 
										Hitboxes[#Hitboxes+1] = (Player.Character.Head) 
									end
								else 
									if Hitbox == "torso" then 
										Hitboxes[#Hitboxes+1] = (Player.Character.UpperTorso) 
									end
									if Hitbox == "pelvis" then 
										Hitboxes[#Hitboxes+1] = (Player.Character.LowerTorso) 
									end
									if Hitbox == "arms" then
										Hitboxes[#Hitboxes+1] = (Player.Character.RightUpperArm) 
										Hitboxes[#Hitboxes+1] = (Player.Character.RightLowerArm) 
										Hitboxes[#Hitboxes+1] = (Player.Character.LeftUpperArm) 
										Hitboxes[#Hitboxes+1] = (Player.Character.LeftLowerArm) 
									end
									if Hitbox == "hands" then
										Hitboxes[#Hitboxes+1] = (Player.Character.RightHand) 
										Hitboxes[#Hitboxes+1] = (Player.Character.LeftHand) 
									end
									if Hitbox == "legs" then
										Hitboxes[#Hitboxes+1] = (Player.Character.RightUpperLeg) 
										Hitboxes[#Hitboxes+1] = (Player.Character.RightLowerLeg) 
										Hitboxes[#Hitboxes+1] = (Player.Character.LeftUpperLeg) 
										Hitboxes[#Hitboxes+1] = (Player.Character.LeftLowerLeg) 
									end
									if Hitbox == "feet" then
										Hitboxes[#Hitboxes+1] = (Player.Character.RightFoot) 
										Hitboxes[#Hitboxes+1] = (Player.Character.LeftFoot) 
									end
									if not values.rage.aimbot["auto baim"].Toggle and not values.rage.aimbot["auto baim"].Active or Player.Character:FindFirstChild("FakeHead") then 
										Hitboxes[#Hitboxes+1] = (Player.Character.Head) 
									end
								end 
							end 
							if Client.gun:FindFirstChild("Melee") and values.rage.aimbot["knifebot"].Toggle then 
								local Ignore = {unpack(Collision)} 
								Ignore[#Ignore+1] = (workspace.Map.Clips) 
								Ignore[#Ignore+1] = (workspace.Map.SpawnPoints) 
								Ignore[#Ignore+1] = (LocalPlayer.Character) 
								Ignore[#Ignore+1] = Player.Character.HumanoidRootPart
								if Player.Character:FindFirstChild("BackC4") then 
									Ignore[#Ignore+1] = (Player.Character.BackC4) 
								end 
								if Player.Character:FindFirstChild("Gun") then 
									Ignore[#Ignore+1] = (Player.Character.Gun) 
								end 
								local Ignore2 = {unpack(Ignore)} 
								local targetpos = Player.Character.HumanoidRootPart.Position
								local mul = values.rage.aimbot["knifebot inf range"].Toggle and 4096 or values.rage.aimbot["knifebot range"].Slider
								local Ray = RAY(Origin, (targetpos - Origin).unit * mul)
								local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray, Ignore, false, true) 

								if Hit and Hit:IsDescendantOf(Player.Character) then 
									RageGuy = Hit 
									RageTarget = Hit 
									if not values.rage.aimbot["silent aim"].Toggle then 
										Camera.CFrame = CF(CamCFrame.Position, Hit.Position) 
									end 
									Filter = true 
									Client.firebullet() 
									CreateHitElement(('Hit '..Player.Name..' in the '..Hit.Name..' with '..returna_an(Client.gun.Name)), values.rage.others.HitLogs.Color)
									Lightning(Hit.Position, values.rage.others["lightning parts"].Slider, values.rage.others.Lightning.Color)
									Filter = false 

									local Arguments = { [1] = RageTarget, [2] = RageTarget.Position, [3] = Client.gun.Name, [4] = 4096, [5] = LocalPlayer.Character.Gun, [8] = 1, [9] = values.rage.aimbot["knifebot altfire"].Toggle, [10] = false, [11] = Vec3(), [12] = 16868, [13] = Vec3() } 
									game.ReplicatedStorage.Events.Hit:FireServer(unpack(Arguments)) 
									if values.rage.exploits["custom tap"].Toggle == true and values.rage.exploits["custom tap"].Active == true and values.rage.exploits["method"].Dropdown == "default" and values.rage.exploits["custom tap amount"].Slider - 1 ~= 0 then
										for count=1,values.rage.exploits["custom tap amount"].Slider-1,1 do	
											Client.firebullet()
											local Arguments = { [1] = Player.Character.HumanoidRootPart, [2] = Player.Character.HumanoidRootPart.Position, [3] = Client.gun.Name, [4] = 4096, [5] = LocalPlayer.Character.Gun, [8] = 1, [9] = values.rage.aimbot["knifebot altfire"].Toggle, [10] = false, [11] = Vec3(), [12] = 16868, [13] = Vec3() } 
											game.ReplicatedStorage.Events.Hit:FireServer(unpack(Arguments))		
											end										
									elseif values.rage.exploits["double tap"].Toggle and values.rage.exploits["double tap"].Active then
										Client.firebullet()
										local Arguments = { [1] = Player.Character.HumanoidRootPart, [2] = Player.Character.HumanoidRootPart.Position, [3] = Client.gun.Name, [4] = 4096, [5] = LocalPlayer.Character.Gun, [8] = 1, [9] = values.rage.aimbot["knifebot altfire"].Toggle, [10] = false, [11] = Vec3(), [12] = 16868, [13] = Vec3() } 
										game.ReplicatedStorage.Events.Hit:FireServer(unpack(Arguments))
									end
								end 
							else 
								local Ignore = {unpack(Collision)} 
								Ignore[#Ignore+1] = (workspace.Map.Clips) 
								Ignore[#Ignore+1] = (workspace.Map.SpawnPoints) 
								Ignore[#Ignore+1] = (LocalPlayer.Character) 
								Ignore[#Ignore+1] = (Player.Character.HumanoidRootPart) 
								if Player.Character:FindFirstChild("BackC4") then 
									Ignore[#Ignore+1] = (Player.Character.BackC4) 
								end 
								if Player.Character:FindFirstChild("Gun") then 
									Ignore[#Ignore+1] = (Player.Character.Gun) 
								end 

								for _,Hitbox in ipairs(Hitboxes) do 
									local Ignore2 = {unpack(Ignore)} 
									if values.rage.exploits["auto peek+"].Toggle == true and values.rage.exploits["auto peek"].Toggle == true then
										appcheck = Ray.new(autopeekpos.Position, (Hitbox.Position - autopeekpos.Position).Unit * 4096)
										local h, p = workspace:FindPartOnRayWithIgnoreList(appcheck, Ignore2)
										if h:IsDescendantOf(Player.Character) then
											if values.rage.exploits["auto peek method"].Dropdown == "CFrame" then
												LocalPlayer.Character.HumanoidRootPart.CFrame = autopeekpos
											elseif values.rage.exploits["auto peek method"].Dropdown == "Tween" then
												library:Tween(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(0.1), {CFrame = autopeekpos})
											elseif values.rage.exploits["auto peek method"].Dropdown == "Backtrack (CFrame)" then
												LocalPlayer.Character.HumanoidRootPart.CFrame = autopeekpos
											elseif values.rage.exploits["auto peek method"].Dropdown == "Backtrack (Tween)" then
												library:Tween(LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(0.1), {CFrame = autopeekpos})
											end
										end
									end
									if values.rage.aimbot["automatic penetration"].Toggle then 
										local Hits = {}
										local EndHit, Hit, Pos
										local Penetration = Client.gun.Penetration.Value * 0.01
										local targetpos = Hitbox.Position
										local Ray1 = Ray.new(Origin, (targetpos - Origin).unit * 9999)
										for i=1,4,1 do
											Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray1, Ignore2, false, true)
											if Hit ~= nil and Hit.Parent ~= nil then
												if Hit and Multipliers[Hit.Name] ~= nil and Hit:IsDescendantOf(Player.Character) then
													EndHit = Hit
												else
													Ignore2[#Ignore2+1] = (Hit)
													Hits[#Hits+1] = ({["Position"] = Pos,["Hit"] = Hit})
												end
											end
											if EndHit ~= nil or #Hits >= 4 or Hit == nil then break end
										end
										if EndHit ~= nil and Multipliers[EndHit.Name] ~= nil and #Hits <= 4 then
											if #Hits == 0 then
												local Damage = Client.gun.DMG.Value * Multipliers[EndHit.Name]
												if Player:FindFirstChild("Kevlar") then
													if string.find(EndHit.Name, "Head") then
														if Player:FindFirstChild("Helmet") then
															Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
														end
													else
														Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
													end
												end
												Damage = Damage * (Client.gun.RangeModifier.Value/100 ^ ((Origin - EndHit.Position).Magnitude/500))/100
												if Damage >= Stats["minimum damage"].Slider / Stats["damage multiplier"].Slider then
													RageGuy = EndHit
													RageTarget = EndHit 
													if not values.rage.aimbot["silent aim"].Toggle then
														Camera.CFrame = CFrame.new(CamCFrame.Position, EndHit.Position)
													end
													Filter = true
													if values.rage.aimbot["automatic fire"].Dropdown == "standard" then
														Client.firebullet()
														CreateHitElement(('Hit '..Player.Name..' in the '..Hit.Name..' with '..returna_an(Client.gun.Name)), values.rage.others.HitLogs.Color)
														Lightning(Hit.Position, values.rage.others["lightning parts"].Slider, values.rage.others.Lightning.Color)
														if values.rage.exploits["custom tap"].Toggle == true and values.rage.exploits["custom tap"].Active == true and values.rage.exploits["method"].Dropdown == "default" and values.rage.exploits["custom tap amount"].Slider - 1 ~= 0 then
															for count=1,values.rage.exploits["custom tap amount"].Slider-1,1 do
																Client.firebullet()
															end
														elseif values.rage.exploits["double tap"].Toggle and values.rage.exploits["double tap"].Active then
															Client.firebullet()
														end
													elseif values.rage.aimbot["automatic fire"].Dropdown == "hitpart" then
														Client.firebullet()
														CreateHitElement(('Hit '..Player.Name..' in the '..Hit.Name..' with '..returna_an(Client.gun.Name)), values.rage.others.HitLogs.Color)
														Lightning(Hit.Position, values.rage.others["lightning parts"].Slider, values.rage.others.Lightning.Color)
														local Arguments = {[1] = EndHit,[2] = EndHit.Position,[3] = LocalPlayer.Character.EquippedTool.Value,[4] = 100,[5] = LocalPlayer.Character.Gun,[8] = 1,[9] = false,[10] = false,[11] = Vector3.new(),[12] = 100,[13] = Vector3.new()}
														game.ReplicatedStorage.Events.Hit:FireServer(unpack(Arguments))
														if values.rage.exploits["custom tap"].Toggle == true and values.rage.exploits["custom tap"].Active == true and values.rage.exploits["method"].Dropdown == "default" and values.rage.exploits["custom tap amount"].Slider - 1 ~= 0 then
															for count=1,values.rage.exploits["custom tap amount"].Slider-1,1 do	
																Client.firebullet()
																local Arguments = {[1] = EndHit,[2] = EndHit.Position,[3] = LocalPlayer.Character.EquippedTool.Value,[4] = 100,[5] = LocalPlayer.Character.Gun,[8] = 1,[9] = false,[10] = false,[11] = Vector3.new(),[12] = 100,[13] = Vector3.new()}
																game.ReplicatedStorage.Events.Hit:FireServer(unpack(Arguments))		
															end										
														elseif values.rage.exploits["double tap"].Toggle and values.rage.exploits["double tap"].Active then
															Client.firebullet()
															local Arguments = {[1] = EndHit,[2] = EndHit.Position,[3] = LocalPlayer.Character.EquippedTool.Value,[4] = 100,[5] = LocalPlayer.Character.Gun,[8] = 1,[9] = false,[10] = false,[11] = Vector3.new(),[12] = 100,[13] = Vector3.new()}
															game.ReplicatedStorage.Events.Hit:FireServer(unpack(Arguments))
														end
													end
													Filter = false
													break
												end
											else
												local penetration = Client.gun.Penetration.Value * 0.01
												local limit = 0
												local dmgmodifier = 1
												for i = 1, #Hits do
													local data = Hits[i]
													local part = data["Hit"]
													local pos = data["Position"]
													local modifier = 1
													if part.Material == Enum.Material.DiamondPlate then
														modifier = 3
													end
													if part.Material == Enum.Material.CorrodedMetal or part.Material == Enum.Material.Metal or part.Material == Enum.Material.Concrete or part.Material == Enum.Material.Brick then
														modifier = 2
													end
													if part.Name == "Grate" or part.Material == Enum.Material.Wood or part.Material == Enum.Material.WoodPlanks then
														modifier = 0.1
													end
													if part.Name == "nowallbang" then
														modifier = 100
													end
													if part:FindFirstChild("PartModifier") then
														modifier = part.PartModifier.Value
													end
													if part.Transparency == 1 or part.CanCollide == false or part.Name == "Glass" or part.Name == "Cardboard" then
														modifier = 0
													end
													local direction = (Hitbox.Position - pos).unit * math.clamp(Client.gun.Range.Value, 1, 100)
													local ray = Ray.new(pos + direction * 1, direction * -2)
													local _,endpos = workspace:FindPartOnRayWithWhitelist(ray, {part}, true)
													local thickness = (endpos - pos).Magnitude
													thickness = thickness * modifier
													limit = math.min(penetration, limit + thickness)
													dmgmodifier = 1 - limit / penetration
												end
												local Damage = Client.gun.DMG.Value * Multipliers[EndHit.Name] * dmgmodifier
												if Player:FindFirstChild("Kevlar") then
													if string.find(EndHit.Name, "Head") then
														if Player:FindFirstChild("Helmet") then
															Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
														end
													else
														Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
													end
												end
												Damage = Damage * (Client.gun.RangeModifier.Value/100 ^ ((Origin - EndHit.Position).Magnitude/500))/100
												if Damage >= Stats["minimum damage"].Slider / Stats["damage multiplier"].Slider then
													RageGuy = EndHit
													RageTarget = EndHit
													if not values.rage.aimbot["silent aim"].Toggle then
														Camera.CFrame = CFrame.new(CamCFrame.Position, EndHit.Position)
													end
													Filter = true
													if values.rage.aimbot["automatic fire"].Dropdown == "standard" then
														Client.firebullet()
														CreateHitElement(('Hit '..Player.Name..' in the '..Hit.Name..' with '..returna_an(Client.gun.Name)), values.rage.others.HitLogs.Color)
														Lightning(Hit.Position, values.rage.others["lightning parts"].Slider, values.rage.others.Lightning.Color)
														if values.rage.exploits["custom tap"].Toggle == true and values.rage.exploits["custom tap"].Active == true and values.rage.exploits["method"].Dropdown == "default" and values.rage.exploits["custom tap amount"].Slider - 1 ~= 0 then
															for count=1,values.rage.exploits["custom tap amount"].Slider-1,1 do
																Client.firebullet()
															end
														elseif values.rage.exploits["double tap"].Toggle and values.rage.exploits["double tap"].Active then
															Client.firebullet()
														end
													elseif values.rage.aimbot["automatic fire"].Dropdown == "hitpart" then
														Client.firebullet()
														CreateHitElement(('Hit '..Player.Name..' in the '..Hit.Name..' with '..returna_an(Client.gun.Name)), values.rage.others.HitLogs.Color)
														Lightning(Hit.Position, values.rage.others["lightning parts"].Slider, values.rage.others.Lightning.Color)
														local Arguments = {[1] = EndHit,[2] = EndHit.Position,[3] = LocalPlayer.Character.EquippedTool.Value,[4] = 100,[5] = LocalPlayer.Character.Gun,[8] = 1,[9] = false,[10] = false,[11] = Vector3.new(),[12] = 100,[13] = Vector3.new()}
														game.ReplicatedStorage.Events.Hit:FireServer(unpack(Arguments))
														if values.rage.exploits["custom tap"].Toggle == true and values.rage.exploits["custom tap"].Active == true and values.rage.exploits["method"].Dropdown == "default" and values.rage.exploits["custom tap amount"].Slider - 1 ~= 0 then
															for count=1,values.rage.exploits["custom tap amount"].Slider-1,1 do	
																Client.firebullet()
																local Arguments = {[1] = EndHit,[2] = EndHit.Position,[3] = LocalPlayer.Character.EquippedTool.Value,[4] = 100,[5] = LocalPlayer.Character.Gun,[8] = 1,[9] = false,[10] = false,[11] = Vector3.new(),[12] = 100,[13] = Vector3.new()}
																game.ReplicatedStorage.Events.Hit:FireServer(unpack(Arguments))		
															end										
														elseif values.rage.exploits["double tap"].Toggle and values.rage.exploits["double tap"].Active then
															Client.firebullet()
															local Arguments = {[1] = EndHit,[2] = EndHit.Position,[3] = LocalPlayer.Character.EquippedTool.Value,[4] = 100,[5] = LocalPlayer.Character.Gun,[8] = 1,[9] = false,[10] = false,[11] = Vector3.new(),[12] = 100,[13] = Vector3.new()}
															game.ReplicatedStorage.Events.Hit:FireServer(unpack(Arguments))
														end
													end
													Filter = false
													break
												end
											end
										end
									else
										local targetpos = Hitbox.Position
										local Ray = Ray.new(Origin, (targetpos - Origin).unit * 9999)
										local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray, Ignore2, false, true)
										if Hit and Multipliers[Hit.Name] ~= nil and Hit:IsDescendantOf(Player.Character) then
											local Damage = Client.gun.DMG.Value * Multipliers[Hit.Name]
											if Player:FindFirstChild("Kevlar") then
												if string.find(Hit.Name, "Head") then
													if Player:FindFirstChild("Helmet") then
														Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
													end
												else
													Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
												end
											end
											Damage = Damage * (Client.gun.RangeModifier.Value/100 ^ ((Origin - Hit.Position).Magnitude/500))
											if Damage >= Stats["minimum damage"].Slider / Stats["damage multiplier"].Slider then
												RageGuy = Hit
												RageTarget = Hit
												if not values.rage.aimbot["silent aim"].Toggle then
													Camera.CFrame = CFrame.new(CamCFrame.Position, Hit.Position)
												end
												Filter = true
												if values.rage.aimbot["automatic fire"].Dropdown == "standard" then
													Client.firebullet()
													CreateHitElement(('Hit '..Player.Name..' in the '..Hit.Name..' with '..returna_an(Client.gun.Name)), values.rage.others.HitLogs.Color)
													Lightning(Hit.Position, values.rage.others["lightning parts"].Slider, values.rage.others.Lightning.Color)
													if values.rage.exploits["custom tap"].Toggle == true and values.rage.exploits["custom tap"].Active == true and values.rage.exploits["method"].Dropdown == "default" and values.rage.exploits["custom tap amount"].Slider - 1 ~= 0 then
														for count=1,values.rage.exploits["custom tap amount"].Slider-1,1 do
															Client.firebullet()
														end
													elseif values.rage.exploits["double tap"].Toggle and values.rage.exploits["double tap"].Active then
														Client.firebullet()
													end
												elseif values.rage.aimbot["automatic fire"].Dropdown == "hitpart" then
													Client.firebullet()
													CreateHitElement(('Hit '..Player.Name..' in the '..Hit.Name..' with '..returna_an(Client.gun.Name)), values.rage.others.HitLogs.Color)
													Lightning(Hit.Position, values.rage.others["lightning parts"].Slider, values.rage.others.Lightning.Color)
													local Arguments = {[1] = EndHit,[2] = EndHit.Position,[3] = LocalPlayer.Character.EquippedTool.Value,[4] = 100,[5] = LocalPlayer.Character.Gun,[8] = 1,[9] = false,[10] = false,[11] = Vector3.new(),[12] = 100,[13] = Vector3.new()}
													game.ReplicatedStorage.Events.Hit:FireServer(unpack(Arguments))
													if values.rage.exploits["custom tap"].Toggle == true and values.rage.exploits["custom tap"].Active == true and values.rage.exploits["method"].Dropdown == "default" and values.rage.exploits["custom tap amount"].Slider - 1 ~= 0 then
														for count=1,values.rage.exploits["custom tap amount"].Slider-1,1 do	
															Client.firebullet()
															local Arguments = {[1] = EndHit,[2] = EndHit.Position,[3] = LocalPlayer.Character.EquippedTool.Value,[4] = 100,[5] = LocalPlayer.Character.Gun,[8] = 1,[9] = false,[10] = false,[11] = Vector3.new(),[12] = 100,[13] = Vector3.new()}
															game.ReplicatedStorage.Events.Hit:FireServer(unpack(Arguments))		
														end										
													elseif values.rage.exploits["double tap"].Toggle and values.rage.exploits["double tap"].Active then
														Client.firebullet()
														local Arguments = {[1] = EndHit,[2] = EndHit.Position,[3] = LocalPlayer.Character.EquippedTool.Value,[4] = 100,[5] = LocalPlayer.Character.Gun,[8] = 1,[9] = false,[10] = false,[11] = Vector3.new(),[12] = 100,[13] = Vector3.new()}
														game.ReplicatedStorage.Events.Hit:FireServer(unpack(Arguments))
													end
												end
												Filter = false
												break
											end
										end
									end
								end
							end
						end 
					end 
				end 
				if game.Players.LocalPlayer.Character then
					pcall(function()
						game.Players.LocalPlayer.Character.LowerTorso.Root.C0 = CFrame.new(0, -0.649999976, 0)
					end)
				end
			elseif values.legit.aimbot["aim assist"].Toggle and values.legit.aimbot["aim assist"].Active and not library.uiopen then 
				local Stats = GetStatsLegit(GetWeaponLegit(Client.gun.Name)) 
				local Ignore = {LocalPlayer.Character, Camera, workspace.Map.Clips, workspace.Map.SpawnPoints, workspace.Debris} 
				local Closest = 9999 
				local Target 

				Fov.Radius = Stats["field of view"].Slider 
				Fov.Visible =  values.legit.settings["draw fov"].Toggle 
				Fov.Color =  values.legit.settings["draw fov"].Color 

				if not TBLFIND(Stats.conditions.Jumbobox, "smoke") then 
					Ignore[#Ignore+1] = (workspace.Ray_Ignore) 
				end 

				if not TBLFIND(Stats.conditions.Jumbobox, "blind") or LocalPlayer.PlayerGui.Blnd.Blind.BackgroundTransparency > 0.9 then 
					if not TBLFIND(Stats.conditions.Jumbobox, "standing") or SelfVelocity.Magnitude < 3 then 
						for _,Player in pairs(Players:GetPlayers()) do 
							if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Humanoid").Health > 0 then 
								if not values.legit.settings["forcefield check"].Toggle or not Player.Character:FindFirstChildOfClass("ForceField") then 
									if values.legit.settings["free for all"].Toggle == true or Player.Team ~= LocalPlayer.Team then 
										local Pos, onScreen = Camera:WorldToViewportPoint(Player.Character.HumanoidRootPart.Position) 
										if onScreen then 
											local Magnitude = (Vec2(Pos.X, Pos.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude 
											if Magnitude < Stats["field of view"].Slider then 
												local Hitbox = Stats.hitbox.Dropdown == "head" and Player.Character.Head or Stats.hitbox.Dropdown == "chest" and Player.Character.UpperTorso 
												if Stats.hitbox.Dropdown == "closest" then 
													local HeadPos = Camera:WorldToViewportPoint(Player.Character.Head.Position) 
													local TorsoPos = Camera:WorldToViewportPoint(Player.Character.UpperTorso.Position) 
													local HeadDistance = (Vec2(HeadPos.X, HeadPos.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude 
													local TorsoDistance = (Vec2(TorsoPos.X, TorsoPos.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude 
													if HeadDistance < TorsoDistance then 
														Hitbox = Player.Character.Head 
													else 
														Hitbox = Player.Character.UpperTorso 
													end 
												end 
												if Hitbox ~= nil then 
													if not TBLFIND(Stats.conditions.Jumbobox, "visible") then 
														Target = Hitbox 
													else 
														local Ray1 = RAY(Camera.CFrame.Position, (Hitbox.Position - Camera.CFrame.Position).unit * (Hitbox.Position - Camera.CFrame.Position).magnitude) 
														local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray1, Ignore, false, true) 
														if Hit and Hit:FindFirstAncestor(Player.Name) then 
															Target = Hitbox 
														end 
													end 
												end 
											end 
										end 
									end 
								end 
							end 
						end 
					end 
				end 

				if Target ~= nil then 
					local Pos = Camera:WorldToScreenPoint(Target.Position) 
					local Magnitude = Vec2(Pos.X - Mouse.X, Pos.Y - Mouse.Y) 
					if Stats["aim assist type"].Dropdown == "robotic" and not alreadylocking then
						coroutine.wrap(function()
							alreadylocking = true
							for i=0,1,Stats.smoothing.Slider/100 do
								Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(Camera.CFrame.Position, Target.Position), i)
								RunService.RenderStepped:Wait()
							end
							alreadylocking = nil
						end)()
					elseif Stats["aim assist type"].Dropdown == "realistic" then
						mousemoverel((((Magnitude.X*Stats["aim speed multi"].Slider)*math.clamp((RANDOM(0,2500)/100), Stats["min mouse speed"].Slider, Stats["max mouse speed"].Slider)/Stats.smoothing.Slider)+(Stats["offset X"].Slider)), (((Magnitude.Y*Stats["aim speed multi"].Slider)*math.clamp((RANDOM(0,2500)/100), Stats["min mouse speed"].Slider, Stats["max mouse speed"].Slider)/Stats.smoothing.Slider)+(Stats["offset Y"].Slider)))
					end
				end 
			end 
			if not values.rage.aimbot.enabled.Toggle and values.legit.aimbot["triggerbot"].Toggle and values.legit.aimbot["triggerbot"].Active and not TriggerDebounce then 
				local Stats = GetStatsLegit(GetWeaponLegit(Client.gun.Name)) 
				if Stats.triggerbot.Toggle then 
					if not TBLFIND(Stats.conditions.Jumbobox, "blind") or LocalPlayer.PlayerGui.Blnd.Blind.BackgroundTransparency > 0.9 then 
						if not TBLFIND(Stats.conditions.Jumbobox, "standing") or SelfVelocity.Magnitude < 3 then 
							if Stats["triggerbot type"].Dropdown == "mouse target" and Mouse.Target and Mouse.Target.Parent and Players:GetPlayerFromCharacter(Mouse.Target.Parent) and Multipliers[Mouse.Target.Name] ~= nil and Client.gun.DMG.Value * Multipliers[Mouse.Target.Name] >= Stats["minimum dmg"].Slider then 
								local OldTarget = Mouse.Target 
								local Player = Players:GetPlayerFromCharacter(Mouse.Target.Parent) 
								if Player.Team ~= LocalPlayer.Team or values.legit.settings["free for all"].Toggle then 
									coroutine.wrap(function() 
										TriggerDebounce = true 
										wait(Stats["delay (ms)"].Slider/1000) 
										repeat RunService.RenderStepped:Wait() 
											if not Client.DISABLED then 
												Client.firebullet() 
											end 
										until Mouse.Target == nil or Player ~= Players:GetPlayerFromCharacter(Mouse.Target.Parent) 
										TriggerDebounce = false 
									end)() 
								end 
							elseif Stats["triggerbot type"].Dropdown == "raycast (camera)" then
								local ray = Ray.new(Camera.CFrame.p, Camera.CFrame.LookVector * 4096)
								local hit, pos = workspace:FindPartOnRayWithIgnoreList(ray, {LocalPlayer.Character})
								if hit and Players:GetPlayerFromCharacter(hit.Parent) and Multipliers[hit.Name] ~= nil and Client.gun.DMG.Value * Multipliers[hit.Name] >= Stats["minimum dmg"].Slider then
									local OldTarget = hit
									local Player = Players:GetPlayerFromCharacter(hit.Parent) 
									if Player.Team ~= LocalPlayer.Team or values.legit.settings["free for all"].Toggle then 
										coroutine.wrap(function() 
											TriggerDebounce = true 
											wait(Stats["delay (ms)"].Slider/1000)
											repeat RunService.RenderStepped:Wait()
												if not Client.DISABLED then 
													Client.firebullet() 
												end 
											until hit == nil or hit.Parent == nil or not Player or not Players:GetPlayerFromCharacter(hit.Parent)
											TriggerDebounce = false 
										end)()
									end
								end
							elseif Stats["triggerbot type"].Dropdown == "raycast (camera to mouse)" then
								local ray = Ray.new(Camera.CFrame.p, (Mouse.Hit.p - Camera.CFrame.p).Unit * 4096)
								local hit, pos = workspace:FindPartOnRayWithIgnoreList(ray, {LocalPlayer.Character})
								if hit and Players:GetPlayerFromCharacter(hit.Parent) and Multipliers[hit.Name] ~= nil and Client.gun.DMG.Value * Multipliers[hit.Name] >= Stats["minimum dmg"].Slider then
									local OldTarget = hit
									local Player = Players:GetPlayerFromCharacter(hit.Parent) 
									if Player.Team ~= LocalPlayer.Team or values.legit.settings["free for all"].Toggle then 
										coroutine.wrap(function() 
											TriggerDebounce = true 
											wait(Stats["delay (ms)"].Slider/1000)
											repeat RunService.RenderStepped:Wait()
												if not Client.DISABLED then 
													Client.firebullet() 
												end 
											until hit == nil or hit.Parent == nil or not Player or not Players:GetPlayerFromCharacter(hit.Parent)
											TriggerDebounce = false 
										end)()
									end
								end
							end 
						end 
					end 
				end 
			end 
		end 
		BodyVelocity:Destroy()
		game.Players.LocalPlayer.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
		BodyVelocity = INST("BodyVelocity") 
		BodyVelocity.MaxForce = Vec3(HUGE,0,HUGE) 
		if UserInputService:IsKeyDown("Space") and values.misc.movement["bunny hop"].Toggle then 
			local add = 0 
			if values.misc.movement.direction.Dropdown == "directional" or values.misc.movement.direction.Dropdown == "directional 2" then 
				if UserInputService:IsKeyDown("A") then add = 90 end 
				if UserInputService:IsKeyDown("S") then add = 180 end 
				if UserInputService:IsKeyDown("D") then add = 270 end 
				if UserInputService:IsKeyDown("A") and UserInputService:IsKeyDown("W") then add = 45 end 
				if UserInputService:IsKeyDown("D") and UserInputService:IsKeyDown("W") then add = 315 end 
				if UserInputService:IsKeyDown("D") and UserInputService:IsKeyDown("S") then add = 225 end 
				if UserInputService:IsKeyDown("A") and UserInputService:IsKeyDown("S") then add = 145 end 
			end 
			local rot = YROTATION(CamCFrame) * CFAngles(0,RAD(add),0) 
			BodyVelocity.Parent = LocalPlayer.Character.UpperTorso 
			LocalPlayer.Character.Humanoid.Jump = true 
			if values.misc.movement["gyro behaviour"].Dropdown == "no fling" then 
				BodyVelocity.MaxForce = Vector3.new(99999,0,99999)
			else
				BodyVelocity.MaxForce = Vector3.new(HUGE,0,HUGE)
			end
			if values.misc.movement.fly.Toggle == true and values.misc.movement.fly.Active == true then
				if values.misc.movement["gyro behaviour"].Dropdown == "no fling" then
					BodyVelocity.MaxForce = Vector3.new(99999,99999,99999)
				else
					BodyVelocity.MaxForce = Vector3.new(HUGE,HUGE,HUGE)
				end
			end
			BodyVelocity.Velocity = Vec3(rot.LookVector.X,0,rot.LookVector.Z) * (values.misc.movement["speed"].Slider * 2) 
			if add == 0 and values.misc.movement.direction.Dropdown == "directional" and not UserInputService:IsKeyDown("W") then 
				BodyVelocity:Destroy() 
			else 
				if values.misc.movement.type.Dropdown == "cframe" then 
					BodyVelocity:Destroy()
					Root.CFrame = Root.CFrame + Vec3(rot.LookVector.X,0,rot.LookVector.Z) * values.misc.movement["speed"].Slider/50 
				else
					if values.misc.movement.type.Dropdown == "bypass" then
						local rot2 = rot * CFAngles(0,RAD(180),0)
						local rot3 = gigagong == true and rot or rot2
						local multi = gigagong == true and 3.65 or 2
						BodyVelocity.Velocity = Vec3(rot3.LookVector.X,0,rot3.LookVector.Z) * (values.misc.movement["speed"].Slider * multi) 
						gigagong = not gigagong
					end
				end 
			end 
			if values.misc.movement.fly.Toggle == true and values.misc.movement.fly.Active == true and BodyVelocity ~= nil then
				local cf = Camera.CFrame
				if UserInputService:IsKeyDown("S") then
					cf *= CFrame.Angles(0,RAD(180),0)
				end
				if UserInputService:IsKeyDown("S") or UserInputService:IsKeyDown("W") then
					BodyVelocity.Velocity = Vec3(BodyVelocity.Velocity.X, 0, BodyVelocity.Velocity.Z)
					BodyVelocity.Velocity += cf.LookVector * (values.misc.movement["speed"].Slider) 
				end
			end
		end 
		if values.misc.movement["edge jump"].Toggle and values.misc.movement["edge jump"].Active then 
			if LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall and LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then 
				coroutine.wrap(function() 
					RunService.RenderStepped:Wait() 
					if LocalPlayer.Character ~= nil and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then 
						LocalPlayer.Character.Humanoid:ChangeState("Jumping") 
					end 
				end)() 
			end 
		end
		Jitter = not Jitter 
		LocalPlayer.Character.Humanoid.AutoRotate = false 
		if values.rage.angles.enabled.Toggle and not DisableAA then 
			local Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) 
			if values.rage.angles["yaw base"].Dropdown == "spin" then 
				Angle = Angle + RAD(Spin) 
			end 
			if values.rage.angles["yaw base"].Dropdown == "random" then 
				Angle = Angle + RAD(RANDOM(0, 360)) 
			end 
			if values.rage.angles["yaw base"].Dropdown == "anti crippin'" then 
				Angle = Angle + CLAMP(Spin + 100, 0, 180) 
			end 
			if values.rage.angles["yaw base"].Dropdown == "keybind yaw" then 
				if UserInputService:IsKeyDown("W") then
					Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) + RAD(0)
				end
				if UserInputService:IsKeyDown("A") then
					Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) + RAD(90)
				end
				if UserInputService:IsKeyDown("S") then
					Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) + RAD(180)
				end
				if UserInputService:IsKeyDown("D") then
					Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) + RAD(-90)
				end
			end 
			if values.rage.angles["reset yaw"].Toggle and values.rage.angles["reset yaw"].Active then
				Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) + RAD(0)
			end
			local Offset = RAD(-values.rage.angles["yaw offset"].Slider - (values.rage.angles.jitter.Toggle and values.rage.angles["random jitter"].Toggle == false and Jitter and values.rage.angles["jitter offset"].Slider or values.rage.angles.jitter.Toggle and values.rage.angles["random jitter"].Toggle and (values.rage.angles["jitter offset"].Slider < 0 and math.random(values.rage.angles["jitter offset"].Slider, 0) or values.rage.angles["jitter offset"].Slider > 0 and math.random(0, values.rage.angles["jitter offset"].Slider)) or 0)) 
			if values.rage.angles["reset yaw"].Toggle and values.rage.angles["reset yaw"].Active then
				Offset = RAD(0)
			end
			local CFramePos = CF(Root.Position) * CFAngles(0, Angle + Offset, 0) 
			if values.rage.angles["yaw base"].Dropdown == "targets" then 
				local part 
				local closest = 9999 
				for _,plr in pairs(Players:GetPlayers()) do 
					if plr.Character and plr.Character:FindFirstChild("Humanoid") and plr.Character:FindFirstChild("Humanoid").Health > 0 and plr.Team ~= LocalPlayer.Team then 
						local pos, onScreen = Camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position) 
						local magnitude = (Vec2(pos.X, pos.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude 
						if closest > magnitude then 
							part = plr.Character.HumanoidRootPart 
							closest = magnitude 
						end 
					end 
				end 
				if part ~= nil then 
					CFramePos = CF(Root.Position, part.Position) * CFAngles(0, Offset, 0) 
				end 
			end
			Root.CFrame = YROTATION(CFramePos) 
			if values.rage.angles["body roll"].Dropdown == "180" then 
				Root.CFrame = Root.CFrame * CFAngles(values.rage.angles["body roll"].Dropdown == "180" and RAD(-values.rage.angles["body roll offset"].Slider or 0) or 0, 1, 0)  
				LocalPlayer.Character.Humanoid.HipHeight = values.rage.angles["high pos"].Slider or 1 
			elseif values.rage.angles["body roll"].Dropdown == "360" then 
				Root.CFrame = Root.CFrame * CFAngles(values.rage.angles["body roll"].Dropdown == "360" and RAD(-values.rage.angles["body roll offset"].Slider or 0) or 0, 1, 0)  
				LocalPlayer.Character.Humanoid.HipHeight = values.rage.angles["high pos"].Slider or 1 
			else 
				LocalPlayer.Character.Humanoid.HipHeight = values.rage.angles["high pos"].Slider or 1
			end


			local Pitch = values.rage.angles["pitch"].Dropdown == "none" and CamLook.Y or values.rage.angles["pitch"].Dropdown == "Sus_down" and -3  or values.rage.angles["pitch"].Dropdown == "up" and 1 or values.rage.angles["pitch"].Dropdown == "down" and -1 or values.rage.angles["pitch"].Dropdown == "negative" and -6 or values.rage.angles["pitch"].Dropdown == "glitch" and (0 + -5) or values.rage.angles["pitch"].Dropdown == "Bodyarm" and -15 or values.rage.angles["pitch"].Dropdown == "imposter" and math.huge -5/0 -1 or values.rage.angles["pitch"].Dropdown == "zero" and 0 or values.rage.angles["pitch"].Dropdown == "freak" and 5 or values.rage.angles["pitch"].Dropdown == "random" and RANDOM(-10, 10)/10 or 2.5
			if values.rage.angles["extend pitch"].Toggle and (values.rage.angles["pitch"].Dropdown == "up" or values.rage.angles["pitch"].Dropdown == "down" or values.rage.angles["pitch"].Dropdown == "negative" or values.rage.angles["pitch"].Dropdown == "glitch" or values.rage.angles["pitch"].Dropdown == "Sus_down" or values.rage.angles["pitch"].Dropdown == "180" or values.rage.angles ["pitch"].Dropdown == "Bodyarm") then 
				Pitch = (Pitch*2)/1.6 
			end 
			if values.rage.angles["reset pitch"].Toggle and values.rage.angles["reset pitch"].Active then
				Pitch = 0
			end
			game.ReplicatedStorage.Events.ControlTurn:FireServer(Pitch, LocalPlayer.Character:FindFirstChild("Climbing") and true or false) 
		else 
			LocalPlayer.Character.Humanoid.HipHeight = values.rage.angles["high pos"].Slider or 1 
			Root.CFrame = CF(Root.Position) * CFAngles(0, -ATAN2(CamLook.Z, CamLook.X) + RAD(270), 0) 
			game.ReplicatedStorage.Events.ControlTurn:FireServer(CamLook.Y, LocalPlayer.Character:FindFirstChild("Climbing") and true or false) 
		end
		if values.rage.others["remove head"].Toggle then 
			if LocalPlayer.Character:FindFirstChild("FakeHead") then 
				LocalPlayer.Character.FakeHead:Destroy() 
			end 
			if LocalPlayer.Character:FindFirstChild("HeadHB") then 
				LocalPlayer.Character.HeadHB:Destroy() 
			end 
		end 
		if TBLFIND(values.misc.client["gun modifiers"].Jumbobox, "recoil") then 
			Client.resetaccuracy() 
			Client.RecoilX = 0 
			Client.RecoilY = 0 
		end 
	end 
	for _,Player in pairs(Players:GetPlayers()) do 
		if Player.Character and Player ~= LocalPlayer and Player.Character:FindFirstChild("HumanoidRootPart") and Player.Character.HumanoidRootPart:FindFirstChild("OldPosition") then 
			coroutine.wrap(function() 
				local Position = Player.Character.HumanoidRootPart.Position 
				RunService.RenderStepped:Wait() 
				if Player.Character and Player ~= LocalPlayer and Player.Character:FindFirstChild("HumanoidRootPart") then 
					if Player.Character.HumanoidRootPart:FindFirstChild("OldPosition") then 
						Player.Character.HumanoidRootPart.OldPosition.Value = Position 
					elseif Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
						local Value = INST("Vector3Value") 
						Value.Name = "OldPosition" 
						Value.Value = Position 
						Value.Parent = Player.Character.HumanoidRootPart 
					end 
				end 
			end)() 
		elseif Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
			local Value = Instance.new("Vector3Value") 
			Value.Name = "OldPosition" 
			Value.Value = Player.Character.HumanoidRootPart.Position 
			Value.Parent = Player.Character.HumanoidRootPart
		end 
	end 
	for _,Player in pairs(Players:GetPlayers()) do 
		local tbl = objects[Player] 
		if tbl == nil then return end 
		if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") and Player.Team ~= "TTT" and (Player.Team ~= LocalPlayer.Team or values.visuals.players.teammates.Toggle) and Player.Character:FindFirstChild("Gun") and Player.Character:FindFirstChild("Humanoid") and Player ~= LocalPlayer then 
			local HumanoidRootPart = Player.Character.HumanoidRootPart 
			local RootPosition = HumanoidRootPart.Position 
			local Pos, OnScreen = Camera:WorldToViewportPoint(RootPosition) 
			local Size = (Camera:WorldToViewportPoint(RootPosition - Vec3(0, 3, 0)).Y - Camera:WorldToViewportPoint(RootPosition + Vec3(0, 2.6, 0)).Y) / 2 

			local Drawings, Text = TBLFIND(values.visuals.players.outlines.Jumbobox, "drawings") ~= nil, TBLFIND(values.visuals.players.outlines.Jumbobox, "text") ~= nil 

			tbl.Box.Color = values.visuals.players.box.Color 
			tbl.Box.Size = Vec2(Size * 1.5, Size * 1.9) 
			tbl.Box.Position = Vec2(Pos.X - Size*1.5 / 2, (Pos.Y - Size*1.6 / 2)) 

			if values.visuals.players.box.Toggle then 
				tbl.Box.Visible = OnScreen 
				if Drawings then 
					tbl.BoxOutline.Size = tbl.Box.Size 
					tbl.BoxOutline.Position = tbl.Box.Position 
					tbl.BoxOutline.Visible = OnScreen 
				else 
					tbl.BoxOutline.Visible = false 
				end 
			else 
				tbl.Box.Visible = false 
				tbl.BoxOutline.Visible = false 
			end 

			if values.visuals.players.health.Toggle then 
				tbl.Health.Color = COL3(0,1,0) 
				tbl.Health.From = Vec2((tbl.Box.Position.X - 5), tbl.Box.Position.Y + tbl.Box.Size.Y) 
				tbl.Health.To = Vec2(tbl.Health.From.X, tbl.Health.From.Y - CLAMP(Player.Character.Humanoid.Health / Player.Character.Humanoid.MaxHealth, 0, 1) * tbl.Box.Size.Y) 
				tbl.Health.Visible = OnScreen 
				if Drawings then 
					tbl.HealthOutline.From = Vec2(tbl.Health.From.X, tbl.Box.Position.Y + tbl.Box.Size.Y + 1) 
					tbl.HealthOutline.To = Vec2(tbl.Health.From.X, (tbl.Health.From.Y - 1 * tbl.Box.Size.Y) -1) 
					tbl.HealthOutline.Visible = OnScreen 
				else 
					tbl.HealthOutline.Visible = false 
				end 
			else 
				tbl.Health.Visible = false 
				tbl.HealthOutline.Visible = false 
			end 

			if values.visuals.players.weapon.Toggle then 
				tbl.Weapon.Color = values.visuals.players.weapon.Color 
				tbl.Weapon.Text = Player.Character.EquippedTool.Value 
				tbl.Weapon.Position = Vec2(tbl.Box.Size.X/2 + tbl.Box.Position.X, tbl.Box.Size.Y + tbl.Box.Position.Y + 1) 
				tbl.Weapon.Font = Drawing.Fonts[values.visuals.players.font.Dropdown] 
				tbl.Weapon.Outline = Text 
				tbl.Weapon.Size = values.visuals.players.size.Slider 
				tbl.Weapon.Visible = OnScreen 
			else 
				tbl.Weapon.Visible = false 
			end 

			if values.visuals.players["weapon icon"].Toggle then 
				Items[Player.Name].ImageColor3 = values.visuals.players["weapon icon"].Color 
				Items[Player.Name].Image = GetIcon.getWeaponOfKiller(Player.Character.EquippedTool.Value) 
				Items[Player.Name].Position = UDIM2(0, tbl.Box.Size.X/2 + tbl.Box.Position.X, 0, tbl.Box.Size.Y + tbl.Box.Position.Y + (values.visuals.players.weapon.Toggle and -10 or -22)) 
				Items[Player.Name].Visible = OnScreen 
			else 
				Items[Player.Name].Visible = false 
			end 

			if values.visuals.players.name.Toggle then 
				tbl.Name.Color = values.visuals.players.name.Color 
				tbl.Name.Text = Player.Name 
				tbl.Name.Position = Vec2(tbl.Box.Size.X/2 + tbl.Box.Position.X,  tbl.Box.Position.Y - 16) 
				tbl.Name.Font = Drawing.Fonts[values.visuals.players.font.Dropdown] 
				tbl.Name.Outline = Text 
				tbl.Name.Size = values.visuals.players.size.Slider 
				tbl.Name.Visible = OnScreen 
			else 
				tbl.Name.Visible = false 
			end 
			local LastInfoPos = tbl.Box.Position.Y - 1 
			if TBLFIND(values.visuals.players.indicators.Jumbobox, "armor") and Player:FindFirstChild("Kevlar") then 
				tbl.Armor.Color = COL3RGB(0, 150, 255) 
				tbl.Armor.Text = Player:FindFirstChild("Helmet") and "HK" or "K" 
				tbl.Armor.Position = Vec2(tbl.Box.Size.X + tbl.Box.Position.X + 12, LastInfoPos) 
				tbl.Armor.Font = Drawing.Fonts[values.visuals.players.font.Dropdown] 
				tbl.Armor.Outline = Text 
				tbl.Armor.Size = values.visuals.players.size.Slider 
				tbl.Armor.Visible = OnScreen 

				LastInfoPos = LastInfoPos + values.visuals.players.size.Slider 
			else 
				tbl.Armor.Visible = false 
			end 
		else 
			if Player.Name ~= LocalPlayer.Name then 
				Items[Player.Name].Visible = false 
				for i,v in pairs(tbl) do 
					v.Visible = false 
				end 
			end 
		end 
	end 
	if game.Players.LocalPlayer.Character then
		pcall(function()
			game.Players.LocalPlayer.Character.LowerTorso.Root.C0 = CFrame.new(0, -0.649999976, 0)
		end)
	end
end) 
hitpartpos = nil
lookat = nil
oldragetargetpos = nil
oldragetargetpos_1 = nil
mt = getrawmetatable(game) 
oldNamecall = mt.__namecall 
oldIndex = mt.__index 
oldNewIndex = mt.__newindex 
setreadonly(mt,false) 
mt.__namecall = function(self, ...) 
	local method = tostring(getnamecallmethod()) 
	local args = {...} 

	if method == "SetPrimaryPartCFrame" and self.Name == "Arms" then 
		coroutine.wrap(function()
			if true and true and true then
				if true and true and true then
					if values.visuals.self["third person"].Toggle and values.visuals.self["third person"].Active and values.visuals.self["no arm third person"].Toggle and LocalPlayer.Character then 
						args[1] = args[1] * CF(99, 99, 99) 
					else 
						if values.visuals.self["viewmodel changer"].Toggle then 
							args[1] = args[1] * ViewmodelOffset 
						end 
						if values.visuals.self["visualize silent angle"].Toggle then
							if RageTarget then
								oldragetargetpos = RageTarget.Position
								coroutine.wrap(function()
									task.wait(values.visuals.self["silent angle duration"].Slider / 10)
									oldragetargetpos = nil
								end)()
							end
							if oldragetargetpos then
								args[1] = CFrame.lookAt(args[1].p, oldragetargetpos)
							end
						end
						if values.visuals.self["visualize silent angle with crosshair"].Toggle then
							if RageTarget then
								oldragetargetpos_1 = RageTarget.Position
								coroutine.wrap(function()
									task.wait(values.visuals.self["silent angle duration"].Slider / 10)
									oldragetargetpos_1 = nil
								end)()
							end
							if oldragetargetpos_1 then
								local pushin_p, onscreen = Camera:WorldToScreenPoint(oldragetargetpos_1)
								local udim = onscreen == true and UDim2.new(0, pushin_p.X, 0, pushin_p.Y) or UDim2.new(10,0,10,0)
								Crosshair.Position = udim
							else
								Crosshair.Position = UDim2.new(0.5,0,0.5,-18)
							end
						else
							Crosshair.Position = UDim2.new(0.5,0,0.5,-18)
						end
					end 
				end 
			end 
		end)() 
	end 
	if method == "SetPrimaryPartCFrame" and self.Name ~= "Arms" then 
		args[1] = args[1] + Vec3(0, 3, 0) 
		coroutine.wrap(function() 
			DisableAA = true 
			wait(2) 
			DisableAA = false 
		end)() 
	end 
	if method == "Kick" then 
		return 
	end 
	if method == "FireServer" then 
		if LEN(self.Name) == 38 then 
			return 
		elseif self.Name == "FallDamage" and TBLFIND(values.misc.client["damage bypass"].Jumbobox, "fall") or values.misc.movement["jump bug"].Toggle and values.misc.movement["jump bug"].Active then 
			return 
		elseif self.Name == "BURNME" and TBLFIND(values.misc.client["damage bypass"].Jumbobox, "fire") then 
			return 
		elseif self.Name == "ControlTurn" and not checkcaller() then 
			return 
		end 
		if self.Name == "PlayerChatted" and values.misc.client["chat alive"].Toggle then 
			args[2] = false 
			args[3] = "Innocent" 
			args[4] = false 
			args[5] = false 
		end 
		local jumboboob = values.misc.client["anti spectate"].Jumbobox
		if self.Name == "ReplicateCamera" and table.find(jumboboob, "backwards") then 
			args[1] =  args[1] * CFrame.Angles(0, RAD(180), 0)
		end
		if self.Name == "ReplicateCamera" and table.find(jumboboob, "upside down") then 
			args[1] =  args[1] * CFrame.Angles(0, 0, RAD(180))
		end 
		if self.Name == "ReplicateCamera" and table.find(jumboboob, "random") then 
			args[1] =  args[1] * CFrame.Angles(0, 0, RAD(RANDOM(0, 360)))
		end 
		if self.Name == "ReplicateCamera" and table.find(jumboboob, "custom") then 
			args[1] = args[1] * CFrame.Angles(0, 0, RAD(values.misc.client["custom spectate angle"].Slider))
		end 
		if self.Name == "ReplicateCamera" and table.find(jumboboob, "classic") then 
			args[1] = CF() 
		end 
		if self.Name == "ReplicateCamera" and table.find(jumboboob, "floating point") then 
			args[1] =  CFrame.new(-900000000000000000000000000000,-900000000000000000000000000000,-900000000000000000000000000000)
		end
		if self.Name == "ReplicateCamera" and table.find(jumboboob, "head") and LocalPlayer.Character then 
			args[1] =  LocalPlayer.Character.Head.CFrame
		end
		coroutine.wrap(function() 
			if true and true then
				if self.Name == "ReplicateCamera" and hitpartpos and values.misc.client["anti spectate visible shots"].Toggle == true then
					local s, e = pcall(function()
						args[1] = CFrame.lookAt(LocalPlayer.Character.LowerTorso.Position + Vector3.new(0,2.5,0), hitpartpos)
					end)
					if not s then warn(e, args[1], LocalPlayer.Character.LowerTorso.Position + Vector3.new(0,2.5,0), hitpartpos) end
				end
			end
		end)()
		pcall(function()
			if self.Name == "ReplicateCamera" and table.find(jumboboob, "gun") and LocalPlayer.Character then 
				args[1] =  LocalPlayer.Character.Gun.CFrame * CFrame.Angles(0,RAD(180),0)
			end
		end)
	end 
	if method == "FindPartOnRayWithWhitelist" and not checkcaller() and Client.gun and Client.gun ~= "none" and Client.gun.Name ~= "C4" then 
		if #args[2] == 1 and args[2][1].Name == "SpawnPoints" then 
			local Team = LocalPlayer.Status.Team.Value 

			if TBLFIND(values.misc.client.shop.Jumbobox, "anywhere") then 
				return Team == "T" and args[2][1].BuyArea or args[2][1].BuyArea2 
			end 
		end 
	end 
	if method == "FindPartOnRayWithIgnoreList" and args[2][1] == workspace.Debris then 
		if not checkcaller() then 
			if TBLFIND(values.misc.client["gun modifiers"].Jumbobox, "penetration") then 
				args[2][#args[2]+1] = (workspace.Map) 
			end 
			if TBLFIND(values.misc.client["gun modifiers"].Jumbobox, "spread") then 
				args[1] = RAY(Camera.CFrame.p, Camera.CFrame.LookVector * Client.gun.Range.Value) 
			end 
			local Stats = GetStatsLegit(GetWeaponLegit(Client.gun.Name)) 
			if values.legit.aimbot["silent aim"].Toggle and values.legit.aimbot["silent aim"].Active and Stats["silent aim"].Toggle then 
				local Ignore = {LocalPlayer.Character, Camera, workspace.Map.Clips, workspace.Map.SpawnPoints, workspace.Debris} 
				local Closest = 9999 
				local Target 

				if not TBLFIND(Stats.conditions.Jumbobox, "smoke") then 
					Ignore[#Ignore+1] = (workspace.Ray_Ignore) 
				end 

				coroutine.wrap(function() 
					if not TBLFIND(Stats.conditions.Jumbobox, "blind") or LocalPlayer.PlayerGui.Blnd.Blind.BackgroundTransparency > 0.9 then 
						if not TBLFIND(Stats.conditions.Jumbobox, "blind") or SelfVelocity.Magnitude < 3 then 
							for _,Player in pairs(Players:GetPlayers()) do 
								if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Humanoid").Health > 0 then 
									if not values.legit.settings["forcefield check"].Toggle or not Player.Character:FindFirstChildOfClass("ForceField") then 
										if values.legit.settings["free for all"].Toggle == true or Player.Team ~= LocalPlayer.Team then 
											local Pos, onScreen = Camera:WorldToViewportPoint(Player.Character.HumanoidRootPart.Position) 
											if onScreen then 
												local Magnitude = (Vec2(Pos.X, Pos.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude 
												if Magnitude < Stats["field of view"].Slider then 
													local Hitbox = Stats.priority.Dropdown == "head" and Player.Character.Head or Stats.priority.Dropdown == "chest" and Player.Character.UpperTorso 
													if Stats.priority.Dropdown == "closest" then 
														local HeadPos = Camera:WorldToViewportPoint(Player.Character.Head.Position) 
														local TorsoPos = Camera:WorldToViewportPoint(Player.Character.UpperTorso.Position) 
														local HeadDistance = (Vec2(HeadPos.X, HeadPos.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude 
														local TorsoDistance = (Vec2(TorsoPos.X, TorsoPos.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude 
														if HeadDistance < TorsoDistance then 
															Hitbox = Player.Character.Head 
														else 
															Hitbox = Player.Character.UpperTorso 
														end 
													end 
													if Hitbox ~= nil then 
														if not TBLFIND(Stats.conditions.Jumbobox, "visible") then 
															Target = Hitbox 
														else 
															local Ray1 = RAY(Camera.CFrame.Position, (Hitbox.Position - Camera.CFrame.Position).unit * (Hitbox.Position - Camera.CFrame.Position).magnitude) 
															local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray1, Ignore, false, true) 
															if Hit and Hit:FindFirstAncestor(Player.Name) then 
																Target = Hitbox 
															end 
														end 
													end 
												end 
											end 
										end 
									end 
								end 
							end 
						end 
					end 

					local Hit = RANDOM(1, 100) <= Stats.hitchance.Slider 
					if Target ~= nil and Hit then 
						args[1] = RAY(Camera.CFrame.Position, (Target.Position - Camera.CFrame.Position).unit * 4096) 
					end 
				end)() 
			end 
			if RageTarget ~= nil then 
				local Origin = values.rage.aimbot.origin.Dropdown == "character" and LocalPlayer.Character.LowerTorso.Position + Vec3(0, 2.5, 0) or Camera.CFrame.p 
				if values.rage.aimbot["delay shot"].Toggle then 
					spawn(function() 
						if RageTarget and Origin then
							args[1] = RAY(Origin, (RageTarget.Position - Origin).unit * (RageTarget.Position - Origin).magnitude) 
						end
					end) 
				else 
					args[1] = RAY(Origin, (RageTarget.Position - Origin).unit * (RageTarget.Position - Origin).magnitude) 
				end 
			end 
		end 
	end 
	if method == "InvokeServer" then 
		if self.Name == "Moolah" then 
			return 
		elseif self.Name == "Hugh" then 
			return 
		elseif self.Name == "Filter" and values.misc.chat["no filter"].Toggle then 
			return args[1] 
		end 
	end 
	if method == "LoadAnimation" and self.Name == "Humanoid" then 
		if TBLFIND(values.rage.others["leg slide movement"].Jumbobox, "walk") and FIND(args[1].Name, "Walk") then 
			args[1] = FakeAnim 
		elseif TBLFIND(values.rage.others["leg slide movement"].Jumbobox, "run") and FIND(args[1].Name, "Run") then
			args[1] = FakeAnim 
		elseif TBLFIND(values.rage.others["leg slide movement"].Jumbobox, "jump") and FIND(args[1].Name, "Jump") then
			args[1] = FakeAnim 
		end 
		if values.rage.others["no animations"].Toggle then 
			args[1] = FakeAnim 
		end 
	end 
	if method == "FireServer" and self.Name == "Hit" then 
		if values.rage.exploits['kill all'].Toggle==true and values.rage.exploits['kill all'].Active==true and killalltarget then
			args[1] = killalltarget; args[2] = killalltarget.Position+killalltarget.Velocity/10; args[3] = values.rage.exploits['kill all weapon'].Dropdown == "Auto" and Client.gun.Name or values.rage.exploits['kill all weapon'].Dropdown == "😱" and tableofallweapons[math.random(1,#tableofallweapons)] or values.rage.exploits['kill all weapon'].Dropdown; args[8] = 999999999999999;
			--[[local hrp = killalltarget.Parent.HumanoidRootPart.Position 
			local oldHrp = killalltarget.Parent.HumanoidRootPart.OldPosition.Value 

			local vel = (Vec3(hrp.X, 0, hrp.Z) - Vec3(oldHrp.X, 0, oldHrp.Z)) / LastStep 
			local dir = Vec3(vel.X / vel.magnitude, 0, vel.Z / vel.magnitude) 

			args[2] = args[2] + dir * (Ping / (POW(Ping, 1.5)) * (dir / (dir / 2))) 
			args[4] = 0 
			args[12] = args[12] - 500]]
			return oldNamecall(self, unpack(args)) 
		end
		coroutine.wrap(function()
			if true and true then
				if true and true then
					if values.rage.cringe["damage multiplier"].Toggle then
						args[8] = values.rage.cringe.multiplier.Slider
					end
                    if values.rage.aimbot["force hit"].Toggle and RageTarget then 
                        args[1] = RageTarget 
                        args[2] = RageTarget.Position 
                    end 
                    if values.rage.aimbot["force hit (head)"].Toggle and RageTarget and RageTarget.Parent:FindFirstChild("Head") then 
                        args[1] = RageTarget.Parent.Head
                        args[2] = RageTarget.Parent.Head.Position 
                    end 
                    if values.rage.aimbot["fuck the headless (auto baim)"].Toggle and RageTarget and not RageTarget.Parent:FindFirstChild("Head") then
                        args[1] = RageTarget.Parent.UpperTorso
                        args[2] = RageTarget.Parent.UpperTorso.Position 
                    end
				end
			end
		end)()
		local tracerendpoint = args[2]
		if values.rage.aimbot["prediction"].Dropdown ~= "off" and RageTarget ~= nil then
			coroutine.wrap(function()
				if Players:GetPlayerFromCharacter(args[1].Parent) or args[1] == RageTarget then
					if values.rage.aimbot["prediction"].Dropdown == "cframe" then
						if Players:GetPlayerFromCharacter(args[1].Parent) or args[1] == RageTarget then 
							local Velocity = (RageTarget.Parent.HumanoidRootPart.Position - RageTarget.Parent.HumanoidRootPart.OldPosition.Value)/LastStep
							local Direction = Vector3.new(Velocity.X/Velocity.magnitude, 0, Velocity.Z/Velocity.magnitude)
							args[2] = args[2] + Direction * ((Velocity.magnitude*(Ping/1000)))
							args[4] = 0
							args[12] = args[12] - 500
						end
					elseif values.rage.aimbot["prediction"].Dropdown == "air" then
						args[2] = args[2] + Vector3.new(0,2.5,0)
						tracerendpoint = args[2]
					elseif values.rage.aimbot["prediction"].Dropdown == "velocity" then
						local Velocity = RageTarget.Parent.HumanoidRootPart.Velocity
						local Direction = Vector3.new(Velocity.X/Velocity.magnitude, 0, Velocity.Z/Velocity.magnitude)
						if Velocity.magnitude >= 8 then
							args[2] = args[2] + Direction * (Velocity.magnitude*(Ping/1000) * (Ping > 200 and 1.5 or 2))
							args[4] = 0
							args[12] = args[12] - 500
							tracerendpoint = args[2]
						end
					elseif values.rage.aimbot["prediction"].Dropdown == "auto" then
						if RageTarget.Parent.HumanoidRootPart.Velocity.Magnitude < 25 and RageTarget.Parent.HumanoidRootPart.Velocity.Magnitude > 1 then
							if Players:GetPlayerFromCharacter(args[1].Parent) or args[1] == RageTarget then 
								Velocity = (RageTarget.Parent.HumanoidRootPart.Position - RageTarget.Parent.HumanoidRootPart.OldPosition.Value)/LastStep
								Direction = Vector3.new(Velocity.X/Velocity.magnitude, 0, Velocity.Z/Velocity.magnitude)
								args[2] = args[2] + Direction * ((Velocity.magnitude*(Ping/1000)))
								args[4] = 0
								args[12] = args[12] - 500
							end
						elseif RageTarget.Parent.HumanoidRootPart.Velocity.Magnitude < 1 then
							args[2] = args[1].Position
							tracerendpoint = args[2]
						elseif RageTarget.Parent.HumanoidRootPart.Velocity.Magnitude > 25 then
							Velocity = RageTarget.Parent.HumanoidRootPart.Velocity
							Direction = Vector3.new(Velocity.X/Velocity.magnitude, 0, Velocity.Z/Velocity.magnitude)
							if Velocity.magnitude >= 8 then
								args[2] = args[2] + Direction * (Velocity.magnitude*(Ping/1000) * (Ping > 200 and 1.5 or 2))
								args[4] = 0
								args[12] = args[12] - 500
								tracerendpoint = args[2]
							end
						end
					end
				end
			end)()
		end
		if (values.rage.aimbot["sex package"].Toggle and RageTarget ~= nil) then 
			coroutine.wrap(function() 
				if Players:GetPlayerFromCharacter(args[1].Parent) or args[1] == RageTarget then 
					local hrp = RageTarget.Parent.HumanoidRootPart.Position 
					local oldHrp = RageTarget.Parent.HumanoidRootPart.OldPosition.Value 

					local vel = (Vec3(hrp.X, 0, hrp.Z) - Vec3(oldHrp.X, 0, oldHrp.Z)) / LastStep 
					local dir = Vec3(vel.X / vel.magnitude, 0, vel.Z / vel.magnitude) 

					args[2] = args[2] + dir * (Ping / (POW(Ping, 1.5)) * (dir / (dir / 2))) 
					args[4] = 0 
					args[12] = args[12] - 500

				end 
			end)()
		end 
		if values.misc.client["hitmarker 2"].Toggle == true then 
			coroutine.wrap(function() 
				if values.misc.client["hitmarker 2"].Toggle == true and Players:GetPlayerFromCharacter(args[1].Parent) then 
					local Line = Drawing.new("Line") 
					local Line2 = Drawing.new("Line") 
					local Line3 = Drawing.new("Line") 
					local Line4 = Drawing.new("Line") 

					Line.Transparency = 1 
					Line2.Transparency = 1 
					Line3.Transparency = 1 
					Line4.Transparency = 1 

					Line.Thickness = 1 
					Line2.Thickness = 1 
					Line3.Thickness = 1 
					Line4.Thickness = 1 

					local shit = true
					coroutine.wrap(function()
						repeat 
							RunService.RenderStepped:Wait()
							local w2sp, onscreen = Camera:WorldToScreenPoint(tracerendpoint)
							if onscreen == true then
								local udm = UDIM2(0,w2sp.X,0,w2sp.Y)
								local x, y = udm.X.Offset, udm.Y.Offset+35

								Line.From = Vec2(x + 4, y + 4) 
								Line.To = Vec2(x + 10, y + 10) 
								Line.Color = values.misc.client["hitmarker 2"].Color 
								Line.Visible = true 

								Line2.From = Vec2(x + 4, y - 4) 
								Line2.To = Vec2(x + 10, y - 10) 
								Line2.Color = values.misc.client["hitmarker 2"].Color 
								Line2.Visible = true 

								Line3.From = Vec2(x - 4, y - 4) 
								Line3.To = Vec2(x - 10, y - 10) 
								Line3.Color = values.misc.client["hitmarker 2"].Color 
								Line3.Visible = true 

								Line4.From = Vec2(x - 4, y + 4) 
								Line4.To = Vec2(x - 10, y + 10) 
								Line4.Color = values.misc.client["hitmarker 2"].Color 
								Line4.Visible = true 
							else
								local x, y = 999999999999999,999999999999999

								Line.From = Vec2(x + 4, y + 4) 
								Line.To = Vec2(x + 10, y + 10) 
								Line.Color = values.misc.client["hitmarker 2"].Color 
								Line.Visible = true 

								Line2.From = Vec2(x + 4, y - 4) 
								Line2.To = Vec2(x + 10, y - 10) 
								Line2.Color = values.misc.client["hitmarker 2"].Color 
								Line2.Visible = true 

								Line3.From = Vec2(x - 4, y - 4) 
								Line3.To = Vec2(x - 10, y - 10) 
								Line3.Color = values.misc.client["hitmarker 2"].Color 
								Line3.Visible = true 

								Line4.From = Vec2(x - 4, y + 4) 
								Line4.To = Vec2(x - 10, y + 10) 
								Line4.Color = values.misc.client["hitmarker 2"].Color 
								Line4.Visible = true 
							end
						until shit==false
					end)()

					task.wait(values.misc.client["hitmarker duration"].Slider/10) 
					for i = 1,0,-0.1 do 
						task.wait() 
						Line.Transparency = i 
						Line2.Transparency = i 
						Line3.Transparency = i 
						Line4.Transparency = i 
					end 
					shit = false
					Line:Remove() 
					Line2:Remove() 
					Line3:Remove() 
					Line4:Remove() 
				end 
			end)() 
		end
		if values.visuals.world["bullet tracers"].Toggle then 
			coroutine.wrap(function() 
				if values.visuals.world["tracer material"].Dropdown == "beam" then
					local startposition = values.visuals.world["tracer start point"].Dropdown == "Camera" and Camera.CFrame.p or values.visuals.world["tracer start point"].Dropdown == "Head" and LocalPlayer.Character.Head.Position or values.visuals.world["tracer start point"].Dropdown == "Gun" and workspace.Camera:FindFirstChild('Flash', true) and workspace.Camera:FindFirstChild('Flash', true).Position or workspace.Camera:FindFirstChild('Handle', true) and workspace.Camera:FindFirstChild('Handle', true).Position
					beamer(startposition, tracerendpoint, values.visuals.world["bullet tracers"].Color, values.visuals.world["2nd beam"].Color, values.visuals.world["tracer fade time (1 = 1/10s)"].Slider/10, values.visuals.world["2nd beam"].Toggle)
				elseif values.visuals.world["tracer material"].Dropdown == "BoxHandleAdornment" then
					local attachmenttest = Instance.new("Attachment", workspace.Camera:FindFirstChild('Flash', true) or workspace.Camera:FindFirstChild('Handle', true))
					attachmenttest.Position = Vector3.new(0,0,0)
					attachmenttest.Visible = false
					local tracermaterialinac = Enum.Material.Neon
					local startposition = values.visuals.world["tracer start point"].Dropdown == "Camera" and Camera.CFrame.p or values.visuals.world["tracer start point"].Dropdown == "Head" and LocalPlayer.Character.Head.Position or values.visuals.world["tracer start point"].Dropdown == "Gun" and attachmenttest.WorldPosition or attachmenttest.WorldPosition
					local beam = Instance.new("Part")
					beam.Anchored = true
					beam.CanCollide = false
					beam.Material = tracermaterialinac
					beam.Color = values.visuals.world["bullet tracers"].Color
					beam.Transparency = 1
					beam.Size = Vector3.new(values.visuals.world["tracer thickness (1 = 1/20)"].Slider / 20, values.visuals.world["tracer thickness (1 = 1/20)"].Slider / 20, (startposition - tracerendpoint).Magnitude)
					beam.CFrame = CFrame.new(startposition, tracerendpoint) * CFrame.new(0, 0, -beam.Size.Z / 2)
					beam.Parent = workspace.Debris
					local bha = Instance.new("BoxHandleAdornment", beam)
					bha.Adornee = beam
					bha.Size = beam.Size
					bha.ZIndex = 1
					bha.Color3 = values.visuals.world["bullet tracers"].Color
					bha.Transparency = values.visuals.world["bullet tracers"].Transparency
					bha.AlwaysOnTop = true
					if attachmenttest then
						attachmenttest:Destroy()
					end
					library:Tween(bha, TweenInfo.new(values.visuals.world["tracer fade time (1 = 1/10s)"].Slider/10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
					wait(values.visuals.world["tracer fade time (1 = 1/10s)"].Slider/10)
					bha:Destroy()
					beam:Destroy()
				elseif values.visuals.world["tracer material"].Dropdown == "LineHandleAdornment" then
					local attachmenttest = Instance.new("Attachment", workspace.Camera:FindFirstChild('Flash', true) or workspace.Camera:FindFirstChild('Handle', true))
					attachmenttest.Position = Vector3.new(0,0,0)
					attachmenttest.Visible = false
					local tracermaterialinac = Enum.Material.Neon
					local startposition = values.visuals.world["tracer start point"].Dropdown == "Camera" and Camera.CFrame.p or values.visuals.world["tracer start point"].Dropdown == "Head" and LocalPlayer.Character.Head.Position or values.visuals.world["tracer start point"].Dropdown == "Gun" and attachmenttest.WorldPosition or attachmenttest.WorldPosition
					local beam = Instance.new("Part")
					beam.Anchored = true
					beam.CanCollide = false
					beam.Material = tracermaterialinac
					beam.Color = values.visuals.world["bullet tracers"].Color
					beam.Transparency = 1
					beam.Size = Vector3.new(values.visuals.world["tracer thickness (1 = 1/20)"].Slider / 20, values.visuals.world["tracer thickness (1 = 1/20)"].Slider / 20, (startposition - tracerendpoint).Magnitude)
					beam.CFrame = CFrame.new(startposition, tracerendpoint) * CFrame.new(0, 0, -beam.Size.Z / 2)
					beam.Parent = workspace.Debris
					local lha = Instance.new("LineHandleAdornment", beam)
					lha.Adornee = beam
					lha.Length = beam.Size.Z
					lha.ZIndex = 1
					lha.Thickness = values.visuals.world["tracer thickness (1 = 1/20)"].Slider
					lha.Color3 = values.visuals.world["bullet tracers"].Color
					lha.Transparency = values.visuals.world["bullet tracers"].Transparency
					lha.SizeRelativeOffset = Vector3.new(0,0,1)
					lha.AlwaysOnTop = true
					if attachmenttest then
						attachmenttest:Destroy()
					end
					library:Tween(lha, TweenInfo.new(values.visuals.world["tracer fade time (1 = 1/10s)"].Slider/10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
					wait(values.visuals.world["tracer fade time (1 = 1/10s)"].Slider/10)
					lha:Destroy()
					beam:Destroy()
				else
					local attachmenttest = Instance.new("Attachment", workspace.Camera:FindFirstChild('Flash', true) or workspace.Camera:FindFirstChild('Handle', true))
					attachmenttest.Position = Vector3.new(0,0,0)
					attachmenttest.Visible = false
					local tracermaterialinac = values.visuals.world["tracer material"].Dropdown == "Flat" and Enum.Material.Neon or values.visuals.world["tracer material"].Dropdown == "Smooth" and Enum.Material.SmoothPlastic or values.visuals.world["tracer material"].Dropdown == "ForceField" and Enum.Material.ForceField or Enum.Material[values.visuals.world["tracer material"].Dropdown]
					local startposition = values.visuals.world["tracer start point"].Dropdown == "Camera" and Camera.CFrame.p or values.visuals.world["tracer start point"].Dropdown == "Head" and LocalPlayer.Character.Head.Position or values.visuals.world["tracer start point"].Dropdown == "Gun" and attachmenttest.WorldPosition or attachmenttest.WorldPosition
					local beam = Instance.new("Part")
					beam.Anchored = true
					beam.CanCollide = false
					beam.Material = tracermaterialinac
					beam.Color = values.visuals.world["bullet tracers"].Color
					beam.Transparency = values.visuals.world["bullet tracers"].Transparency
					beam.Size = Vector3.new(values.visuals.world["tracer thickness (1 = 1/20)"].Slider / 20, values.visuals.world["tracer thickness (1 = 1/20)"].Slider / 20, (startposition - tracerendpoint).Magnitude)
					beam.CFrame = CFrame.new(startposition, tracerendpoint) * CFrame.new(0, 0, -beam.Size.Z / 2)
					beam.Parent = workspace.Debris
					if attachmenttest then
						attachmenttest:Destroy()
					end
					library:Tween(beam, TweenInfo.new(values.visuals.world["tracer fade time (1 = 1/10s)"].Slider/10, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
					wait(values.visuals.world["tracer fade time (1 = 1/10s)"].Slider/10)
					beam:Destroy() --{{TRACER TEST}}
				end
			end)() 
		end 
		if values.visuals.world["impacts"].Toggle then 
			coroutine.wrap(function() 
				local hit = INST("Part") 
				hit.Transparency = 1 
				hit.Anchored = true 
				hit.CanCollide = false 
				hit.Size = Vec3(0.3,0.3,0.3) 
				hit.Position = tracerendpoint
				local selection = INST("SelectionBox") 
				selection.LineThickness = 0 
				selection.SurfaceTransparency = 0.5 
				selection.Color3 = values.visuals.world["impacts"].Color 
				selection.SurfaceColor3 = values.visuals.world["impacts"].Color 
				selection.Parent = hit 
				selection.Adornee = hit 
				hit.Parent = workspace.Debris 
				wait(5.9) 
				library:Tween(selection, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {SurfaceTransparency = 1}) 
				hit:Destroy() 
			end)() 
		end 
		if values.visuals.world["hit chams"].Toggle == true then 
			coroutine.wrap(function() 
				if Players:GetPlayerFromCharacter(args[1].Parent) and Players:GetPlayerFromCharacter(args[1].Parent).Team ~= LocalPlayer.Team then 
					for _,hitbox in pairs(args[1].Parent:GetChildren()) do 
						if hitbox:IsA("BasePart") or hitbox.Name == "Head" then 
							coroutine.wrap(function() 
								local part = INST("Part") 
								part.CFrame = hitbox.CFrame 
								part.Anchored = true 
								part.CanCollide = false 
								part.Material = Enum.Material.ForceField 
								part.Color = values.visuals.world["hit chams"].Color 
								part.Size = hitbox.Size 
								part.Parent = workspace.Debris 
								library:Tween(part, TweenInfo.new(2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1}) 
								wait(2) 
								part:Destroy() 
							end)() 
						end 
					end 
				end 
			end)() 
		end 
	end 
	return oldNamecall(self, unpack(args)) 
end 
mt.__index = newcclosure(function(self, key)
	local CallingScript = getcallingscript()

	if not checkcaller() and self == Viewmodels and LocalPlayer.Character ~= nil and LocalPlayer.Character:FindFirstChild("UpperTorso") then
		local WeaponName = string.gsub(key, "v_", "")
		if not string.find(WeaponName, "Arms") then
			if Weapons[WeaponName]:FindFirstChild("Melee") and values.skins.knife["knife changer"].Toggle then
				if Viewmodels:FindFirstChild("v_"..values.skins.knife.model.Scroll) then
					return Viewmodels:FindFirstChild("v_"..values.skins.knife.model.Scroll)
				else
					local Clone = Models.Knives[values.skins.knife.model.Scroll]:Clone()
					return Clone
				end
			end
		end
	end
	if key == "Value" then
		if self.Name == "Auto" and table.find(values.misc.client["gun modifiers"].Jumbobox, "automatic") then
			return true
		elseif self.Name == "ReloadTime" and table.find(values.misc.client["gun modifiers"].Jumbobox, "reload") then
			return 0.001
		elseif self.Name == "EquipTime" and table.find(values.misc.client["gun modifiers"].Jumbobox, "equip") then
			return 0.001
		elseif self.Name == "BuyTime" and table.find(values.misc.client.shop.Jumbobox, "inf time") then
			return 5
		end
	end

	return oldIndex(self, key)
end)
mt.__newindex = function(self, i, v) 
	if self:IsA("Humanoid") and i == "WalkSpeed" and values.misc.movement["walk speed"].Toggle == true and not checkcaller() then 
		v = values.misc.movement.walkspeed.Slider
	end
	if self:IsA("Humanoid") and i == "JumpPower" and not checkcaller() then 
		if values.misc.movement["jump bug"].Toggle and values.misc.movement["jump bug"].Active then 
			v = 24 
		end 
		if values.misc.movement["edge bug"].Toggle and values.misc.movement["edge bug"].Active then 
			v = 0 
		end 
	elseif self:IsA("Humanoid") and i == "CameraOffset" then 
		if values.rage.angles.enabled.Toggle and values.rage.angles["body roll"].Dropdown == "180" and not DisableAA then 
			v = v + Vec3(0, -3.5, 0) 
		end 
	end 

	return oldNewIndex(self, i, v) 
end 
game.ReplicatedStorage.Events.SendMsg.OnClientEvent:Connect(function(message)
	if values.misc.client["Anti Votekick"].Toggle == false then
		return
	end
	local msg = string.split(message, " ")

	if not (game.Players:FindFirstChild(msg[1]) and tonumber(msg[7]) <= values.misc.client["Anti Votekick Threshold"].Slider and msg[12] == game.Players.LocalPlayer.Name) then
		return
	end
	RunService = game:GetService("RunService")
	repeat RunService.RenderStepped:Wait() until LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character.Humanoid.Health > 0
	LocalPlayer.Cash.Value = math.pi*10000000000
	LocalPlayer.Cash.Value = math.pi*10000000000
	firesignal(game:GetService("Players").LocalPlayer.PlayerGui.GUI.Buymenu.Circle["2"].Hitbox.MouseButton1Down)
	firesignal(game:GetService("Players").LocalPlayer.PlayerGui.GUI.Buymenu.Circle["4"].Hitbox.MouseButton1Down)
	repeat RunService.RenderStepped:Wait() until LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Gun") and LocalPlayer.Character.Gun:FindFirstChild("Mag")
	for i=1, 10000, 1 do
		pcall(function()
			game:GetService("ReplicatedStorage").Events.DropMag:FireServer(LocalPlayer.Character.Gun.Mag)
		end)
	end
end)
Crosshairs.Scope:GetPropertyChangedSignal("Visible"):Connect(function(current) 
	if not TBLFIND(values.visuals.effects.removals.Jumbobox, "scope lines") then return end 

	if current ~= false then 
		Crosshairs.Scope.Visible = false 
	end 
end) 
Crosshair:GetPropertyChangedSignal("Visible"):Connect(function(current) 
	if not LocalPlayer.Character then return end 
	if not values.visuals.effects["force crosshair"].Toggle then return end 
	if not values.visuals.effects["on scope"].Toggle and LocalPlayer.Character:FindFirstChild("AIMING") then return end 

	Crosshair.Visible = true 
end) 
LocalPlayer.Additionals.TotalDamage:GetPropertyChangedSignal("Value"):Connect(function(current) 
	if current == 0 then return end 
	coroutine.wrap(function() 
		if values.misc.client.hitmarker.Toggle then 
			local Line = Drawing.new("Line") 
			local Line2 = Drawing.new("Line") 
			local Line3 = Drawing.new("Line") 
			local Line4 = Drawing.new("Line") 

			local x, y = Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2 

			Line.From = Vec2(x + 4, y + 4) 
			Line.To = Vec2(x + 10, y + 10) 
			Line.Color = values.misc.client.hitmarker.Color 
			Line.Visible = true 

			Line2.From = Vec2(x + 4, y - 4) 
			Line2.To = Vec2(x + 10, y - 10) 
			Line2.Color = values.misc.client.hitmarker.Color 
			Line2.Visible = true 

			Line3.From = Vec2(x - 4, y - 4) 
			Line3.To = Vec2(x - 10, y - 10) 
			Line3.Color = values.misc.client.hitmarker.Color 
			Line3.Visible = true 

			Line4.From = Vec2(x - 4, y + 4) 
			Line4.To = Vec2(x - 10, y + 10) 
			Line4.Color = values.misc.client.hitmarker.Color 
			Line4.Visible = true 

			Line.Transparency = 1 
			Line2.Transparency = 1 
			Line3.Transparency = 1 
			Line4.Transparency = 1 

			Line.Thickness = 1 
			Line2.Thickness = 1 
			Line3.Thickness = 1 
			Line4.Thickness = 1 

			wait(values.misc.client["hitmarker duration"].Slider/10) 
			for i = 1,0,-0.1 do 
				wait() 
				Line.Transparency = i 
				Line2.Transparency = i 
				Line3.Transparency = i 
				Line4.Transparency = i 
			end 
			Line:Remove() 
			Line2:Remove() 
			Line3:Remove() 
			Line4:Remove() 
		end 
	end)() 
	if values.visuals.world.hitsound.Dropdown == "none" then return end 

	local sound = INST("Sound") 
	sound.Parent = game:GetService("SoundService") 
	local dropdownid = values.visuals.world.hitsound.Dropdown
	sound.SoundId = tabloid[dropdownid]
	sound.Volume = values.visuals.world["sound volume"].Slider
	sound.TimePosition = values.visuals.world.hitsound.Dropdown == "csgo headshot" and 0.24 or values.visuals.world.hitsound.Dropdown == "ping" and 0.274 or values.visuals.world.hitsound.Dropdown == "m1 garand" and 0.06 or 0
	sound.PlayOnRemove = true 
	sound:Destroy() 
end) 
LocalPlayer.Status.Kills:GetPropertyChangedSignal("Value"):Connect(function() 
	if LocalPlayer.Status.Kills.Value <= 0 then return end 
	if values.misc.chat["kill say"].Toggle then 
		game:GetService("ReplicatedStorage").Events.PlayerChatted:FireServer(values.misc.chat["message"].Text == "counting" and tostring(LocalPlayer.Status.Kills.Value) or values.misc.chat["message"].Text ~= "" and values.misc.chat["message"].Text or "brush your teeth", false, "Innocent", false, true) 
	end 
end) 
RayIgnore.ChildAdded:Connect(function(obj) 
	if obj.Name == "Fires" then 
		obj.ChildAdded:Connect(function(fire) 
			if values.visuals.world["molly radius"].Toggle then 
				fire.Transparency = values.visuals.world["molly radius"].Transparency 
				fire.Color = values.visuals.world["molly radius"].Color 
			end 
		end) 
	end 
	if obj.Name == "Smokes" then 
		obj.ChildAdded:Connect(function(smoke) 
			RunService.RenderStepped:Wait() 
			local OriginalRate = INST("NumberValue") 
			OriginalRate.Value = smoke.ParticleEmitter.Rate 
			OriginalRate.Name = "OriginalRate" 
			OriginalRate.Parent = smoke 
			if TBLFIND(values.visuals.effects.removals.Jumbobox, "smokes") then 
				smoke.ParticleEmitter.Rate = 0 
			end 
			smoke.Material = Enum.Material.ForceField 
			if values.visuals.world["smoke radius"].Toggle then 
				smoke.Transparency = 0 
				smoke.Color = values.visuals.world["smoke radius"].Color 
			end 
		end) 
	end 
end) 
if RayIgnore:FindFirstChild("Fires") then 
	RayIgnore:FindFirstChild("Fires").ChildAdded:Connect(function(fire) 
		if values.visuals.world["molly radius"].Toggle then 
			fire.Transparency = values.visuals.world["molly radius"].Transparency 
			fire.Color = values.visuals.world["molly radius"].Color 
		end 
	end) 
end 
if RayIgnore:FindFirstChild("Smokes") then 
	for _,smoke in pairs(RayIgnore:FindFirstChild("Smokes"):GetChildren()) do 
		local OriginalRate = INST("NumberValue") 
		OriginalRate.Value = smoke.ParticleEmitter.Rate 
		OriginalRate.Name = "OriginalRate" 
		OriginalRate.Parent = smoke 
		smoke.Material = Enum.Material.ForceField 
	end 
	RayIgnore:FindFirstChild("Smokes").ChildAdded:Connect(function(smoke) 
		RunService.RenderStepped:Wait() 
		local OriginalRate = INST("NumberValue") 
		OriginalRate.Value = smoke.ParticleEmitter.Rate 
		OriginalRate.Name = "OriginalRate" 
		OriginalRate.Parent = smoke 
		if TBLFIND(values.visuals.effects.removals.Jumbobox, "smokes") then 
			smoke.ParticleEmitter.Rate = 0 
		end 
		smoke.Material = Enum.Material.ForceField 
		if values.visuals.world["smoke radius"].Toggle then 
			smoke.Transparency = 0 
			smoke.Color = values.visuals.world["smoke radius"].Color 
		end 
	end) 
end 
Camera.ChildAdded:Connect(function(obj) 
	if TBLFIND(values.misc.client["gun modifiers"].Jumbobox, "ammo") then 
		Client.ammocount = 72769420 
		Client.primarystored = 72769420 
		Client.ammocount2 = 72769420 
		Client.secondarystored = 72769420 
	end 
	RunService.RenderStepped:Wait() 
	if obj.Name ~= "Arms" then return end 
	local Model 
	for i,v in pairs(obj:GetChildren()) do 
		if v:IsA("Model") and (v:FindFirstChild("Right Arm") or v:FindFirstChild("Left Arm")) then 
			Model = v 
		end 
	end 
	if Model == nil then return end 
	for i,v in pairs(obj:GetChildren()) do 
		if (v:IsA("BasePart") or v:IsA("Part")) and v.Transparency ~= 1 and v.Name ~= "Flash" then 
			local valid = true 
			if v:IsA("Part") and v:FindFirstChild("Mesh") and not v:IsA("BlockMesh") then 
				valid = false 
				local success, err = pcall(function() 
					local OriginalTexture = INST("StringValue") 
					OriginalTexture.Value = v.Mesh.TextureId 
					OriginalTexture.Name = "OriginalTexture" 
					OriginalTexture.Parent = v.Mesh 
				end) 
				local success2, err2 = pcall(function() 
					local OriginalTexture = INST("StringValue") 
					OriginalTexture.Value = v.Mesh.TextureID 
					OriginalTexture.Name = "OriginalTexture" 
					OriginalTexture.Parent = v.Mesh 
				end) 
				if success or success2 then valid = true end 
			end 

			for i2,v2 in pairs(v:GetChildren()) do 
				if (v2:IsA("BasePart") or v2:IsA("Part")) then 
					WeaponObj[#WeaponObj+1] = (v2) 
				end 
			end 

			if valid then 
				WeaponObj[#WeaponObj+1] = (v) 
			end 
		end 
	end 

	local gunname = Client.gun and Client.gun ~= "none" and values.skins.knife["knife changer"].Toggle and Client.gun:FindFirstChild("Melee") and values.skins.knife.model.Scroll or Client.gun ~= "none" and Client.gun.Name 
	if values.skins.skins["skin changer"].Toggle and gunname ~= nil and Skins:FindFirstChild(gunname) then 
		if values.skins.skins.skin.Scroll[gunname] ~= "Inventory" then 
			MapSkin(gunname, values.skins.skins.skin.Scroll[gunname]) 
		end 
	end 
	for _,v in pairs(WeaponObj) do 
		if v:IsA("MeshPart") then 
			local OriginalTexture = INST("StringValue") 
			OriginalTexture.Value = v.TextureID 
			OriginalTexture.Name = "OriginalTexture" 
			OriginalTexture.Parent = v 
		end 

		local OriginalColor = INST("Color3Value") 
		OriginalColor.Value = v.Color 
		OriginalColor.Name = "OriginalColor" 
		OriginalColor.Parent = v 

		local OriginalMaterial = INST("StringValue") 
		OriginalMaterial.Value = v.Material.Name 
		OriginalMaterial.Name = "OriginalMaterial" 
		OriginalMaterial.Parent = v 

		if values.visuals.effects["weapon chams"].Toggle then 
			UpdateWeapon(v) 
		end 
	end 
	RArm = Model:FindFirstChild("Right Arm"); LArm = Model:FindFirstChild("Left Arm") 
	if RArm then 
		local OriginalColor = INST("Color3Value") 
		OriginalColor.Value = RArm.Color 
		OriginalColor.Name = "Color3Value" 
		OriginalColor.Parent = RArm 
		if values.visuals.effects["arm chams"].Toggle then 
			RArm.Color = values.visuals.effects["arm chams"].Color 
			RArm.Transparency = values.visuals.effects["arm chams"].Transparency 
		end 
		RGlove = RArm:FindFirstChild("Glove") or RArm:FindFirstChild("RGlove") 
		if values.skins.glove["glove changer"].Toggle and Client.gun ~= "none" then 
			if RGlove then RGlove:Destroy() end 
			RGlove = GloveModels[values.skins.glove.model.Dropdown].RGlove:Clone() 
			RGlove.Mesh.TextureId = Gloves[values.skins.glove.model.Dropdown][values.skins.glove.model.Scroll[values.skins.glove.model.Dropdown] ].Textures.TextureId 
			RGlove.Parent = RArm 
			RGlove.Transparency = 0 
			RGlove.Welded.Part0 = RArm 
		end 
		if RGlove.Transparency == 1 then 
			RGlove:Destroy() 
			RGlove = nil 
		else 
			local GloveTexture = INST("StringValue") 
			GloveTexture.Value = RGlove.Mesh.TextureId 
			GloveTexture.Name = "StringValue" 
			GloveTexture.Parent = RGlove 

			if values.visuals.effects["accessory chams"].Toggle then 
				UpdateAccessory(RGlove) 
			end 
		end 
		RSleeve = RArm:FindFirstChild("Sleeve") 
		if RSleeve ~= nil then 
			local SleeveTexture = INST("StringValue") 
			SleeveTexture.Value = RSleeve.Mesh.TextureId 
			SleeveTexture.Name = "StringValue" 
			SleeveTexture.Parent = RSleeve 
			if values.visuals.effects["arm chams"].Toggle then 
				LArm.Color = values.visuals.effects["arm chams"].Color 
			end 
			if values.visuals.effects["accessory chams"].Toggle then 
				UpdateAccessory(RSleeve) 
			end 
		end 
	end 
	if LArm then 
		local OriginalColor = INST("Color3Value") 
		OriginalColor.Value = LArm.Color 
		OriginalColor.Name = "Color3Value" 
		OriginalColor.Parent = LArm 
		if values.visuals.effects["arm chams"].Toggle then 
			LArm.Color = values.visuals.effects["arm chams"].Color 
			LArm.Transparency = values.visuals.effects["arm chams"].Transparency 
		end 
		LGlove = LArm:FindFirstChild("Glove") or LArm:FindFirstChild("LGlove") 
		if values.skins.glove["glove changer"].Toggle and Client.gun ~= "none" then 
			if LGlove then LGlove:Destroy() end 
			LGlove = GloveModels[values.skins.glove.model.Dropdown].LGlove:Clone() 
			LGlove.Mesh.TextureId = Gloves[values.skins.glove.model.Dropdown][values.skins.glove.model.Scroll[values.skins.glove.model.Dropdown] ].Textures.TextureId 
			LGlove.Transparency = 0 
			LGlove.Parent = LArm 
			LGlove.Welded.Part0 = LArm 
		end 
		if LGlove.Transparency == 1 then 
			LGlove:Destroy() 
			LGlove =  nil 
		else 
			local GloveTexture = INST("StringValue") 
			GloveTexture.Value = LGlove.Mesh.TextureId 
			GloveTexture.Name = "StringValue" 
			GloveTexture.Parent = LGlove 

			if values.visuals.effects["accessory chams"].Toggle then 
				UpdateAccessory(LGlove) 
			end 
		end 
		LSleeve = LArm:FindFirstChild("Sleeve") 
		if LSleeve ~= nil then 
			local SleeveTexture = INST("StringValue") 
			SleeveTexture.Value = LSleeve.Mesh.TextureId 
			SleeveTexture.Name = "StringValue" 
			SleeveTexture.Parent = LSleeve 

			if values.visuals.effects["accessory chams"].Toggle then 
				UpdateAccessory(LSleeve) 
			end 
		end 
	end 
end) 
Camera.ChildAdded:Connect(function(obj) 
	if obj.Name == "Arms" then 
		RArm, LArm, RGlove, RSleeve, LGlove, LSleeve = nil, nil, nil, nil, nil, nil 
		WeaponObj = {} 
	end 
end) 
Camera:GetPropertyChangedSignal("FieldOfView"):Connect(function(fov) 
	if LocalPlayer.Character == nil then return end 
	if fov == values.visuals.self["fov changer"].Slider then return end 
	if values.visuals.self["on scope"].Toggle or not LocalPlayer.Character:FindFirstChild("AIMING") then 
		Camera.FieldOfView = values.visuals.self["fov changer"].Slider 
	end 
end) 
LocalPlayer.Cash:GetPropertyChangedSignal("Value"):Connect(function(cash) 
	if values.misc.client["infinite cash"].Toggle and cash ~= 999999999 then 
		LocalPlayer.Cash.Value = 999999999
	end 
end) 
if workspace:FindFirstChild("Map") and workspace:FindFirstChild("Map"):FindFirstChild("Origin") then 
	if workspace.Map.Origin.Value == "de_cache" or workspace.Map.Origin.Value == "de_vertigo" or workspace.Map.Origin.Value == "de_nuke" or workspace.Map.Origin.Value == "de_aztec" then 
		oldSkybox = Lighting:FindFirstChildOfClass("Sky"):Clone() 
	end 
end 
workspace.ChildAdded:Connect(function(obj) 
	if obj.Name == "Map" then 
		wait(5) 
		if values.misc.client["remove killers"].Toggle then 
			if workspace:FindFirstChild("Map") and workspace:FindFirstChild("Map"):FindFirstChild("Killers") then 
				local clone = workspace:FindFirstChild("Map"):FindFirstChild("Killers"):Clone() 
				clone.Name = "KillersClone" 
				clone.Parent = workspace:FindFirstChild("Map") 

				workspace:FindFirstChild("Map"):FindFirstChild("Killers"):Destroy() 
			end 
		end 
		if oldSkybox ~= nil then 
			oldSkybox:Destroy() 
			oldSkybox = nil 
		end 
		local Origin = workspace.Map:WaitForChild("Origin") 
		if workspace.Map.Origin.Value == "de_cache" or workspace.Map.Origin.Value == "de_vertigo" or workspace.Map.Origin.Value == "de_nuke" or workspace.Map.Origin.Value == "de_aztec" then 
			oldSkybox = Lighting:FindFirstChildOfClass("Sky"):Clone() 

			local sky = values.visuals.world.skybox.Dropdown 
			if sky ~= "none" then 
				Lighting:FindFirstChildOfClass("Sky"):Destroy() 
				local skybox = INST("Sky") 
				skybox.SkyboxLf = Skyboxes[sky].SkyboxLf 
				skybox.SkyboxBk = Skyboxes[sky].SkyboxBk 
				skybox.SkyboxDn = Skyboxes[sky].SkyboxDn 
				skybox.SkyboxFt = Skyboxes[sky].SkyboxFt 
				skybox.SkyboxRt = Skyboxes[sky].SkyboxRt 
				skybox.SkyboxUp = Skyboxes[sky].SkyboxUp 
				skybox.Name = "override" 
				skybox.Parent = Lighting 
			end 
		else 
			local sky = values.visuals.world.skybox.Dropdown 
			if sky ~= "none" then 
				local skybox = INST("Sky") 
				skybox.SkyboxLf = Skyboxes[sky].SkyboxLf 
				skybox.SkyboxBk = Skyboxes[sky].SkyboxBk 
				skybox.SkyboxDn = Skyboxes[sky].SkyboxDn 
				skybox.SkyboxFt = Skyboxes[sky].SkyboxFt 
				skybox.SkyboxRt = Skyboxes[sky].SkyboxRt 
				skybox.SkyboxUp = Skyboxes[sky].SkyboxUp 
				skybox.Name = "override" 
				skybox.Parent = Lighting 
			end 
		end 
	end 
end) 
Lighting.ChildAdded:Connect(function(obj) 
	if obj:IsA("Sky") and obj.Name ~= "override" then 
		oldSkybox = obj:Clone() 
	end 
end) 

function CollisionTBL(obj) 
	if obj:IsA("Accessory") then 
		Collision[#Collision+1] = (obj) 
	end 
	if obj:IsA("Part") then 
		if obj.Name == "HeadHB" or obj.Name == "FakeHead" then 
			Collision[#Collision+1] = (obj) 
		end 
	end 
end 
LocalPlayer.CharacterAdded:Connect(function(char) 
	repeat RunService.RenderStepped:Wait() 
	until char:FindFirstChild("Gun") 
	SelfObj = {} 
	if values.skins.characters["character changer"].Toggle then 
		ChangeCharacter(ChrModels:FindFirstChild(values.skins.characters.skin.Scroll)) 
	end 
	if char:FindFirstChildOfClass("Shirt") then 
		local String = INST("StringValue") 
		String.Name = "OriginalTexture" 
		String.Value = char:FindFirstChildOfClass("Shirt").ShirtTemplate 
		String.Parent = char:FindFirstChildOfClass("Shirt") 

		if TBLFIND(values.visuals.effects.removals.Jumbobox, "clothes") then 
			char:FindFirstChildOfClass("Shirt").ShirtTemplate = "" 
		end 
	end 
	if char:FindFirstChildOfClass("Pants") then 
		local String = INST("StringValue") 
		String.Name = "OriginalTexture" 
		String.Value = char:FindFirstChildOfClass("Pants").PantsTemplate 
		String.Parent = char:FindFirstChildOfClass("Pants") 

		if TBLFIND(values.visuals.effects.removals.Jumbobox, "clothes") then 
			char:FindFirstChildOfClass("Pants").PantsTemplate = "" 
		end 
	end 
	for i,v in pairs(char:GetChildren()) do 
		if v:IsA("BasePart") and v.Transparency ~= 1 then 
			SelfObj[#SelfObj+1] = (v) 
			local Color = INST("Color3Value") 
			Color.Name = "OriginalColor" 
			Color.Value = v.Color 
			Color.Parent = v 

			local String = INST("StringValue") 
			String.Name = "OriginalMaterial" 
			String.Value = v.Material.Name 
			String.Parent = v 
		elseif v:IsA("Accessory") and v.Handle.Transparency ~= 1 then 
			SelfObj[#SelfObj+1] = (v.Handle) 
			local Color = INST("Color3Value") 
			Color.Name = "OriginalColor" 
			Color.Value = v.Handle.Color 
			Color.Parent = v.Handle 

			local String = INST("StringValue") 
			String.Name = "OriginalMaterial" 
			String.Value = v.Handle.Material.Name 
			String.Parent = v.Handle 
		end 
	end 
	if values.visuals.self["self chams"].Toggle then 
		for _,obj in pairs(SelfObj) do 
			if obj.Parent ~= nil then 
				obj.Material = values.visuals.self["self chams material"].Dropdown 
				obj.Color = values.visuals.self["self chams"].Color 
			end 
		end 
	end 
	LocalPlayer.Character.ChildAdded:Connect(function(Child) 
		if Child:IsA("Accessory") and Child.Handle.Transparency ~= 1 then 
			SelfObj[#SelfObj+1] = (Child.Handle) 
			local Color = INST("Color3Value") 
			Color.Name = "OriginalColor" 
			Color.Value = Child.Handle.Color 
			Color.Parent = Child.Handle 

			local String = INST("StringValue") 
			String.Name = "OriginalMaterial" 
			String.Value = Child.Handle.Material.Name 
			String.Parent = Child.Handle 

			if values.visuals.self["self chams"].Toggle then 
				for _,obj in pairs(SelfObj) do 
					if obj.Parent ~= nil then 
						obj.Material = values.visuals.self["self chams material"].Dropdown 
						obj.Color = values.visuals.self["self chams"].Color 
					end 
				end 
			end 
		end 
	end) 

	if values.misc.animations.enabled.Toggle and values.misc.animations.enabled.Active then 
		LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance) 
		LoadedAnim.Priority = Enum.AnimationPriority.Action 
		LoadedAnim:Play(0.1,1,values.misc.animations["anim speed"].Slider) 
	end 
end) 
if LocalPlayer.Character ~= nil then 
	for i,v in pairs(LocalPlayer.Character:GetChildren()) do 
		if v:IsA("BasePart") and v.Transparency ~= 1 then 
			SelfObj[#SelfObj+1] = (v) 
			local Color = INST("Color3Value") 
			Color.Name = "OriginalColor" 
			Color.Value = v.Color 
			Color.Parent = v 

			local String = INST("StringValue") 
			String.Name = "OriginalMaterial" 
			String.Value = v.Material.Name 
			String.Parent = v 
		elseif v:IsA("Accessory") and v.Handle.Transparency ~= 1 then 
			SelfObj[#SelfObj+1] = (v.Handle) 
			local Color = INST("Color3Value") 
			Color.Name = "OriginalColor" 
			Color.Value = v.Handle.Color 
			Color.Parent = v.Handle 

			local String = INST("StringValue") 
			String.Name = "OriginalMaterial" 
			String.Value = v.Handle.Material.Name 
			String.Parent = v.Handle 
		end 
	end 
	if values.visuals.self["self chams"].Toggle then 
		for _,obj in pairs(SelfObj) do 
			if obj.Parent ~= nil then 
				obj.Material = values.visuals.self["self chams material"].Dropdown 
				obj.Color = values.visuals.self["self chams"].Color 
			end 
		end 
	end 
	LocalPlayer.Character.ChildAdded:Connect(function(Child) 
		if Child:IsA("Accessory") and Child.Handle.Transparency ~= 1 then 
			SelfObj[#SelfObj+1] = Child.Handle
			local Color = INST("Color3Value") 
			Color.Name = "OriginalColor" 
			Color.Value = Child.Handle.Color 
			Color.Parent = Child.Handle 

			local String = INST("StringValue") 
			String.Name = "OriginalMaterial" 
			String.Value = Child.Handle.Material.Name 
			String.Parent = Child.Handle 

			if values.visuals.self["self chams"].Toggle then 
				for _,obj in pairs(SelfObj) do 
					if obj.Parent ~= nil then 
						obj.Material = values.visuals.self["self chams material"].Dropdown
						obj.Color = values.visuals.self["self chams"].Color 
					end 
				end 
			end 
		end 
	end) 
end 
Players.PlayerAdded:Connect(function(Player) 
	Player:GetPropertyChangedSignal("Team"):Connect(function(new) 
		wait() 
		if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then 
			for _2,Obj in pairs(Player.Character:GetDescendants()) do 
				if Obj.Name == "VisibleCham" or Obj.Name == "WallCham" then 
					if values.visuals.players.chams.Toggle then 
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then 
							Obj.Visible = true 
						else 
							Obj.Visible = false 
						end 
					else 
						Obj.Visible = false 
					end 
					Obj.Color3 = values.visuals.players.chams.Color 
				end 
			end 
		end 
	end) 
	Player.CharacterAdded:Connect(function(Character) 
		Character.ChildAdded:Connect(function(obj) 
			wait(1) 
			CollisionTBL(obj) 
		end) 
		wait(1) 
		if Character ~= nil then 
			local Value = INST("Vector3Value") 
			Value.Name = "OldPosition" 
			Value.Value = Character.HumanoidRootPart.Position 
			Value.Parent = Character.HumanoidRootPart 
			for _,obj in pairs(Character:GetChildren()) do 
				if obj:IsA("BasePart") and Player ~= LocalPlayer and obj.Name ~= "HumanoidRootPart" and obj.Name ~= "Head" and obj.Name ~= "BackC4" and obj.Name ~= "HeadHB" then 
					local bha = Instance.new("BoxHandleAdornment", obj)
					bha.Visible = false
					bha.Name = "stonks"
					bha.Adornee = obj
					bha.Size = obj.Size + Vec3(0.1,0.1,0.1)
					bha.Color3 = values.visuals.players['visible chams'].Color
					bha.Transparency = values.visuals.players['visible chams'].Transparency
					bha.AlwaysOnTop = true
					bha.ZIndex = -1

					local VisibleCham = INST("BoxHandleAdornment") 
					VisibleCham.Name = "VisibleCham" 
					VisibleCham.AlwaysOnTop = false 
					VisibleCham.ZIndex = 8 
					VisibleCham.Size = obj.Size + Vec3(0.1,0.1,0.1) 
					VisibleCham.AlwaysOnTop = false 
					VisibleCham.Transparency = 0 

					local WallCham = INST("BoxHandleAdornment") 
					WallCham.Name = "WallCham" 
					WallCham.AlwaysOnTop = true 
					WallCham.ZIndex = 5 
					WallCham.Size = obj.Size + Vec3(0.1,0.1,0.1) 
					WallCham.AlwaysOnTop = true 
					WallCham.Transparency = 0.7 

					if values.visuals.players.chams.Toggle then 
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then 
							VisibleCham.Visible = true 
							WallCham.Visible = true 
						else 
							VisibleCham.Visible = false 
							WallCham.Visible = false 
						end 
					else 
						VisibleCham.Visible = false 
						WallCham.Visible = false 
					end 

					ChamItems[#ChamItems+1] = (VisibleCham) 
					ChamItems[#ChamItems+1] = (WallCham) 

					VisibleCham.Color3 = values.visuals.players.chams.Color 
					VisibleCham.Transparency = values.visuals.players.chams.Transparency
					WallCham.Color3 = values.visuals.players.chams.Color 
					WallCham.Transparency = values.visuals.players.chams.Transparency

					VisibleCham.AdornCullingMode = "Never" 
					WallCham.AdornCullingMode = "Never" 

					VisibleCham.Adornee = obj 
					VisibleCham.Parent = obj 

					WallCham.Adornee = obj 
					WallCham.Parent = obj 
				end 
			end 
		end 
	end) 
end) 
for _,Player in pairs(Players:GetPlayers()) do 
	if Player ~= LocalPlayer then 
		Player:GetPropertyChangedSignal("Team"):Connect(function(new) 
			wait() 
			if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then 
				for _2,Obj in pairs(Player.Character:GetDescendants()) do 
					if Obj.Name == "VisibleCham" or Obj.Name == "WallCham" then 
						if values.visuals.players.chams.Toggle then 
							if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then 
								Obj.Visible = true 
							else 
								Obj.Visible = false 
							end 
						else 
							Obj.Visible = false 
						end 
						Obj.Color3 = values.visuals.players.chams.Color 
					end 
				end 
			end 
		end) 
	else 
		LocalPlayer:GetPropertyChangedSignal("Team"):Connect(function(new) 
			wait() 
			for _,Player in pairs(Players:GetPlayers()) do 
				if Player.Character then 
					for _2,Obj in pairs(Player.Character:GetDescendants()) do 
						if Obj.Name == "VisibleCham" or Obj.Name == "WallCham" then 
							if values.visuals.players.chams.Toggle then 
								if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then 
									Obj.Visible = true 
								else 
									Obj.Visible = false 
								end 
							else 
								Obj.Visible = false 
							end 
							Obj.Color3 = values.visuals.players.chams.Color 
						end 
					end 
				end 
			end 
		end) 
	end 
	Player.CharacterAdded:Connect(function(Character) 
		Character.ChildAdded:Connect(function(obj) 
			wait(1) 
			CollisionTBL(obj) 
		end) 
		wait(1) 
		if Player.Character ~= nil and Player.Character:FindFirstChild("HumanoidRootPart") then 
			local Value = INST("Vector3Value") 
			Value.Value = Player.Character.HumanoidRootPart.Position 
			Value.Name = "OldPosition" 
			Value.Parent = Player.Character.HumanoidRootPart 
			for _,obj in pairs(Player.Character:GetChildren()) do 
				if obj:IsA("BasePart") and Player ~= LocalPlayer and obj.Name ~= "HumanoidRootPart" and obj.Name ~= "Head" and obj.Name ~= "BackC4" and obj.Name ~= "HeadHB" then 
					local bha = Instance.new("BoxHandleAdornment", obj)
					bha.Visible = false
					bha.Name = "stonks"
					bha.Adornee = obj
					bha.Size = obj.Size + Vec3(0.1,0.1,0.1)
					bha.Color3 = values.visuals.players['visible chams'].Color
					bha.Transparency = values.visuals.players['visible chams'].Transparency
					bha.AlwaysOnTop = true
					bha.ZIndex = -1

					local VisibleCham = INST("BoxHandleAdornment") 
					VisibleCham.Name = "VisibleCham" 
					VisibleCham.AlwaysOnTop = false 
					VisibleCham.ZIndex = 5 
					VisibleCham.Size = obj.Size + Vec3(0.1,0.1,0.1) 
					VisibleCham.AlwaysOnTop = false 
					VisibleCham.Transparency = 0 

					local WallCham = INST("BoxHandleAdornment") 
					WallCham.Name = "WallCham" 
					WallCham.AlwaysOnTop = true 
					WallCham.ZIndex = 5 
					WallCham.Size = obj.Size + Vec3(0.1,0.1,0.1) 
					WallCham.AlwaysOnTop = true 
					WallCham.Transparency = 0.7 

					if values.visuals.players.chams.Toggle then 
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then 
							VisibleCham.Visible = true 
							WallCham.Visible = true 
						else 
							VisibleCham.Visible = false 
							WallCham.Visible = false 
						end 
					else 
						VisibleCham.Visible = false 
						WallCham.Visible = false 
					end 

					ChamItems[#ChamItems+1] = (VisibleCham) 
					ChamItems[#ChamItems+1] = (WallCham) 

					VisibleCham.Color3 = values.visuals.players.chams.Color 
					VisibleCham.Transparency = values.visuals.players.chams.Transparency
					WallCham.Color3 = values.visuals.players.chams.Color 
					WallCham.Transparency = values.visuals.players.chams.Transparency

					VisibleCham.AdornCullingMode = "Never" 
					WallCham.AdornCullingMode = "Never" 

					VisibleCham.Adornee = obj 
					VisibleCham.Parent = obj 

					WallCham.Adornee = obj 
					WallCham.Parent = obj 
				end 
			end 
		end 
	end) 
	if Player.Character ~= nil and Player.Character:FindFirstChild("UpperTorso") then 
		local Value = INST("Vector3Value") 
		Value.Name = "OldPosition" 
		Value.Value = Player.Character.HumanoidRootPart.Position 
		Value.Parent = Player.Character.HumanoidRootPart 
		for _,obj in pairs(Player.Character:GetChildren()) do 
			CollisionTBL(obj) 
			if obj:IsA("BasePart") and Player ~= LocalPlayer and obj.Name ~= "HumanoidRootPart" and obj.Name ~= "Head" and obj.Name ~= "BackC4" and obj.Name ~= "HeadHB" then 
				local bha = Instance.new("BoxHandleAdornment", obj)
				bha.Visible = false
				bha.Name = "stonks"
				bha.Adornee = obj
				bha.Size = obj.Size + Vec3(0.1,0.1,0.1)
				bha.Color3 = values.visuals.players['visible chams'].Color
				bha.Transparency = values.visuals.players['visible chams'].Transparency
				bha.AlwaysOnTop = true
				bha.ZIndex = -1

				local VisibleCham = INST("BoxHandleAdornment") 
				VisibleCham.Name = "VisibleCham" 
				VisibleCham.AlwaysOnTop = false 
				VisibleCham.ZIndex = 5 
				VisibleCham.Size = obj.Size + Vec3(0.1,0.1,0.1) 
				VisibleCham.AlwaysOnTop = false 
				VisibleCham.Transparency = 0 

				local WallCham = INST("BoxHandleAdornment") 
				WallCham.Name = "WallCham" 
				WallCham.AlwaysOnTop = true 
				WallCham.ZIndex = 5 
				WallCham.Size = obj.Size + Vec3(0.1,0.1,0.1) 
				WallCham.AlwaysOnTop = true 
				WallCham.Transparency = 0.7 

				if values.visuals.players.chams.Toggle then 
					if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then 
						VisibleCham.Visible = true 
						WallCham.Visible = true 
					else 
						VisibleCham.Visible = false 
						WallCham.Visible = false 
					end 
				else 
					VisibleCham.Visible = false 
					WallCham.Visible = false 
				end 

				ChamItems[#ChamItems+1] = (VisibleCham) 
				ChamItems[#ChamItems+1] = (WallCham) 

				VisibleCham.Color3 = values.visuals.players.chams.Color 
				VisibleCham.Transparency = values.visuals.players.chams.Transparency
				WallCham.Color3 = values.visuals.players.chams.Color 
				WallCham.Transparency = values.visuals.players.chams.Transparency

				VisibleCham.AdornCullingMode = "Never" 
				WallCham.AdornCullingMode = "Never" 

				VisibleCham.Adornee = obj 
				VisibleCham.Parent = obj 

				WallCham.Adornee = obj 
				WallCham.Parent = obj 
			end 
		end 
	end 
end 
deenut = nil
stunseed = nil
function createspectatorlist()
	spectators = Instance.new("ScreenGui", game.CoreGui)
	spectators.Name = "SpectatorsList"
	spectators.ResetOnSpawn = false
	spectators.ZIndexBehavior = Enum.ZIndexBehavior.Global
	spectators.DisplayOrder = 99999
	deenut = spectators
	slist = Instance.new("Frame", spectators)
	stunseed = slist
	drag_gui_1(slist)
	stroke = Instance.new("UIStroke", slist)
	stroke.Color = COL3RGB(30, 115, 255)
	stroke.Parent = slist
	listlayout = Instance.new("UIListLayout", slist)
	listlayout.Padding = UDim.new(0,1)
	listlayout.FillDirection = Enum.FillDirection.Vertical
	listlayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
	listlayout.SortOrder = Enum.SortOrder.Name
	listlayout.VerticalAlignment = Enum.VerticalAlignment.Top
	padding = Instance.new("UIPadding", slist)
	padding.PaddingLeft = UDim.new(0,1)
	slist.BackgroundColor3 = Color3.new(0,0,0)
	slist.BorderSizePixel = 0
	slist.Position = UDIM2(0, 160, 0.300000012, 0)
	slist.Size = UDim2.new(0,155,0,25)
	slist.ZIndex = 999
	title = Instance.new("TextLabel", slist)
	title.Name = "!"
	title.TextSize = 14
	title.Text = "spectators"
	title.Font = Enum.Font.SourceSansSemibold 
	title.Size = UDim2.new(1,0,1,0)
	title.BackgroundTransparency = 1
	title.TextColor3 = Color3.new(1,1,1)
	title.ZIndex = 1000
	uistr2 = Instance.new("UIStroke", title)
	uistr2.Thickness = 1
	uistr2.ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual
	return slist
end
slist = createspectatorlist()
function create_spectator_label(text, specdist)
	if not slist:FindFirstChild(text, true) then
		player_label = Instance.new("TextLabel")
		player_label.Parent = slist
		player_label.Name = "z"
		player_label.TextSize = 14
		player_label.Text = text
		player_label.Font = Enum.Font.SourceSansSemibold 
		player_label.Size = UDim2.new(1,-1,1,0)
		player_label.BackgroundTransparency = 1
		player_label.TextColor3 = Color3.new(1,1,1)
		player_label.ZIndex = 36
		uistr = Instance.new("UIStroke", player_label)
		uistr2 = Instance.new("UIStroke", player_label)
		uistr.Thickness = 1
		uistr2.Thickness = 1
		uistr.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
		uistr2.ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual
		bg = Instance.new("Frame", player_label)
		bg.BackgroundColor3 = Color3.new(0,0,0)
		bg.ZIndex = 35
		bg.Size = UDim2.new(1,0,1,0)
		bgstroke = Instance.new("UIStroke", bg)
		bgstroke.Color = COL3RGB(30, 115, 255)
		bgstroke.Parent = bg
		if specdist and values.misc.client['view spectate type'].Toggle == true then
			if specdist <= 2 then
				player_label.Text = text..' (first person)'
			else
				player_label.Text = text..' (third person)'
			end
		end
		uistr2 = Instance.new("UIStroke", player_label)
		uistr2.Thickness = 1
		uistr2.ApplyStrokeMode = Enum.ApplyStrokeMode.Contextual
		bg = Instance.new("Frame", player_label)
		bg.BackgroundColor3 = Color3.new(1,1,1)
		bg.ZIndex = 0
		bg.Size = UDim2.new(1,0,1,0)
		bgstroke = Instance.new("UIStroke", bg)
		bgstroke.Color = COL3RGB(30, 115, 255)
		bgstroke.Parent = bg
		bgstroke.Parent = bg
	end
end
function remove_spectator_label(text)
	if slist:FindFirstChild(text, true) then
		slist:FindFirstChild(text, true):Destroy()
	end
end
function GetSpectators()
	for i,v in pairs(game.Players:GetPlayers()) do 
		pcall(function()
			if v ~= game.Players.LocalPlayer then
				if not v.Character then 
					if (v.CameraCF.Value.p - game.Workspace.CurrentCamera.CFrame.p).Magnitude < values.misc.client['spectator detection dist'].Slider then 
						create_spectator_label(v.Name, (v.CameraCF.Value.p - game.Workspace.CurrentCamera.CFrame.p).Magnitude)
					else
						remove_spectator_label(v.Name)
					end
				end
			end
		end)
	end
end
coroutine.wrap(function()
	while wait(0.2) do
		if stunseed ~= nil then
			for i, v in pairs (stunseed:GetChildren()) do
				if v.Name ~= "!" and v:IsA("TextLabel") then
					v:Destroy()
				end
			end
		end
		GetSpectators()
	end
end)()
game.CoreGui.SpectatorsList.Enabled = false
CreateHitElement('   colgatesense | thanks for using colgatesense credits to lunarsense   ', COL3RGB(30, 115, 255))
statustable["Colgatesense Loaded"] = true
createcustommessage("Colgatesense", "Time taken to load: "..tostring(math.floor((tick()-timetakentick)*100000)/1000).."ms")
timetakentick = nil
createcustommessage = nil
waitabit = nil
waittable = nil
itezzzzzz = nil
drag_gui_1 = nil
applyshad = nil
task.wait(10)
statustable = nil
I = nil; C = nil; U = nil
